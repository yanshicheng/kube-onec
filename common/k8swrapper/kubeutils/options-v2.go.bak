package kubeutils

import (
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/resource"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MetadataType 定义元数据类型，用于区分 Labels 和 Annotations
type MetadataType string

const (
	Labels      MetadataType = "labels"
	Annotations MetadataType = "annotations"
)

// WithMetadata 通用 Option 函数，支持泛型对象
func WithMetadata[T metav1.Object](metaType MetadataType, data map[string]string) func(T) {
	return func(obj T) {
		switch metaType {
		case Labels:
			if obj.GetLabels() == nil {
				obj.SetLabels(map[string]string{})
			}
			for key, value := range data {
				obj.GetLabels()[key] = value
			}
		case Annotations:
			if obj.GetAnnotations() == nil {
				obj.SetAnnotations(map[string]string{})
			}
			for key, value := range data {
				obj.GetAnnotations()[key] = value
			}
		}
	}
}

// WithLabels 封装 WithMetadata，用于 Labels
func WithLabels[T metav1.Object](labels map[string]string) func(T) {
	return WithMetadata[T](Labels, labels)
}

// WithAnnotations 封装 WithMetadata，用于 Annotations
func WithAnnotations[T metav1.Object](annotations map[string]string) func(T) {
	return WithMetadata[T](Annotations, annotations)
}




package kubeutils

import (
corev1 "k8s.io/api/core/v1"
"k8s.io/apimachinery/pkg/api/resource"
metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CreateNamespace 创建一个命名空间
func CreateNamespace(name string, options ...func(*corev1.Namespace)) *corev1.Namespace {
	namespace := &corev1.Namespace{
		ObjectMeta: metav1.ObjectMeta{
			Name: name,
		},
	}
	for _, option := range options {
		option(namespace)
	}
	return namespace
}

func CreateResourceQuota(name, namespace string, limits ResourceLimits, options ...func(*corev1.ResourceQuota)) *corev1.ResourceQuota {
	resourceQuota := &corev1.ResourceQuota{
		ObjectMeta: metav1.ObjectMeta{
			Name:      name,
			Namespace: namespace,
		},
		Spec: corev1.ResourceQuotaSpec{
			Hard: filterZeroValueResources(limits),
		},
	}
	for _, option := range options {
		option(resourceQuota)
	}
	return resourceQuota
}

// ResourceLimits 定义资源限制的结构体
type ResourceLimits struct {
	CPU                    string
	Memory                 string
	Pods                   string
	Services               string
	Secrets                string
	ConfigMaps             string
	ServicesNodePorts      string
	Storage                string
	PersistentVolumeClaims string
}

// filterZeroValueResources 过滤掉零值的资源限制
func filterZeroValueResources(limits ResourceLimits) corev1.ResourceList {
	resourceList := corev1.ResourceList{}

	if limits.CPU != "" {
		resourceList[corev1.ResourceCPU] = resource.MustParse(limits.CPU)
	}
	if limits.Memory != "" {
		resourceList[corev1.ResourceMemory] = resource.MustParse(limits.Memory)
	}
	if limits.Pods != "" {
		resourceList[corev1.ResourcePods] = resource.MustParse(limits.Pods)
	}
	if limits.Services != "" {
		resourceList[corev1.ResourceServices] = resource.MustParse(limits.Services)
	}
	if limits.Secrets != "" {
		resourceList[corev1.ResourceSecrets] = resource.MustParse(limits.Secrets)
	}
	if limits.ConfigMaps != "" {
		resourceList[corev1.ResourceConfigMaps] = resource.MustParse(limits.ConfigMaps)
	}
	if limits.ServicesNodePorts != "" {
		resourceList[corev1.ResourceServicesNodePorts] = resource.MustParse(limits.ServicesNodePorts)
	}
	if limits.Storage != "" {
		resourceList[corev1.ResourceStorage] = resource.MustParse(limits.Storage)
	}
	if limits.PersistentVolumeClaims != "" {
		resourceList[corev1.ResourcePersistentVolumeClaims] = resource.MustParse(limits.PersistentVolumeClaims)
	}

	return resourceList
}
