// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3

package handler

import (
	"net/http"

	auth "github.com/yanshicheng/kube-onec/application/portal/api/internal/handler/auth"
	dict "github.com/yanshicheng/kube-onec/application/portal/api/internal/handler/dict"
	dictItem "github.com/yanshicheng/kube-onec/application/portal/api/internal/handler/dictItem"
	organization "github.com/yanshicheng/kube-onec/application/portal/api/internal/handler/organization"
	permission "github.com/yanshicheng/kube-onec/application/portal/api/internal/handler/permission"
	position "github.com/yanshicheng/kube-onec/application/portal/api/internal/handler/position"
	role "github.com/yanshicheng/kube-onec/application/portal/api/internal/handler/role"
	upload "github.com/yanshicheng/kube-onec/application/portal/api/internal/handler/upload"
	user "github.com/yanshicheng/kube-onec/application/portal/api/internal/handler/user"
	"github.com/yanshicheng/kube-onec/application/portal/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: auth.LoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1/portal/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWTAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/force-logout",
					Handler: auth.ForceLogoutHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/logout",
					Handler: auth.LogoutHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/refresh-token",
					Handler: auth.RefreshTokenHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/portal/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWTAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/codes",
					Handler: auth.GetCodesHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/portal/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWTAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: dict.AddSysDictHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: dict.SearchSysDictHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/:id",
					Handler: dict.UpdateSysDictHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: dict.GetSysDictByIdHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id",
					Handler: dict.DeleteSysDictHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/portal/sys/dict"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWTAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: dictItem.AddSysDictItemHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: dictItem.SearchSysDictItemHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/:id",
					Handler: dictItem.UpdateSysDictItemHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: dictItem.GetSysDictItemByIdHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id",
					Handler: dictItem.DeleteSysDictItemHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/portal/sys/dict-item"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWTAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: organization.AddSysOrganizationHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: organization.SearchSysOrganizationHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/:id",
					Handler: organization.UpdateSysOrganizationHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id",
					Handler: organization.DelSysOrganizationHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: organization.GetSysOrganizationByIdHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/tree",
					Handler: organization.GetOrganizationTreeHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/portal/sys/organization"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWTAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: permission.AddSysPermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: permission.SearchSysPermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/:id",
					Handler: permission.UpdateSysPermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id",
					Handler: permission.DelSysPermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: permission.GetSysPermissionByIdHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/tree",
					Handler: permission.GetSysPermissionTreeHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/portal/sys/permission"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWTAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: position.AddSysPositionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: position.SearchSysPositionHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/:id",
					Handler: position.UpdateSysPositionHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id",
					Handler: position.DelSysPositionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: position.GetSysPositionByIdHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id/users",
					Handler: position.SearchSysPositionByUserHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/portal/sys/position"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWTAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: role.AddSysRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: role.SearchSysRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/:id",
					Handler: role.UpdateSysRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id",
					Handler: role.DelSysRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: role.GetSysRoleByIdHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/:roleId/permission",
					Handler: role.BindSysRolePermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:roleId/permission",
					Handler: role.SearchSysRolePermissionHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/portal/sys/role"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWTAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upload",
					Handler: upload.UploadImageHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/v1/portal/store"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWTAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: user.AddSysUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: user.SearchSysUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/:id",
					Handler: user.UpdateSysUserHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id",
					Handler: user.DelSysUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: user.GetSysUserByIdHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bind-roles",
					Handler: user.BindRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/bind-roles/:id",
					Handler: user.SearchBindUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/change-avatar/:id",
					Handler: user.ChangeAvatarHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/change-password/:id",
					Handler: user.ChangePasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/frozen/:id",
					Handler: user.FrozenAccountsHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/global/:id",
					Handler: user.GlobalUpdateSysUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/info",
					Handler: user.GetSysUserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/leave/:id",
					Handler: user.LeaveHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/reset-password/:id",
					Handler: user.ResetPasswordHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/portal/sys/user"),
	)
}
