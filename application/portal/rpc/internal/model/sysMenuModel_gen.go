// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysMenuFieldNames          = builder.RawFieldNames(&SysMenu{})
	sysMenuRows                = strings.Join(sysMenuFieldNames, ",")
	sysMenuRowsExpectAutoSet   = strings.Join(stringx.Remove(sysMenuFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysMenuRowsWithPlaceHolder = strings.Join(stringx.Remove(sysMenuFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheKubeOnecSysMenuIdPrefix = "cache:kubeOnec:sysMenu:id:"
)

type (
	sysMenuModel interface {
		Insert(ctx context.Context, data *SysMenu) (sql.Result, error)

		FindOne(ctx context.Context, id uint64) (*SysMenu, error)
		Search(ctx context.Context, orderStr string, isAsc bool, page, pageSize uint64, queryStr string, args ...any) ([]*SysMenu, uint64, error)
		SearchNoPage(ctx context.Context, orderStr string, isAsc bool, queryStr string, args ...any) ([]*SysMenu, error)
		Update(ctx context.Context, data *SysMenu) error
		Delete(ctx context.Context, id uint64) error
		DeleteSoft(ctx context.Context, id uint64) error
		TransCtx(ctx context.Context, fn func(context.Context, sqlx.Session) error) error
		TransOnSql(ctx context.Context, session sqlx.Session, id uint64, sqlStr string, args ...any) (sql.Result, error)
		ExecSql(ctx context.Context, id uint64, sqlStr string, args ...any) (sql.Result, error)
	}

	defaultSysMenuModel struct {
		sqlc.CachedConn
		table string
	}

	SysMenu struct {
		Id                       uint64         `db:"id"`                          // 主键ID
		Component                string         `db:"component"`                   // 组件名称
		Name                     string         `db:"name"`                        // 菜单名称
		Path                     string         `db:"path"`                        // 路由路径
		Redirect                 sql.NullString `db:"redirect"`                    // 重定向路径
		ParentId                 sql.NullInt64  `db:"parent_id"`                   // 父级ID
		Type                     int64          `db:"type"`                        // 类型（1. 目录，2. 菜单，3. 按钮）
		IsEnable                 int64          `db:"is_enable"`                   // 是否启用（0. 禁用，1. 启用）
		Code                     sql.NullString `db:"code"`                        // 权限码
		ActiveIcon               sql.NullString `db:"active_icon"`                 // 激活图标
		ActivePath               sql.NullString `db:"active_path"`                 // 当前激活的菜单路径
		AffixTab                 int64          `db:"affix_tab"`                   // 是否固定标签页
		AffixTabOrder            int64          `db:"affix_tab_order"`             // 固定标签页的顺序
		Badge                    sql.NullString `db:"badge"`                       // 徽标
		BadgeType                sql.NullString `db:"badge_type"`                  // 徽标类型
		BadgeVariants            sql.NullString `db:"badge_variants"`              // 徽标颜色
		HideChildrenInMenu       int64          `db:"hide_children_in_menu"`       // 当前路由的子级在菜单中不展现
		HideInBreadcrumb         int64          `db:"hide_in_breadcrumb"`          // 当前路由在面包屑中不展现
		HideInMenu               int64          `db:"hide_in_menu"`                // 当前路由在菜单中不展现
		HideInTab                int64          `db:"hide_in_tab"`                 // 当前路由在标签页不展现
		Icon                     sql.NullString `db:"icon"`                        // 图标
		IframeSrc                sql.NullString `db:"iframe_src"`                  // iframe地址
		IgnoreAccess             int64          `db:"ignore_access"`               // 忽略权限，直接可以访问
		KeepAlive                sql.NullInt64  `db:"keep_alive"`                  // 开启KeepAlive缓存
		Link                     sql.NullString `db:"link"`                        // 外链-跳转路径
		Loaded                   sql.NullInt64  `db:"loaded"`                      // 路由是否已经加载过
		MaxNumOfOpenTab          sql.NullInt64  `db:"max_num_of_open_tab"`         // 标签页最大打开数量
		MenuVisibleWithForbidden sql.NullInt64  `db:"menu_visible_with_forbidden"` // 菜单可以看到，但是访问会被重定向到403
		OpenInNewWindow          sql.NullInt64  `db:"open_in_new_window"`          // 在新窗口打开
		OrderNum                 sql.NullInt64  `db:"order_num"`                   // 用于路由->菜单排序
		Query                    sql.NullString `db:"query"`                       // 菜单所携带的参数
		Title                    string         `db:"title"`                       // 标题名称
	}
)

func newSysMenuModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSysMenuModel {
	return &defaultSysMenuModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`sys_menu`",
	}
}

func (m *defaultSysMenuModel) Delete(ctx context.Context, id uint64) error {
	kubeOnecSysMenuIdKey := fmt.Sprintf("%s%v", cacheKubeOnecSysMenuIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, kubeOnecSysMenuIdKey)
	return err
}

func (m *defaultSysMenuModel) DeleteSoft(ctx context.Context, id uint64) error {
	kubeOnecSysMenuIdKey := fmt.Sprintf("%s%v", cacheKubeOnecSysMenuIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set delete_time = NOW() where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, kubeOnecSysMenuIdKey)
	return err
}

func (m *defaultSysMenuModel) TransCtx(ctx context.Context, fn func(context.Context, sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}

func (m *defaultSysMenuModel) TransOnSql(ctx context.Context, session sqlx.Session, id uint64, sqlStr string, args ...any) (sql.Result, error) {
	query := strings.ReplaceAll(sqlStr, "{table}", m.table)
	// 如果 id != 0 并且启用了缓存逻辑
	if !isZeroValue(id) {
		// 查询数据（如果需要，确保数据存在）

		// 缓存相关处理

		kubeOnecSysMenuIdKey := fmt.Sprintf("%s%v", cacheKubeOnecSysMenuIdPrefix, id) // 处理缓存逻辑，例如删除或更新缓存
		// 执行带缓存处理的 SQL 操作
		return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (sql.Result, error) {
			return session.ExecCtx(ctx, query, args...)
		}, kubeOnecSysMenuIdKey) // 传递缓存相关的键值

	}

	// 如果 id == 0 或不需要缓存，直接执行 SQL
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (sql.Result, error) {
		return session.ExecCtx(ctx, query, args...)
	})
}

func (m *defaultSysMenuModel) ExecSql(ctx context.Context, id uint64, sqlStr string, args ...any) (sql.Result, error) {
	// 如果 id != 0 并且启用了缓存逻辑
	query := strings.ReplaceAll(sqlStr, "{table}", m.table)
	if !isZeroValue(id) {
		// 缓存相关处理

		// 查询数据（如果需要，确保数据存在）

		kubeOnecSysMenuIdKey := fmt.Sprintf("%s%v", cacheKubeOnecSysMenuIdPrefix, id) // 处理缓存逻辑，例如删除或更新缓存
		// 执行带缓存处理的 SQL 操作
		return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (sql.Result, error) {
			return conn.ExecCtx(ctx, query, args...)
		}, kubeOnecSysMenuIdKey) // 传递缓存相关的键值

	}

	// 如果 id == 0 或不需要缓存，直接执行 SQL
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (sql.Result, error) {
		return conn.ExecCtx(ctx, query, args...)
	})
}
func (m *defaultSysMenuModel) FindOne(ctx context.Context, id uint64) (*SysMenu, error) {
	kubeOnecSysMenuIdKey := fmt.Sprintf("%s%v", cacheKubeOnecSysMenuIdPrefix, id)
	var resp SysMenu
	err := m.QueryRowCtx(ctx, &resp, kubeOnecSysMenuIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? AND `delete_time` IS NULL limit 1", sysMenuRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysMenuModel) Search(ctx context.Context, orderStr string, isAsc bool, page, pageSize uint64, queryStr string, args ...any) ([]*SysMenu, uint64, error) {
	// 确保分页参数有效
	if page < 1 {
		page = 1
	}
	if pageSize < 1 {
		pageSize = 20
	}

	// 构造查询条件
	// 添加 delete_time IS NULL 条件，保证只查询未软删除数据
	// 初始化 WHERE 子句
	where := "WHERE delete_time IS NULL"
	if queryStr != "" {
		where = fmt.Sprintf("WHERE %s AND delete_time IS NULL", queryStr)
	}

	// 根据 isAsc 参数确定排序方式
	sortDirection := "ASC"
	if !isAsc {
		sortDirection = "DESC"
	}

	// 如果用户未指定排序字段，则默认使用 id
	if orderStr == "" {
		orderStr = fmt.Sprintf("ORDER BY id %s", sortDirection)
	} else {
		orderStr = strings.TrimSpace(orderStr)
		if !strings.HasPrefix(strings.ToUpper(orderStr), "ORDER BY") {
			orderStr = "ORDER BY " + orderStr
		}
		orderStr = fmt.Sprintf("%s %s", orderStr, sortDirection)
	}

	countQuery := fmt.Sprintf("SELECT COUNT(1) FROM %s %s", m.table, where)

	var total uint64
	var resp []*SysMenu
	err := m.QueryRowNoCacheCtx(ctx, &total, countQuery, args...)
	if err != nil {
		return nil, 0, err
	}
	if total == 0 {
		// 无匹配记录
		return resp, 0, ErrNotFound
	}
	offset := (page - 1) * pageSize
	dataQuery := fmt.Sprintf("SELECT %s FROM %s %s %s LIMIT %d,%d", sysMenuRows, m.table, where, orderStr, offset, pageSize)

	err = m.QueryRowsNoCacheCtx(ctx, &resp, dataQuery, args...)
	if err != nil {
		return nil, 0, err
	}

	return resp, total, nil
}

func (m *defaultSysMenuModel) SearchNoPage(ctx context.Context, orderStr string, isAsc bool, queryStr string, args ...any) ([]*SysMenu, error) {
	// 初始化 WHERE 子句
	where := "WHERE delete_time IS NULL"
	if queryStr != "" {
		where = fmt.Sprintf("WHERE %s AND delete_time IS NULL", queryStr)
	}

	// 根据 isAsc 参数确定排序方式
	sortDirection := "ASC"
	if !isAsc {
		sortDirection = "DESC"
	}
	// 如果用户未指定排序字段，则默认使用 id
	if orderStr == "" {
		orderStr = fmt.Sprintf("ORDER BY id %s", sortDirection)
	} else {
		orderStr = strings.TrimSpace(orderStr)
		if !strings.HasPrefix(strings.ToUpper(orderStr), "ORDER BY") {
			orderStr = "ORDER BY " + orderStr
		}
		orderStr = fmt.Sprintf("%s %s", orderStr, sortDirection)
	}
	dataQuery := fmt.Sprintf("SELECT %s FROM %s %s %s", sysMenuRows, m.table, where, orderStr)
	var resp []*SysMenu
	err := m.QueryRowsNoCacheCtx(ctx, &resp, dataQuery, args...)
	switch err {
	case nil:
		return resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysMenuModel) Insert(ctx context.Context, data *SysMenu) (sql.Result, error) {
	kubeOnecSysMenuIdKey := fmt.Sprintf("%s%v", cacheKubeOnecSysMenuIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysMenuRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Component, data.Name, data.Path, data.Redirect, data.ParentId, data.Type, data.IsEnable, data.Code, data.ActiveIcon, data.ActivePath, data.AffixTab, data.AffixTabOrder, data.Badge, data.BadgeType, data.BadgeVariants, data.HideChildrenInMenu, data.HideInBreadcrumb, data.HideInMenu, data.HideInTab, data.Icon, data.IframeSrc, data.IgnoreAccess, data.KeepAlive, data.Link, data.Loaded, data.MaxNumOfOpenTab, data.MenuVisibleWithForbidden, data.OpenInNewWindow, data.OrderNum, data.Query, data.Title)
	}, kubeOnecSysMenuIdKey)
	return ret, err
}

func (m *defaultSysMenuModel) Update(ctx context.Context, data *SysMenu) error {
	kubeOnecSysMenuIdKey := fmt.Sprintf("%s%v", cacheKubeOnecSysMenuIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysMenuRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Component, data.Name, data.Path, data.Redirect, data.ParentId, data.Type, data.IsEnable, data.Code, data.ActiveIcon, data.ActivePath, data.AffixTab, data.AffixTabOrder, data.Badge, data.BadgeType, data.BadgeVariants, data.HideChildrenInMenu, data.HideInBreadcrumb, data.HideInMenu, data.HideInTab, data.Icon, data.IframeSrc, data.IgnoreAccess, data.KeepAlive, data.Link, data.Loaded, data.MaxNumOfOpenTab, data.MenuVisibleWithForbidden, data.OpenInNewWindow, data.OrderNum, data.Query, data.Title, data.Id)
	}, kubeOnecSysMenuIdKey)
	return err
}

func (m *defaultSysMenuModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheKubeOnecSysMenuIdPrefix, primary)
}

func (m *defaultSysMenuModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? AND `delete_time` IS NULL limit 1", sysMenuRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysMenuModel) tableName() string {
	return m.table
}
