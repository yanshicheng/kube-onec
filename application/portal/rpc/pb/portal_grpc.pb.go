// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: portal.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SysUserService_AddSysUser_FullMethodName          = "/pb.SysUserService/AddSysUser"
	SysUserService_UpdateSysUser_FullMethodName       = "/pb.SysUserService/UpdateSysUser"
	SysUserService_DelSysUser_FullMethodName          = "/pb.SysUserService/DelSysUser"
	SysUserService_GetSysUserById_FullMethodName      = "/pb.SysUserService/GetSysUserById"
	SysUserService_SearchSysUser_FullMethodName       = "/pb.SysUserService/SearchSysUser"
	SysUserService_UpdateGlobalSysUser_FullMethodName = "/pb.SysUserService/UpdateGlobalSysUser"
	SysUserService_ResetPassword_FullMethodName       = "/pb.SysUserService/ResetPassword"
	SysUserService_FrozenAccounts_FullMethodName      = "/pb.SysUserService/FrozenAccounts"
	SysUserService_ChangePassword_FullMethodName      = "/pb.SysUserService/ChangePassword"
	SysUserService_Leave_FullMethodName               = "/pb.SysUserService/Leave"
	SysUserService_BindRole_FullMethodName            = "/pb.SysUserService/BindRole"
	SysUserService_GetRoleByUserId_FullMethodName     = "/pb.SysUserService/GetRoleByUserId"
	SysUserService_GetUserInfo_FullMethodName         = "/pb.SysUserService/GetUserInfo"
	SysUserService_UpdateIcon_FullMethodName          = "/pb.SysUserService/UpdateIcon"
)

// SysUserServiceClient is the client API for SysUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysUserServiceClient interface {
	// -----------------------账号信息表-----------------------
	AddSysUser(ctx context.Context, in *AddSysUserReq, opts ...grpc.CallOption) (*AddSysUserResp, error)
	UpdateSysUser(ctx context.Context, in *UpdateSysUserReq, opts ...grpc.CallOption) (*UpdateSysUserResp, error)
	DelSysUser(ctx context.Context, in *DelSysUserReq, opts ...grpc.CallOption) (*DelSysUserResp, error)
	GetSysUserById(ctx context.Context, in *GetSysUserByIdReq, opts ...grpc.CallOption) (*GetSysUserByIdResp, error)
	SearchSysUser(ctx context.Context, in *SearchSysUserReq, opts ...grpc.CallOption) (*SearchSysUserResp, error)
	UpdateGlobalSysUser(ctx context.Context, in *UpdateGlobalSysUserReq, opts ...grpc.CallOption) (*UpdateGlobalSysUserResp, error)
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordResp, error)
	FrozenAccounts(ctx context.Context, in *FrozenAccountsReq, opts ...grpc.CallOption) (*FrozenAccountsResp, error)
	ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error)
	Leave(ctx context.Context, in *LeaveReq, opts ...grpc.CallOption) (*LeaveResp, error)
	BindRole(ctx context.Context, in *BindRoleReq, opts ...grpc.CallOption) (*BindRoleResp, error)
	GetRoleByUserId(ctx context.Context, in *GetRoleByUserIdReq, opts ...grpc.CallOption) (*GetRoleByUserIdResp, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	UpdateIcon(ctx context.Context, in *UpdateIconReq, opts ...grpc.CallOption) (*UpdateIconResp, error)
}

type sysUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysUserServiceClient(cc grpc.ClientConnInterface) SysUserServiceClient {
	return &sysUserServiceClient{cc}
}

func (c *sysUserServiceClient) AddSysUser(ctx context.Context, in *AddSysUserReq, opts ...grpc.CallOption) (*AddSysUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSysUserResp)
	err := c.cc.Invoke(ctx, SysUserService_AddSysUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) UpdateSysUser(ctx context.Context, in *UpdateSysUserReq, opts ...grpc.CallOption) (*UpdateSysUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSysUserResp)
	err := c.cc.Invoke(ctx, SysUserService_UpdateSysUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) DelSysUser(ctx context.Context, in *DelSysUserReq, opts ...grpc.CallOption) (*DelSysUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelSysUserResp)
	err := c.cc.Invoke(ctx, SysUserService_DelSysUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) GetSysUserById(ctx context.Context, in *GetSysUserByIdReq, opts ...grpc.CallOption) (*GetSysUserByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSysUserByIdResp)
	err := c.cc.Invoke(ctx, SysUserService_GetSysUserById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) SearchSysUser(ctx context.Context, in *SearchSysUserReq, opts ...grpc.CallOption) (*SearchSysUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSysUserResp)
	err := c.cc.Invoke(ctx, SysUserService_SearchSysUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) UpdateGlobalSysUser(ctx context.Context, in *UpdateGlobalSysUserReq, opts ...grpc.CallOption) (*UpdateGlobalSysUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGlobalSysUserResp)
	err := c.cc.Invoke(ctx, SysUserService_UpdateGlobalSysUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetPasswordResp)
	err := c.cc.Invoke(ctx, SysUserService_ResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) FrozenAccounts(ctx context.Context, in *FrozenAccountsReq, opts ...grpc.CallOption) (*FrozenAccountsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FrozenAccountsResp)
	err := c.cc.Invoke(ctx, SysUserService_FrozenAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePasswordResp)
	err := c.cc.Invoke(ctx, SysUserService_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) Leave(ctx context.Context, in *LeaveReq, opts ...grpc.CallOption) (*LeaveResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveResp)
	err := c.cc.Invoke(ctx, SysUserService_Leave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) BindRole(ctx context.Context, in *BindRoleReq, opts ...grpc.CallOption) (*BindRoleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindRoleResp)
	err := c.cc.Invoke(ctx, SysUserService_BindRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) GetRoleByUserId(ctx context.Context, in *GetRoleByUserIdReq, opts ...grpc.CallOption) (*GetRoleByUserIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoleByUserIdResp)
	err := c.cc.Invoke(ctx, SysUserService_GetRoleByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoResp)
	err := c.cc.Invoke(ctx, SysUserService_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) UpdateIcon(ctx context.Context, in *UpdateIconReq, opts ...grpc.CallOption) (*UpdateIconResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateIconResp)
	err := c.cc.Invoke(ctx, SysUserService_UpdateIcon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysUserServiceServer is the server API for SysUserService service.
// All implementations must embed UnimplementedSysUserServiceServer
// for forward compatibility.
type SysUserServiceServer interface {
	// -----------------------账号信息表-----------------------
	AddSysUser(context.Context, *AddSysUserReq) (*AddSysUserResp, error)
	UpdateSysUser(context.Context, *UpdateSysUserReq) (*UpdateSysUserResp, error)
	DelSysUser(context.Context, *DelSysUserReq) (*DelSysUserResp, error)
	GetSysUserById(context.Context, *GetSysUserByIdReq) (*GetSysUserByIdResp, error)
	SearchSysUser(context.Context, *SearchSysUserReq) (*SearchSysUserResp, error)
	UpdateGlobalSysUser(context.Context, *UpdateGlobalSysUserReq) (*UpdateGlobalSysUserResp, error)
	ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordResp, error)
	FrozenAccounts(context.Context, *FrozenAccountsReq) (*FrozenAccountsResp, error)
	ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error)
	Leave(context.Context, *LeaveReq) (*LeaveResp, error)
	BindRole(context.Context, *BindRoleReq) (*BindRoleResp, error)
	GetRoleByUserId(context.Context, *GetRoleByUserIdReq) (*GetRoleByUserIdResp, error)
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	UpdateIcon(context.Context, *UpdateIconReq) (*UpdateIconResp, error)
	mustEmbedUnimplementedSysUserServiceServer()
}

// UnimplementedSysUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSysUserServiceServer struct{}

func (UnimplementedSysUserServiceServer) AddSysUser(context.Context, *AddSysUserReq) (*AddSysUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSysUser not implemented")
}
func (UnimplementedSysUserServiceServer) UpdateSysUser(context.Context, *UpdateSysUserReq) (*UpdateSysUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysUser not implemented")
}
func (UnimplementedSysUserServiceServer) DelSysUser(context.Context, *DelSysUserReq) (*DelSysUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSysUser not implemented")
}
func (UnimplementedSysUserServiceServer) GetSysUserById(context.Context, *GetSysUserByIdReq) (*GetSysUserByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysUserById not implemented")
}
func (UnimplementedSysUserServiceServer) SearchSysUser(context.Context, *SearchSysUserReq) (*SearchSysUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSysUser not implemented")
}
func (UnimplementedSysUserServiceServer) UpdateGlobalSysUser(context.Context, *UpdateGlobalSysUserReq) (*UpdateGlobalSysUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGlobalSysUser not implemented")
}
func (UnimplementedSysUserServiceServer) ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedSysUserServiceServer) FrozenAccounts(context.Context, *FrozenAccountsReq) (*FrozenAccountsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrozenAccounts not implemented")
}
func (UnimplementedSysUserServiceServer) ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedSysUserServiceServer) Leave(context.Context, *LeaveReq) (*LeaveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedSysUserServiceServer) BindRole(context.Context, *BindRoleReq) (*BindRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindRole not implemented")
}
func (UnimplementedSysUserServiceServer) GetRoleByUserId(context.Context, *GetRoleByUserIdReq) (*GetRoleByUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleByUserId not implemented")
}
func (UnimplementedSysUserServiceServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedSysUserServiceServer) UpdateIcon(context.Context, *UpdateIconReq) (*UpdateIconResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIcon not implemented")
}
func (UnimplementedSysUserServiceServer) mustEmbedUnimplementedSysUserServiceServer() {}
func (UnimplementedSysUserServiceServer) testEmbeddedByValue()                        {}

// UnsafeSysUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysUserServiceServer will
// result in compilation errors.
type UnsafeSysUserServiceServer interface {
	mustEmbedUnimplementedSysUserServiceServer()
}

func RegisterSysUserServiceServer(s grpc.ServiceRegistrar, srv SysUserServiceServer) {
	// If the following call pancis, it indicates UnimplementedSysUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SysUserService_ServiceDesc, srv)
}

func _SysUserService_AddSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSysUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).AddSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_AddSysUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).AddSysUser(ctx, req.(*AddSysUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_UpdateSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSysUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).UpdateSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_UpdateSysUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).UpdateSysUser(ctx, req.(*UpdateSysUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_DelSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSysUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).DelSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_DelSysUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).DelSysUser(ctx, req.(*DelSysUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_GetSysUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysUserByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).GetSysUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_GetSysUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).GetSysUserById(ctx, req.(*GetSysUserByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_SearchSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSysUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).SearchSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_SearchSysUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).SearchSysUser(ctx, req.(*SearchSysUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_UpdateGlobalSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGlobalSysUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).UpdateGlobalSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_UpdateGlobalSysUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).UpdateGlobalSysUser(ctx, req.(*UpdateGlobalSysUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).ResetPassword(ctx, req.(*ResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_FrozenAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrozenAccountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).FrozenAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_FrozenAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).FrozenAccounts(ctx, req.(*FrozenAccountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).ChangePassword(ctx, req.(*ChangePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_Leave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).Leave(ctx, req.(*LeaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_BindRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).BindRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_BindRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).BindRole(ctx, req.(*BindRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_GetRoleByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).GetRoleByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_GetRoleByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).GetRoleByUserId(ctx, req.(*GetRoleByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_UpdateIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIconReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).UpdateIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_UpdateIcon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).UpdateIcon(ctx, req.(*UpdateIconReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysUserService_ServiceDesc is the grpc.ServiceDesc for SysUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SysUserService",
	HandlerType: (*SysUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSysUser",
			Handler:    _SysUserService_AddSysUser_Handler,
		},
		{
			MethodName: "UpdateSysUser",
			Handler:    _SysUserService_UpdateSysUser_Handler,
		},
		{
			MethodName: "DelSysUser",
			Handler:    _SysUserService_DelSysUser_Handler,
		},
		{
			MethodName: "GetSysUserById",
			Handler:    _SysUserService_GetSysUserById_Handler,
		},
		{
			MethodName: "SearchSysUser",
			Handler:    _SysUserService_SearchSysUser_Handler,
		},
		{
			MethodName: "UpdateGlobalSysUser",
			Handler:    _SysUserService_UpdateGlobalSysUser_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _SysUserService_ResetPassword_Handler,
		},
		{
			MethodName: "FrozenAccounts",
			Handler:    _SysUserService_FrozenAccounts_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _SysUserService_ChangePassword_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _SysUserService_Leave_Handler,
		},
		{
			MethodName: "BindRole",
			Handler:    _SysUserService_BindRole_Handler,
		},
		{
			MethodName: "GetRoleByUserId",
			Handler:    _SysUserService_GetRoleByUserId_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _SysUserService_GetUserInfo_Handler,
		},
		{
			MethodName: "UpdateIcon",
			Handler:    _SysUserService_UpdateIcon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portal.proto",
}

const (
	SysMenuService_AddSysMenu_FullMethodName     = "/pb.SysMenuService/AddSysMenu"
	SysMenuService_UpdateSysMenu_FullMethodName  = "/pb.SysMenuService/UpdateSysMenu"
	SysMenuService_DelSysMenu_FullMethodName     = "/pb.SysMenuService/DelSysMenu"
	SysMenuService_GetSysMenuById_FullMethodName = "/pb.SysMenuService/GetSysMenuById"
	SysMenuService_SearchSysMenu_FullMethodName  = "/pb.SysMenuService/SearchSysMenu"
	SysMenuService_GetMenuTree_FullMethodName    = "/pb.SysMenuService/GetMenuTree"
)

// SysMenuServiceClient is the client API for SysMenuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysMenuServiceClient interface {
	// -----------------------菜单表-----------------------
	AddSysMenu(ctx context.Context, in *AddSysMenuReq, opts ...grpc.CallOption) (*AddSysMenuResp, error)
	UpdateSysMenu(ctx context.Context, in *UpdateSysMenuReq, opts ...grpc.CallOption) (*UpdateSysMenuResp, error)
	DelSysMenu(ctx context.Context, in *DelSysMenuReq, opts ...grpc.CallOption) (*DelSysMenuResp, error)
	GetSysMenuById(ctx context.Context, in *GetSysMenuByIdReq, opts ...grpc.CallOption) (*GetSysMenuByIdResp, error)
	SearchSysMenu(ctx context.Context, in *SearchSysMenuReq, opts ...grpc.CallOption) (*SearchSysMenuResp, error)
	// 新增接口：获取菜单树
	GetMenuTree(ctx context.Context, in *GetMenuTreeReq, opts ...grpc.CallOption) (*GetMenuTreeResp, error)
}

type sysMenuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysMenuServiceClient(cc grpc.ClientConnInterface) SysMenuServiceClient {
	return &sysMenuServiceClient{cc}
}

func (c *sysMenuServiceClient) AddSysMenu(ctx context.Context, in *AddSysMenuReq, opts ...grpc.CallOption) (*AddSysMenuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSysMenuResp)
	err := c.cc.Invoke(ctx, SysMenuService_AddSysMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysMenuServiceClient) UpdateSysMenu(ctx context.Context, in *UpdateSysMenuReq, opts ...grpc.CallOption) (*UpdateSysMenuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSysMenuResp)
	err := c.cc.Invoke(ctx, SysMenuService_UpdateSysMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysMenuServiceClient) DelSysMenu(ctx context.Context, in *DelSysMenuReq, opts ...grpc.CallOption) (*DelSysMenuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelSysMenuResp)
	err := c.cc.Invoke(ctx, SysMenuService_DelSysMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysMenuServiceClient) GetSysMenuById(ctx context.Context, in *GetSysMenuByIdReq, opts ...grpc.CallOption) (*GetSysMenuByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSysMenuByIdResp)
	err := c.cc.Invoke(ctx, SysMenuService_GetSysMenuById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysMenuServiceClient) SearchSysMenu(ctx context.Context, in *SearchSysMenuReq, opts ...grpc.CallOption) (*SearchSysMenuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSysMenuResp)
	err := c.cc.Invoke(ctx, SysMenuService_SearchSysMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysMenuServiceClient) GetMenuTree(ctx context.Context, in *GetMenuTreeReq, opts ...grpc.CallOption) (*GetMenuTreeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMenuTreeResp)
	err := c.cc.Invoke(ctx, SysMenuService_GetMenuTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysMenuServiceServer is the server API for SysMenuService service.
// All implementations must embed UnimplementedSysMenuServiceServer
// for forward compatibility.
type SysMenuServiceServer interface {
	// -----------------------菜单表-----------------------
	AddSysMenu(context.Context, *AddSysMenuReq) (*AddSysMenuResp, error)
	UpdateSysMenu(context.Context, *UpdateSysMenuReq) (*UpdateSysMenuResp, error)
	DelSysMenu(context.Context, *DelSysMenuReq) (*DelSysMenuResp, error)
	GetSysMenuById(context.Context, *GetSysMenuByIdReq) (*GetSysMenuByIdResp, error)
	SearchSysMenu(context.Context, *SearchSysMenuReq) (*SearchSysMenuResp, error)
	// 新增接口：获取菜单树
	GetMenuTree(context.Context, *GetMenuTreeReq) (*GetMenuTreeResp, error)
	mustEmbedUnimplementedSysMenuServiceServer()
}

// UnimplementedSysMenuServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSysMenuServiceServer struct{}

func (UnimplementedSysMenuServiceServer) AddSysMenu(context.Context, *AddSysMenuReq) (*AddSysMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSysMenu not implemented")
}
func (UnimplementedSysMenuServiceServer) UpdateSysMenu(context.Context, *UpdateSysMenuReq) (*UpdateSysMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysMenu not implemented")
}
func (UnimplementedSysMenuServiceServer) DelSysMenu(context.Context, *DelSysMenuReq) (*DelSysMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSysMenu not implemented")
}
func (UnimplementedSysMenuServiceServer) GetSysMenuById(context.Context, *GetSysMenuByIdReq) (*GetSysMenuByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysMenuById not implemented")
}
func (UnimplementedSysMenuServiceServer) SearchSysMenu(context.Context, *SearchSysMenuReq) (*SearchSysMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSysMenu not implemented")
}
func (UnimplementedSysMenuServiceServer) GetMenuTree(context.Context, *GetMenuTreeReq) (*GetMenuTreeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuTree not implemented")
}
func (UnimplementedSysMenuServiceServer) mustEmbedUnimplementedSysMenuServiceServer() {}
func (UnimplementedSysMenuServiceServer) testEmbeddedByValue()                        {}

// UnsafeSysMenuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysMenuServiceServer will
// result in compilation errors.
type UnsafeSysMenuServiceServer interface {
	mustEmbedUnimplementedSysMenuServiceServer()
}

func RegisterSysMenuServiceServer(s grpc.ServiceRegistrar, srv SysMenuServiceServer) {
	// If the following call pancis, it indicates UnimplementedSysMenuServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SysMenuService_ServiceDesc, srv)
}

func _SysMenuService_AddSysMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSysMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysMenuServiceServer).AddSysMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysMenuService_AddSysMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysMenuServiceServer).AddSysMenu(ctx, req.(*AddSysMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysMenuService_UpdateSysMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSysMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysMenuServiceServer).UpdateSysMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysMenuService_UpdateSysMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysMenuServiceServer).UpdateSysMenu(ctx, req.(*UpdateSysMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysMenuService_DelSysMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSysMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysMenuServiceServer).DelSysMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysMenuService_DelSysMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysMenuServiceServer).DelSysMenu(ctx, req.(*DelSysMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysMenuService_GetSysMenuById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysMenuByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysMenuServiceServer).GetSysMenuById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysMenuService_GetSysMenuById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysMenuServiceServer).GetSysMenuById(ctx, req.(*GetSysMenuByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysMenuService_SearchSysMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSysMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysMenuServiceServer).SearchSysMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysMenuService_SearchSysMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysMenuServiceServer).SearchSysMenu(ctx, req.(*SearchSysMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysMenuService_GetMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysMenuServiceServer).GetMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysMenuService_GetMenuTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysMenuServiceServer).GetMenuTree(ctx, req.(*GetMenuTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysMenuService_ServiceDesc is the grpc.ServiceDesc for SysMenuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysMenuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SysMenuService",
	HandlerType: (*SysMenuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSysMenu",
			Handler:    _SysMenuService_AddSysMenu_Handler,
		},
		{
			MethodName: "UpdateSysMenu",
			Handler:    _SysMenuService_UpdateSysMenu_Handler,
		},
		{
			MethodName: "DelSysMenu",
			Handler:    _SysMenuService_DelSysMenu_Handler,
		},
		{
			MethodName: "GetSysMenuById",
			Handler:    _SysMenuService_GetSysMenuById_Handler,
		},
		{
			MethodName: "SearchSysMenu",
			Handler:    _SysMenuService_SearchSysMenu_Handler,
		},
		{
			MethodName: "GetMenuTree",
			Handler:    _SysMenuService_GetMenuTree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portal.proto",
}

const (
	SysOrganizationService_AddSysOrganization_FullMethodName     = "/pb.SysOrganizationService/AddSysOrganization"
	SysOrganizationService_UpdateSysOrganization_FullMethodName  = "/pb.SysOrganizationService/UpdateSysOrganization"
	SysOrganizationService_DelSysOrganization_FullMethodName     = "/pb.SysOrganizationService/DelSysOrganization"
	SysOrganizationService_GetSysOrganizationById_FullMethodName = "/pb.SysOrganizationService/GetSysOrganizationById"
	SysOrganizationService_SearchSysOrganization_FullMethodName  = "/pb.SysOrganizationService/SearchSysOrganization"
)

// SysOrganizationServiceClient is the client API for SysOrganizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysOrganizationServiceClient interface {
	// -----------------------组织表-----------------------
	AddSysOrganization(ctx context.Context, in *AddSysOrganizationReq, opts ...grpc.CallOption) (*AddSysOrganizationResp, error)
	UpdateSysOrganization(ctx context.Context, in *UpdateSysOrganizationReq, opts ...grpc.CallOption) (*UpdateSysOrganizationResp, error)
	DelSysOrganization(ctx context.Context, in *DelSysOrganizationReq, opts ...grpc.CallOption) (*DelSysOrganizationResp, error)
	GetSysOrganizationById(ctx context.Context, in *GetSysOrganizationByIdReq, opts ...grpc.CallOption) (*GetSysOrganizationByIdResp, error)
	SearchSysOrganization(ctx context.Context, in *SearchSysOrganizationReq, opts ...grpc.CallOption) (*SearchSysOrganizationResp, error)
}

type sysOrganizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysOrganizationServiceClient(cc grpc.ClientConnInterface) SysOrganizationServiceClient {
	return &sysOrganizationServiceClient{cc}
}

func (c *sysOrganizationServiceClient) AddSysOrganization(ctx context.Context, in *AddSysOrganizationReq, opts ...grpc.CallOption) (*AddSysOrganizationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSysOrganizationResp)
	err := c.cc.Invoke(ctx, SysOrganizationService_AddSysOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysOrganizationServiceClient) UpdateSysOrganization(ctx context.Context, in *UpdateSysOrganizationReq, opts ...grpc.CallOption) (*UpdateSysOrganizationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSysOrganizationResp)
	err := c.cc.Invoke(ctx, SysOrganizationService_UpdateSysOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysOrganizationServiceClient) DelSysOrganization(ctx context.Context, in *DelSysOrganizationReq, opts ...grpc.CallOption) (*DelSysOrganizationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelSysOrganizationResp)
	err := c.cc.Invoke(ctx, SysOrganizationService_DelSysOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysOrganizationServiceClient) GetSysOrganizationById(ctx context.Context, in *GetSysOrganizationByIdReq, opts ...grpc.CallOption) (*GetSysOrganizationByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSysOrganizationByIdResp)
	err := c.cc.Invoke(ctx, SysOrganizationService_GetSysOrganizationById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysOrganizationServiceClient) SearchSysOrganization(ctx context.Context, in *SearchSysOrganizationReq, opts ...grpc.CallOption) (*SearchSysOrganizationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSysOrganizationResp)
	err := c.cc.Invoke(ctx, SysOrganizationService_SearchSysOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysOrganizationServiceServer is the server API for SysOrganizationService service.
// All implementations must embed UnimplementedSysOrganizationServiceServer
// for forward compatibility.
type SysOrganizationServiceServer interface {
	// -----------------------组织表-----------------------
	AddSysOrganization(context.Context, *AddSysOrganizationReq) (*AddSysOrganizationResp, error)
	UpdateSysOrganization(context.Context, *UpdateSysOrganizationReq) (*UpdateSysOrganizationResp, error)
	DelSysOrganization(context.Context, *DelSysOrganizationReq) (*DelSysOrganizationResp, error)
	GetSysOrganizationById(context.Context, *GetSysOrganizationByIdReq) (*GetSysOrganizationByIdResp, error)
	SearchSysOrganization(context.Context, *SearchSysOrganizationReq) (*SearchSysOrganizationResp, error)
	mustEmbedUnimplementedSysOrganizationServiceServer()
}

// UnimplementedSysOrganizationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSysOrganizationServiceServer struct{}

func (UnimplementedSysOrganizationServiceServer) AddSysOrganization(context.Context, *AddSysOrganizationReq) (*AddSysOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSysOrganization not implemented")
}
func (UnimplementedSysOrganizationServiceServer) UpdateSysOrganization(context.Context, *UpdateSysOrganizationReq) (*UpdateSysOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysOrganization not implemented")
}
func (UnimplementedSysOrganizationServiceServer) DelSysOrganization(context.Context, *DelSysOrganizationReq) (*DelSysOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSysOrganization not implemented")
}
func (UnimplementedSysOrganizationServiceServer) GetSysOrganizationById(context.Context, *GetSysOrganizationByIdReq) (*GetSysOrganizationByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysOrganizationById not implemented")
}
func (UnimplementedSysOrganizationServiceServer) SearchSysOrganization(context.Context, *SearchSysOrganizationReq) (*SearchSysOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSysOrganization not implemented")
}
func (UnimplementedSysOrganizationServiceServer) mustEmbedUnimplementedSysOrganizationServiceServer() {
}
func (UnimplementedSysOrganizationServiceServer) testEmbeddedByValue() {}

// UnsafeSysOrganizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysOrganizationServiceServer will
// result in compilation errors.
type UnsafeSysOrganizationServiceServer interface {
	mustEmbedUnimplementedSysOrganizationServiceServer()
}

func RegisterSysOrganizationServiceServer(s grpc.ServiceRegistrar, srv SysOrganizationServiceServer) {
	// If the following call pancis, it indicates UnimplementedSysOrganizationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SysOrganizationService_ServiceDesc, srv)
}

func _SysOrganizationService_AddSysOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSysOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysOrganizationServiceServer).AddSysOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysOrganizationService_AddSysOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysOrganizationServiceServer).AddSysOrganization(ctx, req.(*AddSysOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysOrganizationService_UpdateSysOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSysOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysOrganizationServiceServer).UpdateSysOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysOrganizationService_UpdateSysOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysOrganizationServiceServer).UpdateSysOrganization(ctx, req.(*UpdateSysOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysOrganizationService_DelSysOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSysOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysOrganizationServiceServer).DelSysOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysOrganizationService_DelSysOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysOrganizationServiceServer).DelSysOrganization(ctx, req.(*DelSysOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysOrganizationService_GetSysOrganizationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysOrganizationByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysOrganizationServiceServer).GetSysOrganizationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysOrganizationService_GetSysOrganizationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysOrganizationServiceServer).GetSysOrganizationById(ctx, req.(*GetSysOrganizationByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysOrganizationService_SearchSysOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSysOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysOrganizationServiceServer).SearchSysOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysOrganizationService_SearchSysOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysOrganizationServiceServer).SearchSysOrganization(ctx, req.(*SearchSysOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysOrganizationService_ServiceDesc is the grpc.ServiceDesc for SysOrganizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysOrganizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SysOrganizationService",
	HandlerType: (*SysOrganizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSysOrganization",
			Handler:    _SysOrganizationService_AddSysOrganization_Handler,
		},
		{
			MethodName: "UpdateSysOrganization",
			Handler:    _SysOrganizationService_UpdateSysOrganization_Handler,
		},
		{
			MethodName: "DelSysOrganization",
			Handler:    _SysOrganizationService_DelSysOrganization_Handler,
		},
		{
			MethodName: "GetSysOrganizationById",
			Handler:    _SysOrganizationService_GetSysOrganizationById_Handler,
		},
		{
			MethodName: "SearchSysOrganization",
			Handler:    _SysOrganizationService_SearchSysOrganization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portal.proto",
}

const (
	SysPermissionService_AddSysPermission_FullMethodName     = "/pb.SysPermissionService/AddSysPermission"
	SysPermissionService_UpdateSysPermission_FullMethodName  = "/pb.SysPermissionService/UpdateSysPermission"
	SysPermissionService_DelSysPermission_FullMethodName     = "/pb.SysPermissionService/DelSysPermission"
	SysPermissionService_GetSysPermissionById_FullMethodName = "/pb.SysPermissionService/GetSysPermissionById"
	SysPermissionService_SearchSysPermission_FullMethodName  = "/pb.SysPermissionService/SearchSysPermission"
	SysPermissionService_GetSysPermissionTree_FullMethodName = "/pb.SysPermissionService/GetSysPermissionTree"
)

// SysPermissionServiceClient is the client API for SysPermissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysPermissionServiceClient interface {
	// -----------------------权限表-----------------------
	AddSysPermission(ctx context.Context, in *AddSysPermissionReq, opts ...grpc.CallOption) (*AddSysPermissionResp, error)
	UpdateSysPermission(ctx context.Context, in *UpdateSysPermissionReq, opts ...grpc.CallOption) (*UpdateSysPermissionResp, error)
	DelSysPermission(ctx context.Context, in *DelSysPermissionReq, opts ...grpc.CallOption) (*DelSysPermissionResp, error)
	GetSysPermissionById(ctx context.Context, in *GetSysPermissionByIdReq, opts ...grpc.CallOption) (*GetSysPermissionByIdResp, error)
	SearchSysPermission(ctx context.Context, in *SearchSysPermissionReq, opts ...grpc.CallOption) (*SearchSysPermissionResp, error)
	GetSysPermissionTree(ctx context.Context, in *GetSysPermissionTreeReq, opts ...grpc.CallOption) (*GetSysPermissionTreeResp, error)
}

type sysPermissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysPermissionServiceClient(cc grpc.ClientConnInterface) SysPermissionServiceClient {
	return &sysPermissionServiceClient{cc}
}

func (c *sysPermissionServiceClient) AddSysPermission(ctx context.Context, in *AddSysPermissionReq, opts ...grpc.CallOption) (*AddSysPermissionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSysPermissionResp)
	err := c.cc.Invoke(ctx, SysPermissionService_AddSysPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPermissionServiceClient) UpdateSysPermission(ctx context.Context, in *UpdateSysPermissionReq, opts ...grpc.CallOption) (*UpdateSysPermissionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSysPermissionResp)
	err := c.cc.Invoke(ctx, SysPermissionService_UpdateSysPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPermissionServiceClient) DelSysPermission(ctx context.Context, in *DelSysPermissionReq, opts ...grpc.CallOption) (*DelSysPermissionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelSysPermissionResp)
	err := c.cc.Invoke(ctx, SysPermissionService_DelSysPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPermissionServiceClient) GetSysPermissionById(ctx context.Context, in *GetSysPermissionByIdReq, opts ...grpc.CallOption) (*GetSysPermissionByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSysPermissionByIdResp)
	err := c.cc.Invoke(ctx, SysPermissionService_GetSysPermissionById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPermissionServiceClient) SearchSysPermission(ctx context.Context, in *SearchSysPermissionReq, opts ...grpc.CallOption) (*SearchSysPermissionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSysPermissionResp)
	err := c.cc.Invoke(ctx, SysPermissionService_SearchSysPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPermissionServiceClient) GetSysPermissionTree(ctx context.Context, in *GetSysPermissionTreeReq, opts ...grpc.CallOption) (*GetSysPermissionTreeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSysPermissionTreeResp)
	err := c.cc.Invoke(ctx, SysPermissionService_GetSysPermissionTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysPermissionServiceServer is the server API for SysPermissionService service.
// All implementations must embed UnimplementedSysPermissionServiceServer
// for forward compatibility.
type SysPermissionServiceServer interface {
	// -----------------------权限表-----------------------
	AddSysPermission(context.Context, *AddSysPermissionReq) (*AddSysPermissionResp, error)
	UpdateSysPermission(context.Context, *UpdateSysPermissionReq) (*UpdateSysPermissionResp, error)
	DelSysPermission(context.Context, *DelSysPermissionReq) (*DelSysPermissionResp, error)
	GetSysPermissionById(context.Context, *GetSysPermissionByIdReq) (*GetSysPermissionByIdResp, error)
	SearchSysPermission(context.Context, *SearchSysPermissionReq) (*SearchSysPermissionResp, error)
	GetSysPermissionTree(context.Context, *GetSysPermissionTreeReq) (*GetSysPermissionTreeResp, error)
	mustEmbedUnimplementedSysPermissionServiceServer()
}

// UnimplementedSysPermissionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSysPermissionServiceServer struct{}

func (UnimplementedSysPermissionServiceServer) AddSysPermission(context.Context, *AddSysPermissionReq) (*AddSysPermissionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSysPermission not implemented")
}
func (UnimplementedSysPermissionServiceServer) UpdateSysPermission(context.Context, *UpdateSysPermissionReq) (*UpdateSysPermissionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysPermission not implemented")
}
func (UnimplementedSysPermissionServiceServer) DelSysPermission(context.Context, *DelSysPermissionReq) (*DelSysPermissionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSysPermission not implemented")
}
func (UnimplementedSysPermissionServiceServer) GetSysPermissionById(context.Context, *GetSysPermissionByIdReq) (*GetSysPermissionByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysPermissionById not implemented")
}
func (UnimplementedSysPermissionServiceServer) SearchSysPermission(context.Context, *SearchSysPermissionReq) (*SearchSysPermissionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSysPermission not implemented")
}
func (UnimplementedSysPermissionServiceServer) GetSysPermissionTree(context.Context, *GetSysPermissionTreeReq) (*GetSysPermissionTreeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysPermissionTree not implemented")
}
func (UnimplementedSysPermissionServiceServer) mustEmbedUnimplementedSysPermissionServiceServer() {}
func (UnimplementedSysPermissionServiceServer) testEmbeddedByValue()                              {}

// UnsafeSysPermissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysPermissionServiceServer will
// result in compilation errors.
type UnsafeSysPermissionServiceServer interface {
	mustEmbedUnimplementedSysPermissionServiceServer()
}

func RegisterSysPermissionServiceServer(s grpc.ServiceRegistrar, srv SysPermissionServiceServer) {
	// If the following call pancis, it indicates UnimplementedSysPermissionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SysPermissionService_ServiceDesc, srv)
}

func _SysPermissionService_AddSysPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSysPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPermissionServiceServer).AddSysPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPermissionService_AddSysPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPermissionServiceServer).AddSysPermission(ctx, req.(*AddSysPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPermissionService_UpdateSysPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSysPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPermissionServiceServer).UpdateSysPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPermissionService_UpdateSysPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPermissionServiceServer).UpdateSysPermission(ctx, req.(*UpdateSysPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPermissionService_DelSysPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSysPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPermissionServiceServer).DelSysPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPermissionService_DelSysPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPermissionServiceServer).DelSysPermission(ctx, req.(*DelSysPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPermissionService_GetSysPermissionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysPermissionByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPermissionServiceServer).GetSysPermissionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPermissionService_GetSysPermissionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPermissionServiceServer).GetSysPermissionById(ctx, req.(*GetSysPermissionByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPermissionService_SearchSysPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSysPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPermissionServiceServer).SearchSysPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPermissionService_SearchSysPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPermissionServiceServer).SearchSysPermission(ctx, req.(*SearchSysPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPermissionService_GetSysPermissionTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysPermissionTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPermissionServiceServer).GetSysPermissionTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPermissionService_GetSysPermissionTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPermissionServiceServer).GetSysPermissionTree(ctx, req.(*GetSysPermissionTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysPermissionService_ServiceDesc is the grpc.ServiceDesc for SysPermissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysPermissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SysPermissionService",
	HandlerType: (*SysPermissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSysPermission",
			Handler:    _SysPermissionService_AddSysPermission_Handler,
		},
		{
			MethodName: "UpdateSysPermission",
			Handler:    _SysPermissionService_UpdateSysPermission_Handler,
		},
		{
			MethodName: "DelSysPermission",
			Handler:    _SysPermissionService_DelSysPermission_Handler,
		},
		{
			MethodName: "GetSysPermissionById",
			Handler:    _SysPermissionService_GetSysPermissionById_Handler,
		},
		{
			MethodName: "SearchSysPermission",
			Handler:    _SysPermissionService_SearchSysPermission_Handler,
		},
		{
			MethodName: "GetSysPermissionTree",
			Handler:    _SysPermissionService_GetSysPermissionTree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portal.proto",
}

const (
	SysPositionService_AddSysPosition_FullMethodName          = "/pb.SysPositionService/AddSysPosition"
	SysPositionService_UpdateSysPosition_FullMethodName       = "/pb.SysPositionService/UpdateSysPosition"
	SysPositionService_DelSysPosition_FullMethodName          = "/pb.SysPositionService/DelSysPosition"
	SysPositionService_GetSysPositionById_FullMethodName      = "/pb.SysPositionService/GetSysPositionById"
	SysPositionService_SearchSysPosition_FullMethodName       = "/pb.SysPositionService/SearchSysPosition"
	SysPositionService_SearchSysPositionByUser_FullMethodName = "/pb.SysPositionService/SearchSysPositionByUser"
)

// SysPositionServiceClient is the client API for SysPositionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysPositionServiceClient interface {
	// -----------------------职位表-----------------------
	AddSysPosition(ctx context.Context, in *AddSysPositionReq, opts ...grpc.CallOption) (*AddSysPositionResp, error)
	UpdateSysPosition(ctx context.Context, in *UpdateSysPositionReq, opts ...grpc.CallOption) (*UpdateSysPositionResp, error)
	DelSysPosition(ctx context.Context, in *DelSysPositionReq, opts ...grpc.CallOption) (*DelSysPositionResp, error)
	GetSysPositionById(ctx context.Context, in *GetSysPositionByIdReq, opts ...grpc.CallOption) (*GetSysPositionByIdResp, error)
	SearchSysPosition(ctx context.Context, in *SearchSysPositionReq, opts ...grpc.CallOption) (*SearchSysPositionResp, error)
	SearchSysPositionByUser(ctx context.Context, in *SearchSysPositionByUserReq, opts ...grpc.CallOption) (*SearchSysPositionByUserResp, error)
}

type sysPositionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysPositionServiceClient(cc grpc.ClientConnInterface) SysPositionServiceClient {
	return &sysPositionServiceClient{cc}
}

func (c *sysPositionServiceClient) AddSysPosition(ctx context.Context, in *AddSysPositionReq, opts ...grpc.CallOption) (*AddSysPositionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSysPositionResp)
	err := c.cc.Invoke(ctx, SysPositionService_AddSysPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPositionServiceClient) UpdateSysPosition(ctx context.Context, in *UpdateSysPositionReq, opts ...grpc.CallOption) (*UpdateSysPositionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSysPositionResp)
	err := c.cc.Invoke(ctx, SysPositionService_UpdateSysPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPositionServiceClient) DelSysPosition(ctx context.Context, in *DelSysPositionReq, opts ...grpc.CallOption) (*DelSysPositionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelSysPositionResp)
	err := c.cc.Invoke(ctx, SysPositionService_DelSysPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPositionServiceClient) GetSysPositionById(ctx context.Context, in *GetSysPositionByIdReq, opts ...grpc.CallOption) (*GetSysPositionByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSysPositionByIdResp)
	err := c.cc.Invoke(ctx, SysPositionService_GetSysPositionById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPositionServiceClient) SearchSysPosition(ctx context.Context, in *SearchSysPositionReq, opts ...grpc.CallOption) (*SearchSysPositionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSysPositionResp)
	err := c.cc.Invoke(ctx, SysPositionService_SearchSysPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPositionServiceClient) SearchSysPositionByUser(ctx context.Context, in *SearchSysPositionByUserReq, opts ...grpc.CallOption) (*SearchSysPositionByUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSysPositionByUserResp)
	err := c.cc.Invoke(ctx, SysPositionService_SearchSysPositionByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysPositionServiceServer is the server API for SysPositionService service.
// All implementations must embed UnimplementedSysPositionServiceServer
// for forward compatibility.
type SysPositionServiceServer interface {
	// -----------------------职位表-----------------------
	AddSysPosition(context.Context, *AddSysPositionReq) (*AddSysPositionResp, error)
	UpdateSysPosition(context.Context, *UpdateSysPositionReq) (*UpdateSysPositionResp, error)
	DelSysPosition(context.Context, *DelSysPositionReq) (*DelSysPositionResp, error)
	GetSysPositionById(context.Context, *GetSysPositionByIdReq) (*GetSysPositionByIdResp, error)
	SearchSysPosition(context.Context, *SearchSysPositionReq) (*SearchSysPositionResp, error)
	SearchSysPositionByUser(context.Context, *SearchSysPositionByUserReq) (*SearchSysPositionByUserResp, error)
	mustEmbedUnimplementedSysPositionServiceServer()
}

// UnimplementedSysPositionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSysPositionServiceServer struct{}

func (UnimplementedSysPositionServiceServer) AddSysPosition(context.Context, *AddSysPositionReq) (*AddSysPositionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSysPosition not implemented")
}
func (UnimplementedSysPositionServiceServer) UpdateSysPosition(context.Context, *UpdateSysPositionReq) (*UpdateSysPositionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysPosition not implemented")
}
func (UnimplementedSysPositionServiceServer) DelSysPosition(context.Context, *DelSysPositionReq) (*DelSysPositionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSysPosition not implemented")
}
func (UnimplementedSysPositionServiceServer) GetSysPositionById(context.Context, *GetSysPositionByIdReq) (*GetSysPositionByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysPositionById not implemented")
}
func (UnimplementedSysPositionServiceServer) SearchSysPosition(context.Context, *SearchSysPositionReq) (*SearchSysPositionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSysPosition not implemented")
}
func (UnimplementedSysPositionServiceServer) SearchSysPositionByUser(context.Context, *SearchSysPositionByUserReq) (*SearchSysPositionByUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSysPositionByUser not implemented")
}
func (UnimplementedSysPositionServiceServer) mustEmbedUnimplementedSysPositionServiceServer() {}
func (UnimplementedSysPositionServiceServer) testEmbeddedByValue()                            {}

// UnsafeSysPositionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysPositionServiceServer will
// result in compilation errors.
type UnsafeSysPositionServiceServer interface {
	mustEmbedUnimplementedSysPositionServiceServer()
}

func RegisterSysPositionServiceServer(s grpc.ServiceRegistrar, srv SysPositionServiceServer) {
	// If the following call pancis, it indicates UnimplementedSysPositionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SysPositionService_ServiceDesc, srv)
}

func _SysPositionService_AddSysPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSysPositionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPositionServiceServer).AddSysPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPositionService_AddSysPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPositionServiceServer).AddSysPosition(ctx, req.(*AddSysPositionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPositionService_UpdateSysPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSysPositionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPositionServiceServer).UpdateSysPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPositionService_UpdateSysPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPositionServiceServer).UpdateSysPosition(ctx, req.(*UpdateSysPositionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPositionService_DelSysPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSysPositionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPositionServiceServer).DelSysPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPositionService_DelSysPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPositionServiceServer).DelSysPosition(ctx, req.(*DelSysPositionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPositionService_GetSysPositionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysPositionByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPositionServiceServer).GetSysPositionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPositionService_GetSysPositionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPositionServiceServer).GetSysPositionById(ctx, req.(*GetSysPositionByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPositionService_SearchSysPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSysPositionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPositionServiceServer).SearchSysPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPositionService_SearchSysPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPositionServiceServer).SearchSysPosition(ctx, req.(*SearchSysPositionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPositionService_SearchSysPositionByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSysPositionByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPositionServiceServer).SearchSysPositionByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPositionService_SearchSysPositionByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPositionServiceServer).SearchSysPositionByUser(ctx, req.(*SearchSysPositionByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysPositionService_ServiceDesc is the grpc.ServiceDesc for SysPositionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysPositionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SysPositionService",
	HandlerType: (*SysPositionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSysPosition",
			Handler:    _SysPositionService_AddSysPosition_Handler,
		},
		{
			MethodName: "UpdateSysPosition",
			Handler:    _SysPositionService_UpdateSysPosition_Handler,
		},
		{
			MethodName: "DelSysPosition",
			Handler:    _SysPositionService_DelSysPosition_Handler,
		},
		{
			MethodName: "GetSysPositionById",
			Handler:    _SysPositionService_GetSysPositionById_Handler,
		},
		{
			MethodName: "SearchSysPosition",
			Handler:    _SysPositionService_SearchSysPosition_Handler,
		},
		{
			MethodName: "SearchSysPositionByUser",
			Handler:    _SysPositionService_SearchSysPositionByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portal.proto",
}

const (
	SysRoleService_AddSysRole_FullMethodName              = "/pb.SysRoleService/AddSysRole"
	SysRoleService_UpdateSysRole_FullMethodName           = "/pb.SysRoleService/UpdateSysRole"
	SysRoleService_DelSysRole_FullMethodName              = "/pb.SysRoleService/DelSysRole"
	SysRoleService_GetSysRoleById_FullMethodName          = "/pb.SysRoleService/GetSysRoleById"
	SysRoleService_SearchSysRole_FullMethodName           = "/pb.SysRoleService/SearchSysRole"
	SysRoleService_BindRolePermission_FullMethodName      = "/pb.SysRoleService/BindRolePermission"
	SysRoleService_SearchRolePermission_FullMethodName    = "/pb.SysRoleService/SearchRolePermission"
	SysRoleService_BindRoleMenu_FullMethodName            = "/pb.SysRoleService/BindRoleMenu"
	SysRoleService_SearchRoleMenu_FullMethodName          = "/pb.SysRoleService/SearchRoleMenu"
	SysRoleService_SearchRolePermissionIds_FullMethodName = "/pb.SysRoleService/SearchRolePermissionIds"
)

// SysRoleServiceClient is the client API for SysRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysRoleServiceClient interface {
	// -----------------------角色表-----------------------
	AddSysRole(ctx context.Context, in *AddSysRoleReq, opts ...grpc.CallOption) (*AddSysRoleResp, error)
	UpdateSysRole(ctx context.Context, in *UpdateSysRoleReq, opts ...grpc.CallOption) (*UpdateSysRoleResp, error)
	DelSysRole(ctx context.Context, in *DelSysRoleReq, opts ...grpc.CallOption) (*DelSysRoleResp, error)
	GetSysRoleById(ctx context.Context, in *GetSysRoleByIdReq, opts ...grpc.CallOption) (*GetSysRoleByIdResp, error)
	SearchSysRole(ctx context.Context, in *SearchSysRoleReq, opts ...grpc.CallOption) (*SearchSysRoleResp, error)
	BindRolePermission(ctx context.Context, in *BindRolePermissionReq, opts ...grpc.CallOption) (*BindRolePermissionResp, error)
	SearchRolePermission(ctx context.Context, in *SearchRolePermissionReq, opts ...grpc.CallOption) (*SearchRolePermissionResp, error)
	BindRoleMenu(ctx context.Context, in *BindRoleMenuReq, opts ...grpc.CallOption) (*BindRoleMenuResp, error)
	SearchRoleMenu(ctx context.Context, in *SearchRoleMenuReq, opts ...grpc.CallOption) (*SearchRoleMenuResp, error)
	SearchRolePermissionIds(ctx context.Context, in *SearchRolePermissionIdsReq, opts ...grpc.CallOption) (*SearchRolePermissionIdsResp, error)
}

type sysRoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysRoleServiceClient(cc grpc.ClientConnInterface) SysRoleServiceClient {
	return &sysRoleServiceClient{cc}
}

func (c *sysRoleServiceClient) AddSysRole(ctx context.Context, in *AddSysRoleReq, opts ...grpc.CallOption) (*AddSysRoleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSysRoleResp)
	err := c.cc.Invoke(ctx, SysRoleService_AddSysRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleServiceClient) UpdateSysRole(ctx context.Context, in *UpdateSysRoleReq, opts ...grpc.CallOption) (*UpdateSysRoleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSysRoleResp)
	err := c.cc.Invoke(ctx, SysRoleService_UpdateSysRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleServiceClient) DelSysRole(ctx context.Context, in *DelSysRoleReq, opts ...grpc.CallOption) (*DelSysRoleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelSysRoleResp)
	err := c.cc.Invoke(ctx, SysRoleService_DelSysRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleServiceClient) GetSysRoleById(ctx context.Context, in *GetSysRoleByIdReq, opts ...grpc.CallOption) (*GetSysRoleByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSysRoleByIdResp)
	err := c.cc.Invoke(ctx, SysRoleService_GetSysRoleById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleServiceClient) SearchSysRole(ctx context.Context, in *SearchSysRoleReq, opts ...grpc.CallOption) (*SearchSysRoleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSysRoleResp)
	err := c.cc.Invoke(ctx, SysRoleService_SearchSysRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleServiceClient) BindRolePermission(ctx context.Context, in *BindRolePermissionReq, opts ...grpc.CallOption) (*BindRolePermissionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindRolePermissionResp)
	err := c.cc.Invoke(ctx, SysRoleService_BindRolePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleServiceClient) SearchRolePermission(ctx context.Context, in *SearchRolePermissionReq, opts ...grpc.CallOption) (*SearchRolePermissionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchRolePermissionResp)
	err := c.cc.Invoke(ctx, SysRoleService_SearchRolePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleServiceClient) BindRoleMenu(ctx context.Context, in *BindRoleMenuReq, opts ...grpc.CallOption) (*BindRoleMenuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindRoleMenuResp)
	err := c.cc.Invoke(ctx, SysRoleService_BindRoleMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleServiceClient) SearchRoleMenu(ctx context.Context, in *SearchRoleMenuReq, opts ...grpc.CallOption) (*SearchRoleMenuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchRoleMenuResp)
	err := c.cc.Invoke(ctx, SysRoleService_SearchRoleMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleServiceClient) SearchRolePermissionIds(ctx context.Context, in *SearchRolePermissionIdsReq, opts ...grpc.CallOption) (*SearchRolePermissionIdsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchRolePermissionIdsResp)
	err := c.cc.Invoke(ctx, SysRoleService_SearchRolePermissionIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysRoleServiceServer is the server API for SysRoleService service.
// All implementations must embed UnimplementedSysRoleServiceServer
// for forward compatibility.
type SysRoleServiceServer interface {
	// -----------------------角色表-----------------------
	AddSysRole(context.Context, *AddSysRoleReq) (*AddSysRoleResp, error)
	UpdateSysRole(context.Context, *UpdateSysRoleReq) (*UpdateSysRoleResp, error)
	DelSysRole(context.Context, *DelSysRoleReq) (*DelSysRoleResp, error)
	GetSysRoleById(context.Context, *GetSysRoleByIdReq) (*GetSysRoleByIdResp, error)
	SearchSysRole(context.Context, *SearchSysRoleReq) (*SearchSysRoleResp, error)
	BindRolePermission(context.Context, *BindRolePermissionReq) (*BindRolePermissionResp, error)
	SearchRolePermission(context.Context, *SearchRolePermissionReq) (*SearchRolePermissionResp, error)
	BindRoleMenu(context.Context, *BindRoleMenuReq) (*BindRoleMenuResp, error)
	SearchRoleMenu(context.Context, *SearchRoleMenuReq) (*SearchRoleMenuResp, error)
	SearchRolePermissionIds(context.Context, *SearchRolePermissionIdsReq) (*SearchRolePermissionIdsResp, error)
	mustEmbedUnimplementedSysRoleServiceServer()
}

// UnimplementedSysRoleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSysRoleServiceServer struct{}

func (UnimplementedSysRoleServiceServer) AddSysRole(context.Context, *AddSysRoleReq) (*AddSysRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSysRole not implemented")
}
func (UnimplementedSysRoleServiceServer) UpdateSysRole(context.Context, *UpdateSysRoleReq) (*UpdateSysRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysRole not implemented")
}
func (UnimplementedSysRoleServiceServer) DelSysRole(context.Context, *DelSysRoleReq) (*DelSysRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSysRole not implemented")
}
func (UnimplementedSysRoleServiceServer) GetSysRoleById(context.Context, *GetSysRoleByIdReq) (*GetSysRoleByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysRoleById not implemented")
}
func (UnimplementedSysRoleServiceServer) SearchSysRole(context.Context, *SearchSysRoleReq) (*SearchSysRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSysRole not implemented")
}
func (UnimplementedSysRoleServiceServer) BindRolePermission(context.Context, *BindRolePermissionReq) (*BindRolePermissionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindRolePermission not implemented")
}
func (UnimplementedSysRoleServiceServer) SearchRolePermission(context.Context, *SearchRolePermissionReq) (*SearchRolePermissionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRolePermission not implemented")
}
func (UnimplementedSysRoleServiceServer) BindRoleMenu(context.Context, *BindRoleMenuReq) (*BindRoleMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindRoleMenu not implemented")
}
func (UnimplementedSysRoleServiceServer) SearchRoleMenu(context.Context, *SearchRoleMenuReq) (*SearchRoleMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRoleMenu not implemented")
}
func (UnimplementedSysRoleServiceServer) SearchRolePermissionIds(context.Context, *SearchRolePermissionIdsReq) (*SearchRolePermissionIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRolePermissionIds not implemented")
}
func (UnimplementedSysRoleServiceServer) mustEmbedUnimplementedSysRoleServiceServer() {}
func (UnimplementedSysRoleServiceServer) testEmbeddedByValue()                        {}

// UnsafeSysRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysRoleServiceServer will
// result in compilation errors.
type UnsafeSysRoleServiceServer interface {
	mustEmbedUnimplementedSysRoleServiceServer()
}

func RegisterSysRoleServiceServer(s grpc.ServiceRegistrar, srv SysRoleServiceServer) {
	// If the following call pancis, it indicates UnimplementedSysRoleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SysRoleService_ServiceDesc, srv)
}

func _SysRoleService_AddSysRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSysRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServiceServer).AddSysRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleService_AddSysRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServiceServer).AddSysRole(ctx, req.(*AddSysRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleService_UpdateSysRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSysRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServiceServer).UpdateSysRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleService_UpdateSysRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServiceServer).UpdateSysRole(ctx, req.(*UpdateSysRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleService_DelSysRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSysRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServiceServer).DelSysRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleService_DelSysRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServiceServer).DelSysRole(ctx, req.(*DelSysRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleService_GetSysRoleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysRoleByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServiceServer).GetSysRoleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleService_GetSysRoleById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServiceServer).GetSysRoleById(ctx, req.(*GetSysRoleByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleService_SearchSysRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSysRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServiceServer).SearchSysRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleService_SearchSysRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServiceServer).SearchSysRole(ctx, req.(*SearchSysRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleService_BindRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindRolePermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServiceServer).BindRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleService_BindRolePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServiceServer).BindRolePermission(ctx, req.(*BindRolePermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleService_SearchRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRolePermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServiceServer).SearchRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleService_SearchRolePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServiceServer).SearchRolePermission(ctx, req.(*SearchRolePermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleService_BindRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindRoleMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServiceServer).BindRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleService_BindRoleMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServiceServer).BindRoleMenu(ctx, req.(*BindRoleMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleService_SearchRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRoleMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServiceServer).SearchRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleService_SearchRoleMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServiceServer).SearchRoleMenu(ctx, req.(*SearchRoleMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleService_SearchRolePermissionIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRolePermissionIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServiceServer).SearchRolePermissionIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleService_SearchRolePermissionIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServiceServer).SearchRolePermissionIds(ctx, req.(*SearchRolePermissionIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysRoleService_ServiceDesc is the grpc.ServiceDesc for SysRoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysRoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SysRoleService",
	HandlerType: (*SysRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSysRole",
			Handler:    _SysRoleService_AddSysRole_Handler,
		},
		{
			MethodName: "UpdateSysRole",
			Handler:    _SysRoleService_UpdateSysRole_Handler,
		},
		{
			MethodName: "DelSysRole",
			Handler:    _SysRoleService_DelSysRole_Handler,
		},
		{
			MethodName: "GetSysRoleById",
			Handler:    _SysRoleService_GetSysRoleById_Handler,
		},
		{
			MethodName: "SearchSysRole",
			Handler:    _SysRoleService_SearchSysRole_Handler,
		},
		{
			MethodName: "BindRolePermission",
			Handler:    _SysRoleService_BindRolePermission_Handler,
		},
		{
			MethodName: "SearchRolePermission",
			Handler:    _SysRoleService_SearchRolePermission_Handler,
		},
		{
			MethodName: "BindRoleMenu",
			Handler:    _SysRoleService_BindRoleMenu_Handler,
		},
		{
			MethodName: "SearchRoleMenu",
			Handler:    _SysRoleService_SearchRoleMenu_Handler,
		},
		{
			MethodName: "SearchRolePermissionIds",
			Handler:    _SysRoleService_SearchRolePermissionIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portal.proto",
}

const (
	SysAuthService_GetToken_FullMethodName     = "/pb.SysAuthService/GetToken"
	SysAuthService_VerifyToken_FullMethodName  = "/pb.SysAuthService/VerifyToken"
	SysAuthService_Logout_FullMethodName       = "/pb.SysAuthService/Logout"
	SysAuthService_RefreshToken_FullMethodName = "/pb.SysAuthService/RefreshToken"
)

// SysAuthServiceClient is the client API for SysAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 系统认证服务定义
type SysAuthServiceClient interface {
	// 获取令牌
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	// 验证令牌
	VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*VerifyTokenResponse, error)
	// 注销
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	// 刷新令牌
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
}

type sysAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysAuthServiceClient(cc grpc.ClientConnInterface) SysAuthServiceClient {
	return &sysAuthServiceClient{cc}
}

func (c *sysAuthServiceClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, SysAuthService_GetToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAuthServiceClient) VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*VerifyTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyTokenResponse)
	err := c.cc.Invoke(ctx, SysAuthService_VerifyToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAuthServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, SysAuthService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAuthServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, SysAuthService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysAuthServiceServer is the server API for SysAuthService service.
// All implementations must embed UnimplementedSysAuthServiceServer
// for forward compatibility.
//
// 系统认证服务定义
type SysAuthServiceServer interface {
	// 获取令牌
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	// 验证令牌
	VerifyToken(context.Context, *VerifyTokenRequest) (*VerifyTokenResponse, error)
	// 注销
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	// 刷新令牌
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	mustEmbedUnimplementedSysAuthServiceServer()
}

// UnimplementedSysAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSysAuthServiceServer struct{}

func (UnimplementedSysAuthServiceServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedSysAuthServiceServer) VerifyToken(context.Context, *VerifyTokenRequest) (*VerifyTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedSysAuthServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedSysAuthServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedSysAuthServiceServer) mustEmbedUnimplementedSysAuthServiceServer() {}
func (UnimplementedSysAuthServiceServer) testEmbeddedByValue()                        {}

// UnsafeSysAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysAuthServiceServer will
// result in compilation errors.
type UnsafeSysAuthServiceServer interface {
	mustEmbedUnimplementedSysAuthServiceServer()
}

func RegisterSysAuthServiceServer(s grpc.ServiceRegistrar, srv SysAuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedSysAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SysAuthService_ServiceDesc, srv)
}

func _SysAuthService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysAuthServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysAuthService_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysAuthServiceServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysAuthService_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysAuthServiceServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysAuthService_VerifyToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysAuthServiceServer).VerifyToken(ctx, req.(*VerifyTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysAuthService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysAuthServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysAuthService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysAuthServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysAuthService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysAuthServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysAuthService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysAuthServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SysAuthService_ServiceDesc is the grpc.ServiceDesc for SysAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SysAuthService",
	HandlerType: (*SysAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _SysAuthService_GetToken_Handler,
		},
		{
			MethodName: "VerifyToken",
			Handler:    _SysAuthService_VerifyToken_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _SysAuthService_Logout_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _SysAuthService_RefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portal.proto",
}

const (
	SysDictService_AddSysDict_FullMethodName     = "/pb.SysDictService/AddSysDict"
	SysDictService_UpdateSysDict_FullMethodName  = "/pb.SysDictService/UpdateSysDict"
	SysDictService_DelSysDict_FullMethodName     = "/pb.SysDictService/DelSysDict"
	SysDictService_GetSysDictById_FullMethodName = "/pb.SysDictService/GetSysDictById"
	SysDictService_SearchSysDict_FullMethodName  = "/pb.SysDictService/SearchSysDict"
)

// SysDictServiceClient is the client API for SysDictService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysDictServiceClient interface {
	// -----------------------字典表-----------------------
	AddSysDict(ctx context.Context, in *AddSysDictReq, opts ...grpc.CallOption) (*AddSysDictResp, error)
	UpdateSysDict(ctx context.Context, in *UpdateSysDictReq, opts ...grpc.CallOption) (*UpdateSysDictResp, error)
	DelSysDict(ctx context.Context, in *DelSysDictReq, opts ...grpc.CallOption) (*DelSysDictResp, error)
	GetSysDictById(ctx context.Context, in *GetSysDictByIdReq, opts ...grpc.CallOption) (*GetSysDictByIdResp, error)
	SearchSysDict(ctx context.Context, in *SearchSysDictReq, opts ...grpc.CallOption) (*SearchSysDictResp, error)
}

type sysDictServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysDictServiceClient(cc grpc.ClientConnInterface) SysDictServiceClient {
	return &sysDictServiceClient{cc}
}

func (c *sysDictServiceClient) AddSysDict(ctx context.Context, in *AddSysDictReq, opts ...grpc.CallOption) (*AddSysDictResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSysDictResp)
	err := c.cc.Invoke(ctx, SysDictService_AddSysDict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictServiceClient) UpdateSysDict(ctx context.Context, in *UpdateSysDictReq, opts ...grpc.CallOption) (*UpdateSysDictResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSysDictResp)
	err := c.cc.Invoke(ctx, SysDictService_UpdateSysDict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictServiceClient) DelSysDict(ctx context.Context, in *DelSysDictReq, opts ...grpc.CallOption) (*DelSysDictResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelSysDictResp)
	err := c.cc.Invoke(ctx, SysDictService_DelSysDict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictServiceClient) GetSysDictById(ctx context.Context, in *GetSysDictByIdReq, opts ...grpc.CallOption) (*GetSysDictByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSysDictByIdResp)
	err := c.cc.Invoke(ctx, SysDictService_GetSysDictById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictServiceClient) SearchSysDict(ctx context.Context, in *SearchSysDictReq, opts ...grpc.CallOption) (*SearchSysDictResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSysDictResp)
	err := c.cc.Invoke(ctx, SysDictService_SearchSysDict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysDictServiceServer is the server API for SysDictService service.
// All implementations must embed UnimplementedSysDictServiceServer
// for forward compatibility.
type SysDictServiceServer interface {
	// -----------------------字典表-----------------------
	AddSysDict(context.Context, *AddSysDictReq) (*AddSysDictResp, error)
	UpdateSysDict(context.Context, *UpdateSysDictReq) (*UpdateSysDictResp, error)
	DelSysDict(context.Context, *DelSysDictReq) (*DelSysDictResp, error)
	GetSysDictById(context.Context, *GetSysDictByIdReq) (*GetSysDictByIdResp, error)
	SearchSysDict(context.Context, *SearchSysDictReq) (*SearchSysDictResp, error)
	mustEmbedUnimplementedSysDictServiceServer()
}

// UnimplementedSysDictServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSysDictServiceServer struct{}

func (UnimplementedSysDictServiceServer) AddSysDict(context.Context, *AddSysDictReq) (*AddSysDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSysDict not implemented")
}
func (UnimplementedSysDictServiceServer) UpdateSysDict(context.Context, *UpdateSysDictReq) (*UpdateSysDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysDict not implemented")
}
func (UnimplementedSysDictServiceServer) DelSysDict(context.Context, *DelSysDictReq) (*DelSysDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSysDict not implemented")
}
func (UnimplementedSysDictServiceServer) GetSysDictById(context.Context, *GetSysDictByIdReq) (*GetSysDictByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysDictById not implemented")
}
func (UnimplementedSysDictServiceServer) SearchSysDict(context.Context, *SearchSysDictReq) (*SearchSysDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSysDict not implemented")
}
func (UnimplementedSysDictServiceServer) mustEmbedUnimplementedSysDictServiceServer() {}
func (UnimplementedSysDictServiceServer) testEmbeddedByValue()                        {}

// UnsafeSysDictServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysDictServiceServer will
// result in compilation errors.
type UnsafeSysDictServiceServer interface {
	mustEmbedUnimplementedSysDictServiceServer()
}

func RegisterSysDictServiceServer(s grpc.ServiceRegistrar, srv SysDictServiceServer) {
	// If the following call pancis, it indicates UnimplementedSysDictServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SysDictService_ServiceDesc, srv)
}

func _SysDictService_AddSysDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSysDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictServiceServer).AddSysDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictService_AddSysDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictServiceServer).AddSysDict(ctx, req.(*AddSysDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictService_UpdateSysDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSysDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictServiceServer).UpdateSysDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictService_UpdateSysDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictServiceServer).UpdateSysDict(ctx, req.(*UpdateSysDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictService_DelSysDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSysDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictServiceServer).DelSysDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictService_DelSysDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictServiceServer).DelSysDict(ctx, req.(*DelSysDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictService_GetSysDictById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysDictByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictServiceServer).GetSysDictById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictService_GetSysDictById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictServiceServer).GetSysDictById(ctx, req.(*GetSysDictByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictService_SearchSysDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSysDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictServiceServer).SearchSysDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictService_SearchSysDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictServiceServer).SearchSysDict(ctx, req.(*SearchSysDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysDictService_ServiceDesc is the grpc.ServiceDesc for SysDictService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysDictService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SysDictService",
	HandlerType: (*SysDictServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSysDict",
			Handler:    _SysDictService_AddSysDict_Handler,
		},
		{
			MethodName: "UpdateSysDict",
			Handler:    _SysDictService_UpdateSysDict_Handler,
		},
		{
			MethodName: "DelSysDict",
			Handler:    _SysDictService_DelSysDict_Handler,
		},
		{
			MethodName: "GetSysDictById",
			Handler:    _SysDictService_GetSysDictById_Handler,
		},
		{
			MethodName: "SearchSysDict",
			Handler:    _SysDictService_SearchSysDict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portal.proto",
}

const (
	SysDictItemService_AddSysDictItem_FullMethodName     = "/pb.SysDictItemService/AddSysDictItem"
	SysDictItemService_UpdateSysDictItem_FullMethodName  = "/pb.SysDictItemService/UpdateSysDictItem"
	SysDictItemService_DelSysDictItem_FullMethodName     = "/pb.SysDictItemService/DelSysDictItem"
	SysDictItemService_GetSysDictItemById_FullMethodName = "/pb.SysDictItemService/GetSysDictItemById"
	SysDictItemService_SearchSysDictItem_FullMethodName  = "/pb.SysDictItemService/SearchSysDictItem"
	SysDictItemService_CheckDictItemCode_FullMethodName  = "/pb.SysDictItemService/CheckDictItemCode"
	SysDictItemService_GetDictItemText_FullMethodName    = "/pb.SysDictItemService/GetDictItemText"
)

// SysDictItemServiceClient is the client API for SysDictItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysDictItemServiceClient interface {
	// -----------------------字典数据表-----------------------
	AddSysDictItem(ctx context.Context, in *AddSysDictItemReq, opts ...grpc.CallOption) (*AddSysDictItemResp, error)
	UpdateSysDictItem(ctx context.Context, in *UpdateSysDictItemReq, opts ...grpc.CallOption) (*UpdateSysDictItemResp, error)
	DelSysDictItem(ctx context.Context, in *DelSysDictItemReq, opts ...grpc.CallOption) (*DelSysDictItemResp, error)
	GetSysDictItemById(ctx context.Context, in *GetSysDictItemByIdReq, opts ...grpc.CallOption) (*GetSysDictItemByIdResp, error)
	SearchSysDictItem(ctx context.Context, in *SearchSysDictItemReq, opts ...grpc.CallOption) (*SearchSysDictItemResp, error)
	CheckDictItemCode(ctx context.Context, in *CheckDictItemCodeReq, opts ...grpc.CallOption) (*CheckDictItemCodeResp, error)
	GetDictItemText(ctx context.Context, in *GetDictItemNameReq, opts ...grpc.CallOption) (*GetDictItemTextResp, error)
}

type sysDictItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysDictItemServiceClient(cc grpc.ClientConnInterface) SysDictItemServiceClient {
	return &sysDictItemServiceClient{cc}
}

func (c *sysDictItemServiceClient) AddSysDictItem(ctx context.Context, in *AddSysDictItemReq, opts ...grpc.CallOption) (*AddSysDictItemResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSysDictItemResp)
	err := c.cc.Invoke(ctx, SysDictItemService_AddSysDictItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictItemServiceClient) UpdateSysDictItem(ctx context.Context, in *UpdateSysDictItemReq, opts ...grpc.CallOption) (*UpdateSysDictItemResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSysDictItemResp)
	err := c.cc.Invoke(ctx, SysDictItemService_UpdateSysDictItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictItemServiceClient) DelSysDictItem(ctx context.Context, in *DelSysDictItemReq, opts ...grpc.CallOption) (*DelSysDictItemResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelSysDictItemResp)
	err := c.cc.Invoke(ctx, SysDictItemService_DelSysDictItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictItemServiceClient) GetSysDictItemById(ctx context.Context, in *GetSysDictItemByIdReq, opts ...grpc.CallOption) (*GetSysDictItemByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSysDictItemByIdResp)
	err := c.cc.Invoke(ctx, SysDictItemService_GetSysDictItemById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictItemServiceClient) SearchSysDictItem(ctx context.Context, in *SearchSysDictItemReq, opts ...grpc.CallOption) (*SearchSysDictItemResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSysDictItemResp)
	err := c.cc.Invoke(ctx, SysDictItemService_SearchSysDictItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictItemServiceClient) CheckDictItemCode(ctx context.Context, in *CheckDictItemCodeReq, opts ...grpc.CallOption) (*CheckDictItemCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckDictItemCodeResp)
	err := c.cc.Invoke(ctx, SysDictItemService_CheckDictItemCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictItemServiceClient) GetDictItemText(ctx context.Context, in *GetDictItemNameReq, opts ...grpc.CallOption) (*GetDictItemTextResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDictItemTextResp)
	err := c.cc.Invoke(ctx, SysDictItemService_GetDictItemText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysDictItemServiceServer is the server API for SysDictItemService service.
// All implementations must embed UnimplementedSysDictItemServiceServer
// for forward compatibility.
type SysDictItemServiceServer interface {
	// -----------------------字典数据表-----------------------
	AddSysDictItem(context.Context, *AddSysDictItemReq) (*AddSysDictItemResp, error)
	UpdateSysDictItem(context.Context, *UpdateSysDictItemReq) (*UpdateSysDictItemResp, error)
	DelSysDictItem(context.Context, *DelSysDictItemReq) (*DelSysDictItemResp, error)
	GetSysDictItemById(context.Context, *GetSysDictItemByIdReq) (*GetSysDictItemByIdResp, error)
	SearchSysDictItem(context.Context, *SearchSysDictItemReq) (*SearchSysDictItemResp, error)
	CheckDictItemCode(context.Context, *CheckDictItemCodeReq) (*CheckDictItemCodeResp, error)
	GetDictItemText(context.Context, *GetDictItemNameReq) (*GetDictItemTextResp, error)
	mustEmbedUnimplementedSysDictItemServiceServer()
}

// UnimplementedSysDictItemServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSysDictItemServiceServer struct{}

func (UnimplementedSysDictItemServiceServer) AddSysDictItem(context.Context, *AddSysDictItemReq) (*AddSysDictItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSysDictItem not implemented")
}
func (UnimplementedSysDictItemServiceServer) UpdateSysDictItem(context.Context, *UpdateSysDictItemReq) (*UpdateSysDictItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysDictItem not implemented")
}
func (UnimplementedSysDictItemServiceServer) DelSysDictItem(context.Context, *DelSysDictItemReq) (*DelSysDictItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSysDictItem not implemented")
}
func (UnimplementedSysDictItemServiceServer) GetSysDictItemById(context.Context, *GetSysDictItemByIdReq) (*GetSysDictItemByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysDictItemById not implemented")
}
func (UnimplementedSysDictItemServiceServer) SearchSysDictItem(context.Context, *SearchSysDictItemReq) (*SearchSysDictItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSysDictItem not implemented")
}
func (UnimplementedSysDictItemServiceServer) CheckDictItemCode(context.Context, *CheckDictItemCodeReq) (*CheckDictItemCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDictItemCode not implemented")
}
func (UnimplementedSysDictItemServiceServer) GetDictItemText(context.Context, *GetDictItemNameReq) (*GetDictItemTextResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictItemText not implemented")
}
func (UnimplementedSysDictItemServiceServer) mustEmbedUnimplementedSysDictItemServiceServer() {}
func (UnimplementedSysDictItemServiceServer) testEmbeddedByValue()                            {}

// UnsafeSysDictItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysDictItemServiceServer will
// result in compilation errors.
type UnsafeSysDictItemServiceServer interface {
	mustEmbedUnimplementedSysDictItemServiceServer()
}

func RegisterSysDictItemServiceServer(s grpc.ServiceRegistrar, srv SysDictItemServiceServer) {
	// If the following call pancis, it indicates UnimplementedSysDictItemServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SysDictItemService_ServiceDesc, srv)
}

func _SysDictItemService_AddSysDictItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSysDictItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictItemServiceServer).AddSysDictItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictItemService_AddSysDictItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictItemServiceServer).AddSysDictItem(ctx, req.(*AddSysDictItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictItemService_UpdateSysDictItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSysDictItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictItemServiceServer).UpdateSysDictItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictItemService_UpdateSysDictItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictItemServiceServer).UpdateSysDictItem(ctx, req.(*UpdateSysDictItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictItemService_DelSysDictItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSysDictItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictItemServiceServer).DelSysDictItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictItemService_DelSysDictItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictItemServiceServer).DelSysDictItem(ctx, req.(*DelSysDictItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictItemService_GetSysDictItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysDictItemByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictItemServiceServer).GetSysDictItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictItemService_GetSysDictItemById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictItemServiceServer).GetSysDictItemById(ctx, req.(*GetSysDictItemByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictItemService_SearchSysDictItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSysDictItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictItemServiceServer).SearchSysDictItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictItemService_SearchSysDictItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictItemServiceServer).SearchSysDictItem(ctx, req.(*SearchSysDictItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictItemService_CheckDictItemCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDictItemCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictItemServiceServer).CheckDictItemCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictItemService_CheckDictItemCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictItemServiceServer).CheckDictItemCode(ctx, req.(*CheckDictItemCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictItemService_GetDictItemText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictItemNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictItemServiceServer).GetDictItemText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictItemService_GetDictItemText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictItemServiceServer).GetDictItemText(ctx, req.(*GetDictItemNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysDictItemService_ServiceDesc is the grpc.ServiceDesc for SysDictItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysDictItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SysDictItemService",
	HandlerType: (*SysDictItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSysDictItem",
			Handler:    _SysDictItemService_AddSysDictItem_Handler,
		},
		{
			MethodName: "UpdateSysDictItem",
			Handler:    _SysDictItemService_UpdateSysDictItem_Handler,
		},
		{
			MethodName: "DelSysDictItem",
			Handler:    _SysDictItemService_DelSysDictItem_Handler,
		},
		{
			MethodName: "GetSysDictItemById",
			Handler:    _SysDictItemService_GetSysDictItemById_Handler,
		},
		{
			MethodName: "SearchSysDictItem",
			Handler:    _SysDictItemService_SearchSysDictItem_Handler,
		},
		{
			MethodName: "CheckDictItemCode",
			Handler:    _SysDictItemService_CheckDictItemCode_Handler,
		},
		{
			MethodName: "GetDictItemText",
			Handler:    _SysDictItemService_GetDictItemText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portal.proto",
}

const (
	ImageService_UploadImage_FullMethodName = "/pb.ImageService/UploadImage"
)

// ImageServiceClient is the client API for ImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ImageService 提供图片上传和获取 URL 的功能
type ImageServiceClient interface {
	// 上传图片
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
}

type imageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageServiceClient(cc grpc.ClientConnInterface) ImageServiceClient {
	return &imageServiceClient{cc}
}

func (c *imageServiceClient) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, ImageService_UploadImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageServiceServer is the server API for ImageService service.
// All implementations must embed UnimplementedImageServiceServer
// for forward compatibility.
//
// ImageService 提供图片上传和获取 URL 的功能
type ImageServiceServer interface {
	// 上传图片
	UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	mustEmbedUnimplementedImageServiceServer()
}

// UnimplementedImageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImageServiceServer struct{}

func (UnimplementedImageServiceServer) UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedImageServiceServer) mustEmbedUnimplementedImageServiceServer() {}
func (UnimplementedImageServiceServer) testEmbeddedByValue()                      {}

// UnsafeImageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageServiceServer will
// result in compilation errors.
type UnsafeImageServiceServer interface {
	mustEmbedUnimplementedImageServiceServer()
}

func RegisterImageServiceServer(s grpc.ServiceRegistrar, srv ImageServiceServer) {
	// If the following call pancis, it indicates UnimplementedImageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImageService_ServiceDesc, srv)
}

func _ImageService_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_UploadImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).UploadImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageService_ServiceDesc is the grpc.ServiceDesc for ImageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ImageService",
	HandlerType: (*ImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadImage",
			Handler:    _ImageService_UploadImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portal.proto",
}
