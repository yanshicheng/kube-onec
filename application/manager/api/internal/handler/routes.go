// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3

package handler

import (
	"net/http"

	cluster "github.com/yanshicheng/kube-onec/application/manager/api/internal/handler/cluster"
	node "github.com/yanshicheng/kube-onec/application/manager/api/internal/handler/node"
	"github.com/yanshicheng/kube-onec/application/manager/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWTAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: cluster.AddOnecClusterHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: cluster.SearchOnecClusterHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/:id",
					Handler: cluster.UpdateOnecClusterHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id",
					Handler: cluster.DelOnecClusterHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: cluster.GetOnecClusterByIdHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/:id/sync",
					Handler: cluster.SyncOnecClusterHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/nodes",
					Handler: cluster.AddOnecNodeHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/onec/manager/cluster"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWTAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: cluster.AddOnecClusterConnInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: cluster.SearchOnecClusterConnInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/:id",
					Handler: cluster.UpdateOnecClusterConnInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id",
					Handler: cluster.DelOnecClusterConnInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: cluster.GetOnecClusterConnInfoByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/onec/manager/cluster/conn-info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWTAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: node.SearchOnecNodeHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id",
					Handler: node.DelOnecNodeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: node.GetOnecNodeByIdHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/:id/annotations",
					Handler: node.AddOnecNodeAnnotationHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id/annotations",
					Handler: node.DelOnecNodeAnnotationHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/:id/disable",
					Handler: node.DisableOnecNodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/:id/enable",
					Handler: node.EnableOnecNodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/:id/evict",
					Handler: node.EvictOnecNodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/:id/labels",
					Handler: node.AddOnecNodeLabelHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id/labels",
					Handler: node.DelOnecNodeLabelHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/:id/sync",
					Handler: node.SyncOnecNodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/:id/taints",
					Handler: node.AddOnecNodeTaintHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id/taints",
					Handler: node.DelOnecNodeTaintHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/onec/manager/node"),
	)
}
