// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	onecResourceAnnotationsFieldNames          = builder.RawFieldNames(&OnecResourceAnnotations{})
	onecResourceAnnotationsRows                = strings.Join(onecResourceAnnotationsFieldNames, ",")
	onecResourceAnnotationsRowsExpectAutoSet   = strings.Join(stringx.Remove(onecResourceAnnotationsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	onecResourceAnnotationsRowsWithPlaceHolder = strings.Join(stringx.Remove(onecResourceAnnotationsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheKubeOnecOnecResourceAnnotationsIdPrefix                        = "cache:kubeOnec:onecResourceAnnotations:id:"
	cacheKubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyPrefix = "cache:kubeOnec:onecResourceAnnotations:resourceType:resourceId:key:"
)

type (
	onecResourceAnnotationsModel interface {
		Insert(ctx context.Context, data *OnecResourceAnnotations) (sql.Result, error)

		FindOne(ctx context.Context, id uint64) (*OnecResourceAnnotations, error)
		Search(ctx context.Context, orderStr string, isAsc bool, page, pageSize uint64, queryStr string, args ...any) ([]*OnecResourceAnnotations, uint64, error)
		SearchNoPage(ctx context.Context, orderStr string, isAsc bool, queryStr string, args ...any) ([]*OnecResourceAnnotations, error)
		FindOneByResourceTypeResourceIdKey(ctx context.Context, resourceType string, resourceId uint64, key string) (*OnecResourceAnnotations, error)
		Update(ctx context.Context, data *OnecResourceAnnotations) error
		Delete(ctx context.Context, id uint64) error
		DeleteSoft(ctx context.Context, id uint64) error
		TransCtx(ctx context.Context, fn func(context.Context, sqlx.Session) error) error
		TransOnSql(ctx context.Context, session sqlx.Session, id uint64, sqlStr string, args ...any) (sql.Result, error)
		ExecSql(ctx context.Context, id uint64, sqlStr string, args ...any) (sql.Result, error)
	}

	defaultOnecResourceAnnotationsModel struct {
		sqlc.CachedConn
		table string
	}

	OnecResourceAnnotations struct {
		Id           uint64    `db:"id"`            // 自增主键
		ResourceType string    `db:"resource_type"` // 资源类型，例如 node, pod
		ResourceId   uint64    `db:"resource_id"`   // 关联的资源ID
		Key          string    `db:"key"`           // 注解键
		Value        string    `db:"value"`         // 注解值
		CreatedAt    time.Time `db:"created_at"`    // 记录创建时间
		UpdatedAt    time.Time `db:"updated_at"`    // 记录更新时间
		IsDeleted    int64     `db:"is_deleted"`    // 是否删除
	}
)

func newOnecResourceAnnotationsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOnecResourceAnnotationsModel {
	return &defaultOnecResourceAnnotationsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`onec_resource_annotations`",
	}
}

func (m *defaultOnecResourceAnnotationsModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	kubeOnecOnecResourceAnnotationsIdKey := fmt.Sprintf("%s%v", cacheKubeOnecOnecResourceAnnotationsIdPrefix, id)
	kubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyKey := fmt.Sprintf("%s%v:%v:%v", cacheKubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyPrefix, data.ResourceType, data.ResourceId, data.Key)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, kubeOnecOnecResourceAnnotationsIdKey, kubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyKey)
	return err
}

func (m *defaultOnecResourceAnnotationsModel) DeleteSoft(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}
	// 如果记录已软删除，无需再次删除
	if data.IsDeleted == 1 {
		return nil
	}
	kubeOnecOnecResourceAnnotationsIdKey := fmt.Sprintf("%s%v", cacheKubeOnecOnecResourceAnnotationsIdPrefix, id)
	kubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyKey := fmt.Sprintf("%s%v:%v:%v", cacheKubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyPrefix, data.ResourceType, data.ResourceId, data.Key)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set `is_deleted` = 1 where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, kubeOnecOnecResourceAnnotationsIdKey, kubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyKey)
	return err
}

func (m *defaultOnecResourceAnnotationsModel) TransCtx(ctx context.Context, fn func(context.Context, sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}

func (m *defaultOnecResourceAnnotationsModel) TransOnSql(ctx context.Context, session sqlx.Session, id uint64, sqlStr string, args ...any) (sql.Result, error) {
	query := strings.ReplaceAll(sqlStr, "{table}", m.table)
	// 如果 id != 0 并且启用了缓存逻辑
	if !isZeroValue(id) {
		// 查询数据（如果需要，确保数据存在）
		data, err := m.FindOne(ctx, id)
		if err != nil {
			return nil, err
		}

		// 缓存相关处理

		kubeOnecOnecResourceAnnotationsIdKey := fmt.Sprintf("%s%v", cacheKubeOnecOnecResourceAnnotationsIdPrefix, id)
		kubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyKey := fmt.Sprintf("%s%v:%v:%v", cacheKubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyPrefix, data.ResourceType, data.ResourceId, data.Key) // 处理缓存逻辑，例如删除或更新缓存
		// 执行带缓存处理的 SQL 操作
		return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (sql.Result, error) {
			return session.ExecCtx(ctx, query, args...)
		}, kubeOnecOnecResourceAnnotationsIdKey, kubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyKey) // 传递缓存相关的键值

	}

	// 如果 id == 0 或不需要缓存，直接执行 SQL
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (sql.Result, error) {
		return session.ExecCtx(ctx, query, args...)
	})
}

func (m *defaultOnecResourceAnnotationsModel) ExecSql(ctx context.Context, id uint64, sqlStr string, args ...any) (sql.Result, error) {
	// 如果 id != 0 并且启用了缓存逻辑
	query := strings.ReplaceAll(sqlStr, "{table}", m.table)
	if !isZeroValue(id) {
		// 缓存相关处理

		// 查询数据（如果需要，确保数据存在）
		data, err := m.FindOne(ctx, id)
		if err != nil {
			return nil, err
		}

		kubeOnecOnecResourceAnnotationsIdKey := fmt.Sprintf("%s%v", cacheKubeOnecOnecResourceAnnotationsIdPrefix, id)
		kubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyKey := fmt.Sprintf("%s%v:%v:%v", cacheKubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyPrefix, data.ResourceType, data.ResourceId, data.Key) // 处理缓存逻辑，例如删除或更新缓存
		// 执行带缓存处理的 SQL 操作
		return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (sql.Result, error) {
			return conn.ExecCtx(ctx, query, args...)
		}, kubeOnecOnecResourceAnnotationsIdKey, kubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyKey) // 传递缓存相关的键值

	}

	// 如果 id == 0 或不需要缓存，直接执行 SQL
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (sql.Result, error) {
		return conn.ExecCtx(ctx, query, args...)
	})
}
func (m *defaultOnecResourceAnnotationsModel) FindOne(ctx context.Context, id uint64) (*OnecResourceAnnotations, error) {
	kubeOnecOnecResourceAnnotationsIdKey := fmt.Sprintf("%s%v", cacheKubeOnecOnecResourceAnnotationsIdPrefix, id)
	var resp OnecResourceAnnotations
	err := m.QueryRowCtx(ctx, &resp, kubeOnecOnecResourceAnnotationsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? AND `is_deleted` = 0 limit 1", onecResourceAnnotationsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOnecResourceAnnotationsModel) Search(ctx context.Context, orderStr string, isAsc bool, page, pageSize uint64, queryStr string, args ...any) ([]*OnecResourceAnnotations, uint64, error) {
	// 确保分页参数有效
	if page < 1 {
		page = 1
	}
	if pageSize < 1 {
		pageSize = 20
	}

	// 构造查询条件
	// 添加 `is_deleted` = 0 条件，保证只查询未软删除数据
	// 初始化 WHERE 子句
	where := "WHERE `is_deleted` = 0"
	if queryStr != "" {
		where = fmt.Sprintf("WHERE %s AND `is_deleted` = 0", queryStr)
	}

	// 根据 isAsc 参数确定排序方式
	sortDirection := "ASC"
	if !isAsc {
		sortDirection = "DESC"
	}

	// 如果用户未指定排序字段，则默认使用 id
	if orderStr == "" {
		orderStr = fmt.Sprintf("ORDER BY id %s", sortDirection)
	} else {
		orderStr = strings.TrimSpace(orderStr)
		if !strings.HasPrefix(strings.ToUpper(orderStr), "ORDER BY") {
			orderStr = "ORDER BY " + orderStr
		}
		orderStr = fmt.Sprintf("%s %s", orderStr, sortDirection)
	}

	countQuery := fmt.Sprintf("SELECT COUNT(1) FROM %s %s", m.table, where)

	var total uint64
	var resp []*OnecResourceAnnotations
	err := m.QueryRowNoCacheCtx(ctx, &total, countQuery, args...)
	if err != nil {
		return nil, 0, err
	}
	if total == 0 {
		// 无匹配记录
		return resp, 0, ErrNotFound
	}
	offset := (page - 1) * pageSize
	dataQuery := fmt.Sprintf("SELECT %s FROM %s %s %s LIMIT %d,%d", onecResourceAnnotationsRows, m.table, where, orderStr, offset, pageSize)

	err = m.QueryRowsNoCacheCtx(ctx, &resp, dataQuery, args...)
	if err != nil {
		return nil, 0, err
	}

	return resp, total, nil
}

func (m *defaultOnecResourceAnnotationsModel) SearchNoPage(ctx context.Context, orderStr string, isAsc bool, queryStr string, args ...any) ([]*OnecResourceAnnotations, error) {
	// 初始化 WHERE 子句
	where := "WHERE `is_deleted` = 0"
	if queryStr != "" {
		where = fmt.Sprintf("WHERE %s AND `is_deleted` = 0", queryStr)
	}

	// 根据 isAsc 参数确定排序方式
	sortDirection := "ASC"
	if !isAsc {
		sortDirection = "DESC"
	}
	// 如果用户未指定排序字段，则默认使用 id
	if orderStr == "" {
		orderStr = fmt.Sprintf("ORDER BY id %s", sortDirection)
	} else {
		orderStr = strings.TrimSpace(orderStr)
		if !strings.HasPrefix(strings.ToUpper(orderStr), "ORDER BY") {
			orderStr = "ORDER BY " + orderStr
		}
		orderStr = fmt.Sprintf("%s %s", orderStr, sortDirection)
	}
	dataQuery := fmt.Sprintf("SELECT %s FROM %s %s %s", onecResourceAnnotationsRows, m.table, where, orderStr)
	var resp []*OnecResourceAnnotations
	err := m.QueryRowsNoCacheCtx(ctx, &resp, dataQuery, args...)
	switch err {
	case nil:
		return resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultOnecResourceAnnotationsModel) FindOneByResourceTypeResourceIdKey(ctx context.Context, resourceType string, resourceId uint64, key string) (*OnecResourceAnnotations, error) {
	kubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyKey := fmt.Sprintf("%s%v:%v:%v", cacheKubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyPrefix, resourceType, resourceId, key)
	var resp OnecResourceAnnotations
	err := m.QueryRowIndexCtx(ctx, &resp, kubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `resource_type` = ? and `resource_id` = ? and `key` = ? AND `is_deleted` = 0  limit 1", onecResourceAnnotationsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, resourceType, resourceId, key); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOnecResourceAnnotationsModel) Insert(ctx context.Context, data *OnecResourceAnnotations) (sql.Result, error) {
	kubeOnecOnecResourceAnnotationsIdKey := fmt.Sprintf("%s%v", cacheKubeOnecOnecResourceAnnotationsIdPrefix, data.Id)
	kubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyKey := fmt.Sprintf("%s%v:%v:%v", cacheKubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyPrefix, data.ResourceType, data.ResourceId, data.Key)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, onecResourceAnnotationsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ResourceType, data.ResourceId, data.Key, data.Value, data.IsDeleted)
	}, kubeOnecOnecResourceAnnotationsIdKey, kubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyKey)
	return ret, err
}

func (m *defaultOnecResourceAnnotationsModel) Update(ctx context.Context, newData *OnecResourceAnnotations) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	kubeOnecOnecResourceAnnotationsIdKey := fmt.Sprintf("%s%v", cacheKubeOnecOnecResourceAnnotationsIdPrefix, data.Id)
	kubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyKey := fmt.Sprintf("%s%v:%v:%v", cacheKubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyPrefix, data.ResourceType, data.ResourceId, data.Key)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, onecResourceAnnotationsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ResourceType, newData.ResourceId, newData.Key, newData.Value, newData.IsDeleted, newData.Id)
	}, kubeOnecOnecResourceAnnotationsIdKey, kubeOnecOnecResourceAnnotationsResourceTypeResourceIdKeyKey)
	return err
}

func (m *defaultOnecResourceAnnotationsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheKubeOnecOnecResourceAnnotationsIdPrefix, primary)
}

func (m *defaultOnecResourceAnnotationsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? AND `is_deleted` = 0 limit 1", onecResourceAnnotationsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOnecResourceAnnotationsModel) tableName() string {
	return m.table
}
