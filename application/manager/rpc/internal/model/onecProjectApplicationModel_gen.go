// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	onecProjectApplicationFieldNames          = builder.RawFieldNames(&OnecProjectApplication{})
	onecProjectApplicationRows                = strings.Join(onecProjectApplicationFieldNames, ",")
	onecProjectApplicationRowsExpectAutoSet   = strings.Join(stringx.Remove(onecProjectApplicationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	onecProjectApplicationRowsWithPlaceHolder = strings.Join(stringx.Remove(onecProjectApplicationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheKubeOnecOnecProjectApplicationIdPrefix                             = "cache:kubeOnec:onecProjectApplication:id:"
	cacheKubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierPrefix = "cache:kubeOnec:onecProjectApplication:projectId:clusterUuid:identifier:"
)

type (
	onecProjectApplicationModel interface {
		Insert(ctx context.Context, data *OnecProjectApplication) (sql.Result, error)

		FindOne(ctx context.Context, id uint64) (*OnecProjectApplication, error)
		Search(ctx context.Context, orderStr string, isAsc bool, page, pageSize uint64, queryStr string, args ...any) ([]*OnecProjectApplication, uint64, error)
		SearchNoPage(ctx context.Context, orderStr string, isAsc bool, queryStr string, args ...any) ([]*OnecProjectApplication, error)
		FindOneByProjectIdClusterUuidIdentifier(ctx context.Context, projectId uint64, clusterUuid string, identifier string) (*OnecProjectApplication, error)
		Update(ctx context.Context, data *OnecProjectApplication) error
		Delete(ctx context.Context, id uint64) error
		DeleteSoft(ctx context.Context, id uint64) error
		TransCtx(ctx context.Context, fn func(context.Context, sqlx.Session) error) error
		TransOnSql(ctx context.Context, session sqlx.Session, id uint64, sqlStr string, args ...any) (sql.Result, error)
		ExecSql(ctx context.Context, id uint64, sqlStr string, args ...any) (sql.Result, error)
	}

	defaultOnecProjectApplicationModel struct {
		sqlc.CachedConn
		table string
	}

	OnecProjectApplication struct {
		Id             uint64    `db:"id"`              // 主键，自增 ID
		ProjectId      uint64    `db:"project_id"`      // 关联到项目表的 ID，表示应用所属的项目
		ClusterUuid    string    `db:"cluster_uuid"`    // 关联到集群表的 ID，表示应用所属的集群
		Name           string    `db:"name"`            // 应用的中文名称
		Identifier     string    `db:"identifier"`      // 应用的唯一标识符（英文，等同于 Kubernetes 的命名空间名称）
		Uuid           string    `db:"uuid"`            // 应用的唯一 UUID，用于标识和追踪命名空间
		Description    string    `db:"description"`     // 应用描述信息
		CpuLimit       float64   `db:"cpu_limit"`       // 应用可使用的 CPU 总量（单位：核）
		MemoryLimit    float64   `db:"memory_limit"`    // 应用可使用的内存总量（单位：GiB）
		StorageLimit   uint64    `db:"storage_limit"`   // 应用可使用的存储总量（单位：GiB）
		ConfigmapLimit uint64    `db:"configmap_limit"` // 应用允许创建的 ConfigMap 数量上限
		PvcLimit       uint64    `db:"pvc_limit"`       // 应用允许创建的 PVC 数量上限
		PodLimit       uint64    `db:"pod_limit"`       // 应用允许创建的 Pod 数量上限
		NodeportLimit  uint64    `db:"nodeport_limit"`  // 应用允许使用的 NodePort 数量上限
		Status         string    `db:"status"`          // 应用状态（如 `Success`、`Error`）
		AppCreateTime  time.Time `db:"app_create_time"` // 应用创建时间，标识该应用在业务系统中首次创建的时间
		CreatedBy      string    `db:"created_by"`      // 记录创建人
		UpdatedBy      string    `db:"updated_by"`      // 记录更新人
		CreatedAt      time.Time `db:"created_at"`      // 记录创建时间
		UpdatedAt      time.Time `db:"updated_at"`      // 记录更新时间
		IsDeleted      int64     `db:"is_deleted"`      // 是否删除
	}
)

func newOnecProjectApplicationModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOnecProjectApplicationModel {
	return &defaultOnecProjectApplicationModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`onec_project_application`",
	}
}

func (m *defaultOnecProjectApplicationModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	kubeOnecOnecProjectApplicationIdKey := fmt.Sprintf("%s%v", cacheKubeOnecOnecProjectApplicationIdPrefix, id)
	kubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierKey := fmt.Sprintf("%s%v:%v:%v", cacheKubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierPrefix, data.ProjectId, data.ClusterUuid, data.Identifier)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, kubeOnecOnecProjectApplicationIdKey, kubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierKey)
	return err
}

func (m *defaultOnecProjectApplicationModel) DeleteSoft(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}
	// 如果记录已软删除，无需再次删除
	if data.IsDeleted == 1 {
		return nil
	}
	kubeOnecOnecProjectApplicationIdKey := fmt.Sprintf("%s%v", cacheKubeOnecOnecProjectApplicationIdPrefix, id)
	kubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierKey := fmt.Sprintf("%s%v:%v:%v", cacheKubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierPrefix, data.ProjectId, data.ClusterUuid, data.Identifier)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set `is_deleted` = 1 where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, kubeOnecOnecProjectApplicationIdKey, kubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierKey)
	return err
}

func (m *defaultOnecProjectApplicationModel) TransCtx(ctx context.Context, fn func(context.Context, sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}

func (m *defaultOnecProjectApplicationModel) TransOnSql(ctx context.Context, session sqlx.Session, id uint64, sqlStr string, args ...any) (sql.Result, error) {
	query := strings.ReplaceAll(sqlStr, "{table}", m.table)
	// 如果 id != 0 并且启用了缓存逻辑
	if !isZeroValue(id) {
		// 查询数据（如果需要，确保数据存在）
		data, err := m.FindOne(ctx, id)
		if err != nil {
			return nil, err
		}

		// 缓存相关处理

		kubeOnecOnecProjectApplicationIdKey := fmt.Sprintf("%s%v", cacheKubeOnecOnecProjectApplicationIdPrefix, id)
		kubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierKey := fmt.Sprintf("%s%v:%v:%v", cacheKubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierPrefix, data.ProjectId, data.ClusterUuid, data.Identifier) // 处理缓存逻辑，例如删除或更新缓存
		// 执行带缓存处理的 SQL 操作
		return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (sql.Result, error) {
			return session.ExecCtx(ctx, query, args...)
		}, kubeOnecOnecProjectApplicationIdKey, kubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierKey) // 传递缓存相关的键值

	}

	// 如果 id == 0 或不需要缓存，直接执行 SQL
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (sql.Result, error) {
		return session.ExecCtx(ctx, query, args...)
	})
}

func (m *defaultOnecProjectApplicationModel) ExecSql(ctx context.Context, id uint64, sqlStr string, args ...any) (sql.Result, error) {
	// 如果 id != 0 并且启用了缓存逻辑
	query := strings.ReplaceAll(sqlStr, "{table}", m.table)
	if !isZeroValue(id) {
		// 缓存相关处理

		// 查询数据（如果需要，确保数据存在）
		data, err := m.FindOne(ctx, id)
		if err != nil {
			return nil, err
		}

		kubeOnecOnecProjectApplicationIdKey := fmt.Sprintf("%s%v", cacheKubeOnecOnecProjectApplicationIdPrefix, id)
		kubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierKey := fmt.Sprintf("%s%v:%v:%v", cacheKubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierPrefix, data.ProjectId, data.ClusterUuid, data.Identifier) // 处理缓存逻辑，例如删除或更新缓存
		// 执行带缓存处理的 SQL 操作
		return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (sql.Result, error) {
			return conn.ExecCtx(ctx, query, args...)
		}, kubeOnecOnecProjectApplicationIdKey, kubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierKey) // 传递缓存相关的键值

	}

	// 如果 id == 0 或不需要缓存，直接执行 SQL
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (sql.Result, error) {
		return conn.ExecCtx(ctx, query, args...)
	})
}
func (m *defaultOnecProjectApplicationModel) FindOne(ctx context.Context, id uint64) (*OnecProjectApplication, error) {
	kubeOnecOnecProjectApplicationIdKey := fmt.Sprintf("%s%v", cacheKubeOnecOnecProjectApplicationIdPrefix, id)
	var resp OnecProjectApplication
	err := m.QueryRowCtx(ctx, &resp, kubeOnecOnecProjectApplicationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? AND `is_deleted` = 0 limit 1", onecProjectApplicationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOnecProjectApplicationModel) Search(ctx context.Context, orderStr string, isAsc bool, page, pageSize uint64, queryStr string, args ...any) ([]*OnecProjectApplication, uint64, error) {
	// 确保分页参数有效
	if page < 1 {
		page = 1
	}
	if pageSize < 1 {
		pageSize = 20
	}

	// 构造查询条件
	// 添加 `is_deleted` = 0 条件，保证只查询未软删除数据
	// 初始化 WHERE 子句
	where := "WHERE `is_deleted` = 0"
	if queryStr != "" {
		where = fmt.Sprintf("WHERE %s AND `is_deleted` = 0", queryStr)
	}

	// 根据 isAsc 参数确定排序方式
	sortDirection := "ASC"
	if !isAsc {
		sortDirection = "DESC"
	}

	// 如果用户未指定排序字段，则默认使用 id
	if orderStr == "" {
		orderStr = fmt.Sprintf("ORDER BY id %s", sortDirection)
	} else {
		orderStr = strings.TrimSpace(orderStr)
		if !strings.HasPrefix(strings.ToUpper(orderStr), "ORDER BY") {
			orderStr = "ORDER BY " + orderStr
		}
		orderStr = fmt.Sprintf("%s %s", orderStr, sortDirection)
	}

	countQuery := fmt.Sprintf("SELECT COUNT(1) FROM %s %s", m.table, where)

	var total uint64
	var resp []*OnecProjectApplication
	err := m.QueryRowNoCacheCtx(ctx, &total, countQuery, args...)
	if err != nil {
		return nil, 0, err
	}
	if total == 0 {
		// 无匹配记录
		return resp, 0, ErrNotFound
	}
	offset := (page - 1) * pageSize
	dataQuery := fmt.Sprintf("SELECT %s FROM %s %s %s LIMIT %d,%d", onecProjectApplicationRows, m.table, where, orderStr, offset, pageSize)

	err = m.QueryRowsNoCacheCtx(ctx, &resp, dataQuery, args...)
	if err != nil {
		return nil, 0, err
	}

	return resp, total, nil
}

func (m *defaultOnecProjectApplicationModel) SearchNoPage(ctx context.Context, orderStr string, isAsc bool, queryStr string, args ...any) ([]*OnecProjectApplication, error) {
	// 初始化 WHERE 子句
	where := "WHERE `is_deleted` = 0"
	if queryStr != "" {
		where = fmt.Sprintf("WHERE %s AND `is_deleted` = 0", queryStr)
	}

	// 根据 isAsc 参数确定排序方式
	sortDirection := "ASC"
	if !isAsc {
		sortDirection = "DESC"
	}
	// 如果用户未指定排序字段，则默认使用 id
	if orderStr == "" {
		orderStr = fmt.Sprintf("ORDER BY id %s", sortDirection)
	} else {
		orderStr = strings.TrimSpace(orderStr)
		if !strings.HasPrefix(strings.ToUpper(orderStr), "ORDER BY") {
			orderStr = "ORDER BY " + orderStr
		}
		orderStr = fmt.Sprintf("%s %s", orderStr, sortDirection)
	}
	dataQuery := fmt.Sprintf("SELECT %s FROM %s %s %s", onecProjectApplicationRows, m.table, where, orderStr)
	var resp []*OnecProjectApplication
	err := m.QueryRowsNoCacheCtx(ctx, &resp, dataQuery, args...)
	switch err {
	case nil:
		return resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultOnecProjectApplicationModel) FindOneByProjectIdClusterUuidIdentifier(ctx context.Context, projectId uint64, clusterUuid string, identifier string) (*OnecProjectApplication, error) {
	kubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierKey := fmt.Sprintf("%s%v:%v:%v", cacheKubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierPrefix, projectId, clusterUuid, identifier)
	var resp OnecProjectApplication
	err := m.QueryRowIndexCtx(ctx, &resp, kubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `project_id` = ? and `cluster_uuid` = ? and `identifier` = ? AND `is_deleted` = 0  limit 1", onecProjectApplicationRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, projectId, clusterUuid, identifier); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOnecProjectApplicationModel) Insert(ctx context.Context, data *OnecProjectApplication) (sql.Result, error) {
	kubeOnecOnecProjectApplicationIdKey := fmt.Sprintf("%s%v", cacheKubeOnecOnecProjectApplicationIdPrefix, data.Id)
	kubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierKey := fmt.Sprintf("%s%v:%v:%v", cacheKubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierPrefix, data.ProjectId, data.ClusterUuid, data.Identifier)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, onecProjectApplicationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProjectId, data.ClusterUuid, data.Name, data.Identifier, data.Uuid, data.Description, data.CpuLimit, data.MemoryLimit, data.StorageLimit, data.ConfigmapLimit, data.PvcLimit, data.PodLimit, data.NodeportLimit, data.Status, data.AppCreateTime, data.CreatedBy, data.UpdatedBy, data.IsDeleted)
	}, kubeOnecOnecProjectApplicationIdKey, kubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierKey)
	return ret, err
}

func (m *defaultOnecProjectApplicationModel) Update(ctx context.Context, newData *OnecProjectApplication) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	kubeOnecOnecProjectApplicationIdKey := fmt.Sprintf("%s%v", cacheKubeOnecOnecProjectApplicationIdPrefix, data.Id)
	kubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierKey := fmt.Sprintf("%s%v:%v:%v", cacheKubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierPrefix, data.ProjectId, data.ClusterUuid, data.Identifier)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, onecProjectApplicationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ProjectId, newData.ClusterUuid, newData.Name, newData.Identifier, newData.Uuid, newData.Description, newData.CpuLimit, newData.MemoryLimit, newData.StorageLimit, newData.ConfigmapLimit, newData.PvcLimit, newData.PodLimit, newData.NodeportLimit, newData.Status, newData.AppCreateTime, newData.CreatedBy, newData.UpdatedBy, newData.IsDeleted, newData.Id)
	}, kubeOnecOnecProjectApplicationIdKey, kubeOnecOnecProjectApplicationProjectIdClusterUuidIdentifierKey)
	return err
}

func (m *defaultOnecProjectApplicationModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheKubeOnecOnecProjectApplicationIdPrefix, primary)
}

func (m *defaultOnecProjectApplicationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? AND `is_deleted` = 0 limit 1", onecProjectApplicationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOnecProjectApplicationModel) tableName() string {
	return m.table
}
