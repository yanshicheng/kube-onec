// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: manager.proto

package onecnodeservice

import (
	"context"

	"github.com/yanshicheng/kube-onec/application/manager/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddOnecClusterReq         = pb.AddOnecClusterReq
	AddOnecClusterResp        = pb.AddOnecClusterResp
	AddOnecNodeAnnotationReq  = pb.AddOnecNodeAnnotationReq
	AddOnecNodeAnnotationResp = pb.AddOnecNodeAnnotationResp
	AddOnecNodeLabelReq       = pb.AddOnecNodeLabelReq
	AddOnecNodeLabelResp      = pb.AddOnecNodeLabelResp
	AddOnecNodeReq            = pb.AddOnecNodeReq
	AddOnecNodeResp           = pb.AddOnecNodeResp
	AddOnecNodeTaintReq       = pb.AddOnecNodeTaintReq
	AddOnecNodeTaintResp      = pb.AddOnecNodeTaintResp
	CancelForbidOnecNodeReq   = pb.CancelForbidOnecNodeReq
	CancelForbidOnecNodeResp  = pb.CancelForbidOnecNodeResp
	DelOnecClusterReq         = pb.DelOnecClusterReq
	DelOnecClusterResp        = pb.DelOnecClusterResp
	DelOnecNodeAnnotationReq  = pb.DelOnecNodeAnnotationReq
	DelOnecNodeAnnotationResp = pb.DelOnecNodeAnnotationResp
	DelOnecNodeLabelReq       = pb.DelOnecNodeLabelReq
	DelOnecNodeLabelResp      = pb.DelOnecNodeLabelResp
	DelOnecNodeReq            = pb.DelOnecNodeReq
	DelOnecNodeResp           = pb.DelOnecNodeResp
	DelOnecNodeTaintReq       = pb.DelOnecNodeTaintReq
	DelOnecNodeTaintResp      = pb.DelOnecNodeTaintResp
	ForbidOnecNodeReq         = pb.ForbidOnecNodeReq
	ForbidOnecNodeResp        = pb.ForbidOnecNodeResp
	GetOnecClusterByIdReq     = pb.GetOnecClusterByIdReq
	GetOnecClusterByIdResp    = pb.GetOnecClusterByIdResp
	GetOnecNodeByIdReq        = pb.GetOnecNodeByIdReq
	GetOnecNodeByIdResp       = pb.GetOnecNodeByIdResp
	OnecCluster               = pb.OnecCluster
	OnecNode                  = pb.OnecNode
	OtherInfo                 = pb.OtherInfo
	SearchOnecClusterReq      = pb.SearchOnecClusterReq
	SearchOnecClusterResp     = pb.SearchOnecClusterResp
	SearchOnecNodeReq         = pb.SearchOnecNodeReq
	SearchOnecNodeResp        = pb.SearchOnecNodeResp
	SyncOnecClusterReq        = pb.SyncOnecClusterReq
	SyncOnecClusterResp       = pb.SyncOnecClusterResp
	SyncOnecNodeReq           = pb.SyncOnecNodeReq
	SyncOnecNodeResp          = pb.SyncOnecNodeResp
	UpdateOnecClusterReq      = pb.UpdateOnecClusterReq
	UpdateOnecClusterResp     = pb.UpdateOnecClusterResp

	OnecNodeService interface {
		// -----------------------节点表，用于管理各集群中的节点信息-----------------------
		DelOnecNode(ctx context.Context, in *DelOnecNodeReq, opts ...grpc.CallOption) (*DelOnecNodeResp, error)
		GetOnecNodeById(ctx context.Context, in *GetOnecNodeByIdReq, opts ...grpc.CallOption) (*GetOnecNodeByIdResp, error)
		SearchOnecNode(ctx context.Context, in *SearchOnecNodeReq, opts ...grpc.CallOption) (*SearchOnecNodeResp, error)
		// 节点添加标签
		AddOnecNodeLabel(ctx context.Context, in *AddOnecNodeLabelReq, opts ...grpc.CallOption) (*AddOnecNodeLabelResp, error)
		// 节点删除标签
		DelOnecNodeLabel(ctx context.Context, in *DelOnecNodeLabelReq, opts ...grpc.CallOption) (*DelOnecNodeLabelResp, error)
		// 节点添加注解
		AddOnecNodeAnnotation(ctx context.Context, in *AddOnecNodeAnnotationReq, opts ...grpc.CallOption) (*AddOnecNodeAnnotationResp, error)
		// 节点删除注解
		DelOnecNodeAnnotation(ctx context.Context, in *DelOnecNodeAnnotationReq, opts ...grpc.CallOption) (*DelOnecNodeAnnotationResp, error)
		// 禁止调度
		ForbidOnecNode(ctx context.Context, in *ForbidOnecNodeReq, opts ...grpc.CallOption) (*ForbidOnecNodeResp, error)
		// 取消禁止调度
		CancelForbidOnecNode(ctx context.Context, in *CancelForbidOnecNodeReq, opts ...grpc.CallOption) (*CancelForbidOnecNodeResp, error)
		// 添加污点
		AddOnecNodeTaint(ctx context.Context, in *AddOnecNodeTaintReq, opts ...grpc.CallOption) (*AddOnecNodeTaintResp, error)
		// 删除污点
		DelOnecNodeTaint(ctx context.Context, in *DelOnecNodeTaintReq, opts ...grpc.CallOption) (*DelOnecNodeTaintResp, error)
		// 同步节点信息
		SyncOnecNode(ctx context.Context, in *SyncOnecNodeReq, opts ...grpc.CallOption) (*SyncOnecNodeResp, error)
	}

	defaultOnecNodeService struct {
		cli zrpc.Client
	}
)

func NewOnecNodeService(cli zrpc.Client) OnecNodeService {
	return &defaultOnecNodeService{
		cli: cli,
	}
}

// -----------------------节点表，用于管理各集群中的节点信息-----------------------
func (m *defaultOnecNodeService) DelOnecNode(ctx context.Context, in *DelOnecNodeReq, opts ...grpc.CallOption) (*DelOnecNodeResp, error) {
	client := pb.NewOnecNodeServiceClient(m.cli.Conn())
	return client.DelOnecNode(ctx, in, opts...)
}

func (m *defaultOnecNodeService) GetOnecNodeById(ctx context.Context, in *GetOnecNodeByIdReq, opts ...grpc.CallOption) (*GetOnecNodeByIdResp, error) {
	client := pb.NewOnecNodeServiceClient(m.cli.Conn())
	return client.GetOnecNodeById(ctx, in, opts...)
}

func (m *defaultOnecNodeService) SearchOnecNode(ctx context.Context, in *SearchOnecNodeReq, opts ...grpc.CallOption) (*SearchOnecNodeResp, error) {
	client := pb.NewOnecNodeServiceClient(m.cli.Conn())
	return client.SearchOnecNode(ctx, in, opts...)
}

// 节点添加标签
func (m *defaultOnecNodeService) AddOnecNodeLabel(ctx context.Context, in *AddOnecNodeLabelReq, opts ...grpc.CallOption) (*AddOnecNodeLabelResp, error) {
	client := pb.NewOnecNodeServiceClient(m.cli.Conn())
	return client.AddOnecNodeLabel(ctx, in, opts...)
}

// 节点删除标签
func (m *defaultOnecNodeService) DelOnecNodeLabel(ctx context.Context, in *DelOnecNodeLabelReq, opts ...grpc.CallOption) (*DelOnecNodeLabelResp, error) {
	client := pb.NewOnecNodeServiceClient(m.cli.Conn())
	return client.DelOnecNodeLabel(ctx, in, opts...)
}

// 节点添加注解
func (m *defaultOnecNodeService) AddOnecNodeAnnotation(ctx context.Context, in *AddOnecNodeAnnotationReq, opts ...grpc.CallOption) (*AddOnecNodeAnnotationResp, error) {
	client := pb.NewOnecNodeServiceClient(m.cli.Conn())
	return client.AddOnecNodeAnnotation(ctx, in, opts...)
}

// 节点删除注解
func (m *defaultOnecNodeService) DelOnecNodeAnnotation(ctx context.Context, in *DelOnecNodeAnnotationReq, opts ...grpc.CallOption) (*DelOnecNodeAnnotationResp, error) {
	client := pb.NewOnecNodeServiceClient(m.cli.Conn())
	return client.DelOnecNodeAnnotation(ctx, in, opts...)
}

// 禁止调度
func (m *defaultOnecNodeService) ForbidOnecNode(ctx context.Context, in *ForbidOnecNodeReq, opts ...grpc.CallOption) (*ForbidOnecNodeResp, error) {
	client := pb.NewOnecNodeServiceClient(m.cli.Conn())
	return client.ForbidOnecNode(ctx, in, opts...)
}

// 取消禁止调度
func (m *defaultOnecNodeService) CancelForbidOnecNode(ctx context.Context, in *CancelForbidOnecNodeReq, opts ...grpc.CallOption) (*CancelForbidOnecNodeResp, error) {
	client := pb.NewOnecNodeServiceClient(m.cli.Conn())
	return client.CancelForbidOnecNode(ctx, in, opts...)
}

// 添加污点
func (m *defaultOnecNodeService) AddOnecNodeTaint(ctx context.Context, in *AddOnecNodeTaintReq, opts ...grpc.CallOption) (*AddOnecNodeTaintResp, error) {
	client := pb.NewOnecNodeServiceClient(m.cli.Conn())
	return client.AddOnecNodeTaint(ctx, in, opts...)
}

// 删除污点
func (m *defaultOnecNodeService) DelOnecNodeTaint(ctx context.Context, in *DelOnecNodeTaintReq, opts ...grpc.CallOption) (*DelOnecNodeTaintResp, error) {
	client := pb.NewOnecNodeServiceClient(m.cli.Conn())
	return client.DelOnecNodeTaint(ctx, in, opts...)
}

// 同步节点信息
func (m *defaultOnecNodeService) SyncOnecNode(ctx context.Context, in *SyncOnecNodeReq, opts ...grpc.CallOption) (*SyncOnecNodeResp, error) {
	client := pb.NewOnecNodeServiceClient(m.cli.Conn())
	return client.SyncOnecNode(ctx, in, opts...)
}
