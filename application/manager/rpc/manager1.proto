syntax = "proto3";

option go_package ="github.com/yanshicheng/kube-onec/application/manager/rpc/pb";

package pb;

// ------------------------------------ 
// Messages and Services
// ------------------------------------ 

//--------------------------------集群表，用于管理多个 Kubernetes 集群--------------------------------
message OnecCluster {
  uint64 id = 1; //自增主键
  string name = 2; //集群名称
  int64 skipInsecure = 3; //是否跳过不安全连接（0：否，1：是）
  string host = 4; //集群主机地址
  string token = 5; //访问集群的令牌
  OnecClusterConnType connType = 6; //连接类型
  string envCode = 7; //集群环境标签 数据字典表
  int64 status = 8; //集群状态
  string version = 9; //集群版本
  string commit = 10; //集群提交版本
  string platform = 11; //集群平台
  int64 versionBuildTime = 12; //版本构建时间
  int64 clusterCreateTime = 13; //集群创建时间
  int64 nodeCount = 14; //节点数量
  int64 totalCpu = 15; //总 CPU
  int64 totalMemory = 16; //总内存
  int64 totalMaxPods = 17; //最大 Pod 数量
  string location = 18; //集群所在地址
  string ingressLbIp = 19; //Ingress 负载均衡 IP
  string description = 20; //集群描述信息
  string createBy = 21; //记录创建人
  string updateBy = 22; //记录更新人
  int64 createTime = 23; //记录创建时间
  int64 updateTime = 24; //记录更新时间
}

message AddOnecClusterReq {
  string name = 1; //集群名称
  int64 skipInsecure = 2; //是否跳过不安全连接（0：否，1：是）
  string host = 3; //集群主机地址
  string token = 4; //访问集群的令牌
  OnecClusterConnType connType = 5; //连接类型
  string envCode = 6; //集群环境标签 数据字典表
  int64 status = 7; //集群状态
  string version = 8; //集群版本
  string commit = 9; //集群提交版本
  string platform = 10; //集群平台
  int64 versionBuildTime = 11; //版本构建时间
  int64 clusterCreateTime = 12; //集群创建时间
  int64 nodeCount = 13; //节点数量
  int64 totalCpu = 14; //总 CPU
  int64 totalMemory = 15; //总内存
  int64 totalMaxPods = 16; //最大 Pod 数量
  string location = 17; //集群所在地址
  string ingressLbIp = 18; //Ingress 负载均衡 IP
  string description = 19; //集群描述信息
  string createBy = 20; //记录创建人
  string updateBy = 21; //记录更新人
}

message AddOnecClusterResp {
}

message UpdateOnecClusterReq {
  uint64 id = 1; //自增主键
  string name = 2; //集群名称
  int64 skipInsecure = 3; //是否跳过不安全连接（0：否，1：是）
  string host = 4; //集群主机地址
  string token = 5; //访问集群的令牌
  OnecClusterConnType connType = 6; //连接类型
  string envCode = 7; //集群环境标签 数据字典表
  int64 status = 8; //集群状态
  string version = 9; //集群版本
  string commit = 10; //集群提交版本
  string platform = 11; //集群平台
  int64 versionBuildTime = 12; //版本构建时间
  int64 clusterCreateTime = 13; //集群创建时间
  int64 nodeCount = 14; //节点数量
  int64 totalCpu = 15; //总 CPU
  int64 totalMemory = 16; //总内存
  int64 totalMaxPods = 17; //最大 Pod 数量
  string location = 18; //集群所在地址
  string ingressLbIp = 19; //Ingress 负载均衡 IP
  string description = 20; //集群描述信息
  string updateBy = 21; //记录更新人
}

message UpdateOnecClusterResp {
}

message DelOnecClusterReq {
  uint64 id = 1; //id
}

message DelOnecClusterResp {
}

message GetOnecClusterByIdReq {
  uint64 id = 1; //id
}

message GetOnecClusterByIdResp {
  OnecCluster data = 1; //onecCluster
}

message SearchOnecClusterReq {
  uint64 page = 1; //page
  uint64 pageSize = 2; //pageSize
  string orderStr = 3; //orderStr
  bool isAsc = 4; //isAsc
  string name = 5; //集群名称
  int64 skipInsecure = 6; //是否跳过不安全连接（0：否，1：是）
  string host = 7; //集群主机地址
  string token = 8; //访问集群的令牌
  OnecClusterConnType connType = 9; //连接类型
  string envCode = 10; //集群环境标签 数据字典表
  int64 status = 11; //集群状态
  string version = 12; //集群版本
  string commit = 13; //集群提交版本
  string platform = 14; //集群平台
  int64 versionBuildTime = 15; //版本构建时间
  int64 clusterCreateTime = 16; //集群创建时间
  int64 nodeCount = 17; //节点数量
  int64 totalCpu = 18; //总 CPU
  int64 totalMemory = 19; //总内存
  int64 totalMaxPods = 20; //最大 Pod 数量
  string location = 21; //集群所在地址
  string ingressLbIp = 22; //Ingress 负载均衡 IP
  string description = 23; //集群描述信息
  string createBy = 24; //记录创建人
  string updateBy = 25; //记录更新人
}

message SearchOnecClusterResp {
  repeated OnecCluster data = 1; //onecCluster
  uint64 total = 2; //total
}

service OnecClusterService {
	//-----------------------集群表，用于管理多个 Kubernetes 集群----------------------- 
	 rpc AddOnecCluster(AddOnecClusterReq) returns (AddOnecClusterResp);
	 rpc UpdateOnecCluster(UpdateOnecClusterReq) returns (UpdateOnecClusterResp);
	 rpc DelOnecCluster(DelOnecClusterReq) returns (DelOnecClusterResp);
	 rpc GetOnecClusterById(GetOnecClusterByIdReq) returns (GetOnecClusterByIdResp);
	 rpc SearchOnecCluster(SearchOnecClusterReq) returns (SearchOnecClusterResp);
}

//--------------------------------通用的服务连接信息表，动态支持多个服务--------------------------------
message OnecClusterConnInfo {
  uint64 id = 1; //自增主键
  uint64 clusterId = 2; //关联集群 ID
  string serviceCode = 3; //服务名称
  string serviceUrl = 4; //服务的 URL
  string username = 5; //用户名（如果使用基本认证）
  string password = 6; //密码（如果使用基本认证）
  string token = 7; //令牌（如果使用 Token 认证）
  int64 skipInsecure = 8; //是否忽略自签名证书验证
  string caCert = 9; //CA 证书内容（以 PEM 格式存储）
  string clientCert = 10; //客户端证书内容（以 PEM 格式存储）
  string clientKey = 11; //客户端私钥内容（以 PEM 格式存储，仅客户端证书需要）
  int64 createTime = 12; //记录创建时间
  int64 updateTime = 13; //记录更新时间
}

message AddOnecClusterConnInfoReq {
  uint64 clusterId = 1; //关联集群 ID
  string serviceCode = 2; //服务名称
  string serviceUrl = 3; //服务的 URL
  string username = 4; //用户名（如果使用基本认证）
  string password = 5; //密码（如果使用基本认证）
  string token = 6; //令牌（如果使用 Token 认证）
  int64 skipInsecure = 7; //是否忽略自签名证书验证
  string caCert = 8; //CA 证书内容（以 PEM 格式存储）
  string clientCert = 9; //客户端证书内容（以 PEM 格式存储）
  string clientKey = 10; //客户端私钥内容（以 PEM 格式存储，仅客户端证书需要）
}

message AddOnecClusterConnInfoResp {
}

message UpdateOnecClusterConnInfoReq {
  uint64 id = 1; //自增主键
  uint64 clusterId = 2; //关联集群 ID
  string serviceCode = 3; //服务名称
  string serviceUrl = 4; //服务的 URL
  string username = 5; //用户名（如果使用基本认证）
  string password = 6; //密码（如果使用基本认证）
  string token = 7; //令牌（如果使用 Token 认证）
  int64 skipInsecure = 8; //是否忽略自签名证书验证
  string caCert = 9; //CA 证书内容（以 PEM 格式存储）
  string clientCert = 10; //客户端证书内容（以 PEM 格式存储）
  string clientKey = 11; //客户端私钥内容（以 PEM 格式存储，仅客户端证书需要）
}

message UpdateOnecClusterConnInfoResp {
}

message DelOnecClusterConnInfoReq {
  uint64 id = 1; //id
}

message DelOnecClusterConnInfoResp {
}

message GetOnecClusterConnInfoByIdReq {
  uint64 id = 1; //id
}

message GetOnecClusterConnInfoByIdResp {
  OnecClusterConnInfo data = 1; //onecClusterConnInfo
}

message SearchOnecClusterConnInfoReq {
  uint64 page = 1; //page
  uint64 pageSize = 2; //pageSize
  string orderStr = 3; //orderStr
  bool isAsc = 4; //isAsc
  uint64 clusterId = 5; //关联集群 ID
  string serviceCode = 6; //服务名称
  string serviceUrl = 7; //服务的 URL
  string username = 8; //用户名（如果使用基本认证）
  string password = 9; //密码（如果使用基本认证）
  string token = 10; //令牌（如果使用 Token 认证）
  int64 skipInsecure = 11; //是否忽略自签名证书验证
  string caCert = 12; //CA 证书内容（以 PEM 格式存储）
  string clientCert = 13; //客户端证书内容（以 PEM 格式存储）
  string clientKey = 14; //客户端私钥内容（以 PEM 格式存储，仅客户端证书需要）
}

message SearchOnecClusterConnInfoResp {
  repeated OnecClusterConnInfo data = 1; //onecClusterConnInfo
  uint64 total = 2; //total
}

service OnecClusterConnInfoService {
	//-----------------------通用的服务连接信息表，动态支持多个服务----------------------- 
	 rpc AddOnecClusterConnInfo(AddOnecClusterConnInfoReq) returns (AddOnecClusterConnInfoResp);
	 rpc UpdateOnecClusterConnInfo(UpdateOnecClusterConnInfoReq) returns (UpdateOnecClusterConnInfoResp);
	 rpc DelOnecClusterConnInfo(DelOnecClusterConnInfoReq) returns (DelOnecClusterConnInfoResp);
	 rpc GetOnecClusterConnInfoById(GetOnecClusterConnInfoByIdReq) returns (GetOnecClusterConnInfoByIdResp);
	 rpc SearchOnecClusterConnInfo(SearchOnecClusterConnInfoReq) returns (SearchOnecClusterConnInfoResp);
}

//--------------------------------节点表，用于管理各集群中的节点信息--------------------------------
message OnecNode {
  uint64 id = 1; //自增主键
  uint64 clusterId = 2; //所属集群ID
  string nodeName = 3; //节点名称，在同一集群中唯一
  int64 cpu = 4; //CPU核数
  int64 memory = 5; //内存大小，Mi
  int64 maxPods = 6; //最大Pod数量
  int64 isGpu = 7; //节点是否包含GPU
  string nodeUid = 8; //节点UID，唯一标识
  string status = 9; //节点状态
  string roles = 10; //节点角色列表
  int64 joinTime = 11; //节点加入集群时间
  string labels = 12; //节点标签，键值对形式
  string annotations = 13; //节点注解，键值对形式
  string podCidr = 14; //Pod CIDR
  int64 unschedulable = 15; //节点是否不可调度（0：可调度，1：不可调度）
  string taints = 16; //节点污点列表
  string nodeIp = 17; //节点地址
  string os = 18; //操作系统
  string kernelVersion = 19; //内核版本
  string containerRuntime = 20; //容器运行时
  string kubeletVersion = 21; //Kubelet版本
  int64 kubeletPort = 22; //Kubelet端口号
  string operatingSystem = 23; //操作系统类型
  string architecture = 24; //架构类型
  string createBy = 25; //记录创建人
  string updateBy = 26; //记录更新人
  int64 createTime = 27; //记录创建时间
  int64 updateTime = 28; //记录更新时间
}

message AddOnecNodeReq {
  uint64 clusterId = 1; //所属集群ID
  string nodeName = 2; //节点名称，在同一集群中唯一
  int64 cpu = 3; //CPU核数
  int64 memory = 4; //内存大小，Mi
  int64 maxPods = 5; //最大Pod数量
  int64 isGpu = 6; //节点是否包含GPU
  string nodeUid = 7; //节点UID，唯一标识
  string status = 8; //节点状态
  string roles = 9; //节点角色列表
  int64 joinTime = 10; //节点加入集群时间
  string labels = 11; //节点标签，键值对形式
  string annotations = 12; //节点注解，键值对形式
  string podCidr = 13; //Pod CIDR
  int64 unschedulable = 14; //节点是否不可调度（0：可调度，1：不可调度）
  string taints = 15; //节点污点列表
  string nodeIp = 16; //节点地址
  string os = 17; //操作系统
  string kernelVersion = 18; //内核版本
  string containerRuntime = 19; //容器运行时
  string kubeletVersion = 20; //Kubelet版本
  int64 kubeletPort = 21; //Kubelet端口号
  string operatingSystem = 22; //操作系统类型
  string architecture = 23; //架构类型
  string createBy = 24; //记录创建人
  string updateBy = 25; //记录更新人
}

message AddOnecNodeResp {
}

message UpdateOnecNodeReq {
  uint64 id = 1; //自增主键
  uint64 clusterId = 2; //所属集群ID
  string nodeName = 3; //节点名称，在同一集群中唯一
  int64 cpu = 4; //CPU核数
  int64 memory = 5; //内存大小，Mi
  int64 maxPods = 6; //最大Pod数量
  int64 isGpu = 7; //节点是否包含GPU
  string nodeUid = 8; //节点UID，唯一标识
  string status = 9; //节点状态
  string roles = 10; //节点角色列表
  int64 joinTime = 11; //节点加入集群时间
  string labels = 12; //节点标签，键值对形式
  string annotations = 13; //节点注解，键值对形式
  string podCidr = 14; //Pod CIDR
  int64 unschedulable = 15; //节点是否不可调度（0：可调度，1：不可调度）
  string taints = 16; //节点污点列表
  string nodeIp = 17; //节点地址
  string os = 18; //操作系统
  string kernelVersion = 19; //内核版本
  string containerRuntime = 20; //容器运行时
  string kubeletVersion = 21; //Kubelet版本
  int64 kubeletPort = 22; //Kubelet端口号
  string operatingSystem = 23; //操作系统类型
  string architecture = 24; //架构类型
  string updateBy = 25; //记录更新人
}

message UpdateOnecNodeResp {
}

message DelOnecNodeReq {
  uint64 id = 1; //id
}

message DelOnecNodeResp {
}

message GetOnecNodeByIdReq {
  uint64 id = 1; //id
}

message GetOnecNodeByIdResp {
  OnecNode data = 1; //onecNode
}

message SearchOnecNodeReq {
  uint64 page = 1; //page
  uint64 pageSize = 2; //pageSize
  string orderStr = 3; //orderStr
  bool isAsc = 4; //isAsc
  uint64 clusterId = 5; //所属集群ID
  string nodeName = 6; //节点名称，在同一集群中唯一
  int64 cpu = 7; //CPU核数
  int64 memory = 8; //内存大小，Mi
  int64 maxPods = 9; //最大Pod数量
  int64 isGpu = 10; //节点是否包含GPU
  string nodeUid = 11; //节点UID，唯一标识
  string status = 12; //节点状态
  string roles = 13; //节点角色列表
  int64 joinTime = 14; //节点加入集群时间
  string labels = 15; //节点标签，键值对形式
  string annotations = 16; //节点注解，键值对形式
  string podCidr = 17; //Pod CIDR
  int64 unschedulable = 18; //节点是否不可调度（0：可调度，1：不可调度）
  string taints = 19; //节点污点列表
  string nodeIp = 20; //节点地址
  string os = 21; //操作系统
  string kernelVersion = 22; //内核版本
  string containerRuntime = 23; //容器运行时
  string kubeletVersion = 24; //Kubelet版本
  int64 kubeletPort = 25; //Kubelet端口号
  string operatingSystem = 26; //操作系统类型
  string architecture = 27; //架构类型
  string createBy = 28; //记录创建人
  string updateBy = 29; //记录更新人
}

message SearchOnecNodeResp {
  repeated OnecNode data = 1; //onecNode
  uint64 total = 2; //total
}

service OnecNodeService {
	//-----------------------节点表，用于管理各集群中的节点信息----------------------- 
	 rpc AddOnecNode(AddOnecNodeReq) returns (AddOnecNodeResp);
	 rpc UpdateOnecNode(UpdateOnecNodeReq) returns (UpdateOnecNodeResp);
	 rpc DelOnecNode(DelOnecNodeReq) returns (DelOnecNodeResp);
	 rpc GetOnecNodeById(GetOnecNodeByIdReq) returns (GetOnecNodeByIdResp);
	 rpc SearchOnecNode(SearchOnecNodeReq) returns (SearchOnecNodeResp);
}

//--------------------------------项目表，记录项目信息--------------------------------
message OnecProject {
  uint64 id = 1; //主键，自增 ID
  string name = 2; //项目的中文名称
  string identifier = 3; //项目的唯一标识符（英文），便于程序中唯一标识
  string description = 4; //项目描述信息
  string createBy = 5; //记录创建人
  string updateBy = 6; //记录更新人
  int64 createTime = 7; //项目创建时间
  int64 updateTime = 8; //项目信息最后更新时间
}

message AddOnecProjectReq {
  string name = 1; //项目的中文名称
  string identifier = 2; //项目的唯一标识符（英文），便于程序中唯一标识
  string description = 3; //项目描述信息
  string createBy = 4; //记录创建人
  string updateBy = 5; //记录更新人
}

message AddOnecProjectResp {
}

message UpdateOnecProjectReq {
  uint64 id = 1; //主键，自增 ID
  string name = 2; //项目的中文名称
  string identifier = 3; //项目的唯一标识符（英文），便于程序中唯一标识
  string description = 4; //项目描述信息
  string updateBy = 5; //记录更新人
}

message UpdateOnecProjectResp {
}

message DelOnecProjectReq {
  uint64 id = 1; //id
}

message DelOnecProjectResp {
}

message GetOnecProjectByIdReq {
  uint64 id = 1; //id
}

message GetOnecProjectByIdResp {
  OnecProject data = 1; //onecProject
}

message SearchOnecProjectReq {
  uint64 page = 1; //page
  uint64 pageSize = 2; //pageSize
  string orderStr = 3; //orderStr
  bool isAsc = 4; //isAsc
  string name = 5; //项目的中文名称
  string identifier = 6; //项目的唯一标识符（英文），便于程序中唯一标识
  string description = 7; //项目描述信息
  string createBy = 8; //记录创建人
  string updateBy = 9; //记录更新人
}

message SearchOnecProjectResp {
  repeated OnecProject data = 1; //onecProject
  uint64 total = 2; //total
}

service OnecProjectService {
	//-----------------------项目表，记录项目信息----------------------- 
	 rpc AddOnecProject(AddOnecProjectReq) returns (AddOnecProjectResp);
	 rpc UpdateOnecProject(UpdateOnecProjectReq) returns (UpdateOnecProjectResp);
	 rpc DelOnecProject(DelOnecProjectReq) returns (DelOnecProjectResp);
	 rpc GetOnecProjectById(GetOnecProjectByIdReq) returns (GetOnecProjectByIdResp);
	 rpc SearchOnecProject(SearchOnecProjectReq) returns (SearchOnecProjectResp);
}

//--------------------------------项目管理员表，关联项目与用户的多对多关系--------------------------------
message OnecProjectAdmin {
  uint64 id = 1; //主键，自增 ID
  uint64 projectId = 2; //关联的项目 ID
  uint64 userId = 3; //关联的用户 ID
  string createBy = 4; //记录创建人
  string updateBy = 5; //记录更新人
  int64 createTime = 6; //记录创建时间
  int64 updateTime = 7; //记录更新时间
}

message AddOnecProjectAdminReq {
  uint64 projectId = 1; //关联的项目 ID
  uint64 userId = 2; //关联的用户 ID
  string createBy = 3; //记录创建人
  string updateBy = 4; //记录更新人
}

message AddOnecProjectAdminResp {
}

message UpdateOnecProjectAdminReq {
  uint64 id = 1; //主键，自增 ID
  uint64 projectId = 2; //关联的项目 ID
  uint64 userId = 3; //关联的用户 ID
  string updateBy = 4; //记录更新人
}

message UpdateOnecProjectAdminResp {
}

message DelOnecProjectAdminReq {
  uint64 id = 1; //id
}

message DelOnecProjectAdminResp {
}

message GetOnecProjectAdminByIdReq {
  uint64 id = 1; //id
}

message GetOnecProjectAdminByIdResp {
  OnecProjectAdmin data = 1; //onecProjectAdmin
}

message SearchOnecProjectAdminReq {
  uint64 page = 1; //page
  uint64 pageSize = 2; //pageSize
  string orderStr = 3; //orderStr
  bool isAsc = 4; //isAsc
  uint64 projectId = 5; //关联的项目 ID
  uint64 userId = 6; //关联的用户 ID
  string createBy = 7; //记录创建人
  string updateBy = 8; //记录更新人
}

message SearchOnecProjectAdminResp {
  repeated OnecProjectAdmin data = 1; //onecProjectAdmin
  uint64 total = 2; //total
}

service OnecProjectAdminService {
	//-----------------------项目管理员表，关联项目与用户的多对多关系----------------------- 
	 rpc AddOnecProjectAdmin(AddOnecProjectAdminReq) returns (AddOnecProjectAdminResp);
	 rpc UpdateOnecProjectAdmin(UpdateOnecProjectAdminReq) returns (UpdateOnecProjectAdminResp);
	 rpc DelOnecProjectAdmin(DelOnecProjectAdminReq) returns (DelOnecProjectAdminResp);
	 rpc GetOnecProjectAdminById(GetOnecProjectAdminByIdReq) returns (GetOnecProjectAdminByIdResp);
	 rpc SearchOnecProjectAdmin(SearchOnecProjectAdminReq) returns (SearchOnecProjectAdminResp);
}

//--------------------------------应用表，--------------------------------
message OnecProjectApplication {
  uint64 id = 1; //主键，自增 ID
  uint64 projectId = 2; //关联到项目表的 ID，表示应用所属的项目
  uint64 clusterId = 3; //关联到集群表的 ID，表示应用所属的集群
  string name = 4; //应用的中文名称
  string identifier = 5; //应用的唯一标识符（英文，等同于 Kubernetes 的命名空间名称）
  string uuid = 6; //应用的唯一 UUID，用于标识和追踪命名空间
  string description = 7; //应用描述信息
  int64 cpuLimit = 8; //应用可使用的 CPU 总量（单位：核）
  int64 memoryLimit = 9; //应用可使用的内存总量（单位：GiB）
  int64 storageLimit = 10; //应用可使用的存储总量（单位：GiB）
  int64 configmapLimit = 11; //应用允许创建的 ConfigMap 数量上限
  int64 pvcLimit = 12; //应用允许创建的 PVC 数量上限
  int64 podLimit = 13; //应用允许创建的 Pod 数量上限
  int64 nodeportLimit = 14; //应用允许使用的 NodePort 数量上限
  string status = 15; //应用状态（如 `Success`、`Error`）
  int64 appCreateTime = 16; //应用创建时间，标识该应用在业务系统中首次创建的时间
  string createBy = 17; //记录创建人
  string updateBy = 18; //记录更新人
  int64 createTime = 19; //记录创建时间
  int64 updateTime = 20; //记录更新时间
}

message AddOnecProjectApplicationReq {
  uint64 projectId = 1; //关联到项目表的 ID，表示应用所属的项目
  uint64 clusterId = 2; //关联到集群表的 ID，表示应用所属的集群
  string name = 3; //应用的中文名称
  string identifier = 4; //应用的唯一标识符（英文，等同于 Kubernetes 的命名空间名称）
  string uuid = 5; //应用的唯一 UUID，用于标识和追踪命名空间
  string description = 6; //应用描述信息
  int64 cpuLimit = 7; //应用可使用的 CPU 总量（单位：核）
  int64 memoryLimit = 8; //应用可使用的内存总量（单位：GiB）
  int64 storageLimit = 9; //应用可使用的存储总量（单位：GiB）
  int64 configmapLimit = 10; //应用允许创建的 ConfigMap 数量上限
  int64 pvcLimit = 11; //应用允许创建的 PVC 数量上限
  int64 podLimit = 12; //应用允许创建的 Pod 数量上限
  int64 nodeportLimit = 13; //应用允许使用的 NodePort 数量上限
  string status = 14; //应用状态（如 `Success`、`Error`）
  int64 appCreateTime = 15; //应用创建时间，标识该应用在业务系统中首次创建的时间
  string createBy = 16; //记录创建人
  string updateBy = 17; //记录更新人
}

message AddOnecProjectApplicationResp {
}

message UpdateOnecProjectApplicationReq {
  uint64 id = 1; //主键，自增 ID
  uint64 projectId = 2; //关联到项目表的 ID，表示应用所属的项目
  uint64 clusterId = 3; //关联到集群表的 ID，表示应用所属的集群
  string name = 4; //应用的中文名称
  string identifier = 5; //应用的唯一标识符（英文，等同于 Kubernetes 的命名空间名称）
  string uuid = 6; //应用的唯一 UUID，用于标识和追踪命名空间
  string description = 7; //应用描述信息
  int64 cpuLimit = 8; //应用可使用的 CPU 总量（单位：核）
  int64 memoryLimit = 9; //应用可使用的内存总量（单位：GiB）
  int64 storageLimit = 10; //应用可使用的存储总量（单位：GiB）
  int64 configmapLimit = 11; //应用允许创建的 ConfigMap 数量上限
  int64 pvcLimit = 12; //应用允许创建的 PVC 数量上限
  int64 podLimit = 13; //应用允许创建的 Pod 数量上限
  int64 nodeportLimit = 14; //应用允许使用的 NodePort 数量上限
  string status = 15; //应用状态（如 `Success`、`Error`）
  int64 appCreateTime = 16; //应用创建时间，标识该应用在业务系统中首次创建的时间
  string updateBy = 17; //记录更新人
}

message UpdateOnecProjectApplicationResp {
}

message DelOnecProjectApplicationReq {
  uint64 id = 1; //id
}

message DelOnecProjectApplicationResp {
}

message GetOnecProjectApplicationByIdReq {
  uint64 id = 1; //id
}

message GetOnecProjectApplicationByIdResp {
  OnecProjectApplication data = 1; //onecProjectApplication
}

message SearchOnecProjectApplicationReq {
  uint64 page = 1; //page
  uint64 pageSize = 2; //pageSize
  string orderStr = 3; //orderStr
  bool isAsc = 4; //isAsc
  uint64 projectId = 5; //关联到项目表的 ID，表示应用所属的项目
  uint64 clusterId = 6; //关联到集群表的 ID，表示应用所属的集群
  string name = 7; //应用的中文名称
  string identifier = 8; //应用的唯一标识符（英文，等同于 Kubernetes 的命名空间名称）
  string uuid = 9; //应用的唯一 UUID，用于标识和追踪命名空间
  string description = 10; //应用描述信息
  int64 cpuLimit = 11; //应用可使用的 CPU 总量（单位：核）
  int64 memoryLimit = 12; //应用可使用的内存总量（单位：GiB）
  int64 storageLimit = 13; //应用可使用的存储总量（单位：GiB）
  int64 configmapLimit = 14; //应用允许创建的 ConfigMap 数量上限
  int64 pvcLimit = 15; //应用允许创建的 PVC 数量上限
  int64 podLimit = 16; //应用允许创建的 Pod 数量上限
  int64 nodeportLimit = 17; //应用允许使用的 NodePort 数量上限
  string status = 18; //应用状态（如 `Success`、`Error`）
  int64 appCreateTime = 19; //应用创建时间，标识该应用在业务系统中首次创建的时间
  string createBy = 20; //记录创建人
  string updateBy = 21; //记录更新人
}

message SearchOnecProjectApplicationResp {
  repeated OnecProjectApplication data = 1; //onecProjectApplication
  uint64 total = 2; //total
}

service OnecProjectApplicationService {
	//-----------------------应用表，----------------------- 
	 rpc AddOnecProjectApplication(AddOnecProjectApplicationReq) returns (AddOnecProjectApplicationResp);
	 rpc UpdateOnecProjectApplication(UpdateOnecProjectApplicationReq) returns (UpdateOnecProjectApplicationResp);
	 rpc DelOnecProjectApplication(DelOnecProjectApplicationReq) returns (DelOnecProjectApplicationResp);
	 rpc GetOnecProjectApplicationById(GetOnecProjectApplicationByIdReq) returns (GetOnecProjectApplicationByIdResp);
	 rpc SearchOnecProjectApplication(SearchOnecProjectApplicationReq) returns (SearchOnecProjectApplicationResp);
}

//--------------------------------项目与集群的对应关系表，记录资源配额和使用情况--------------------------------
message OnecProjectQuota {
  uint64 id = 1; //主键，自增 ID
  uint64 clusterId = 2; //关联的集群 ID
  uint64 projectId = 3; //关联的项目 ID
  int64 cpuAllocatable = 4; //CPU 可分配总量（单位：核）
  int64 cpuQuota = 5; //CPU 分配配额（单位：核）
  double cpuOvercommit = 6; //CPU 超配比（如 1.5 表示允许超配 50%）
  int64 cpuLimit = 7; //CPU 上限值（单位：核）
  int64 cpuUsed = 8; //已使用的 CPU 资源（单位：核）
  int64 memoryAllocatable = 9; //内存可分配总量（单位：GiB）
  int64 memoryQuota = 10; //内存分配配额（单位：GiB）
  double memoryOvercommit = 11; //内存超配比（如 1.2 表示允许超配 20%）
  int64 memoryLimit = 12; //内存上限值（单位：GiB）
  int64 memoryUsed = 13; //已使用的内存资源（单位：GiB）
  int64 storageLimit = 14; //项目可使用的存储总量（单位：GiB）
  int64 configmapLimit = 15; //项目允许创建的 ConfigMap 数量上限
  int64 pvcLimit = 16; //项目允许创建的 PVC（PersistentVolumeClaim）数量上限
  int64 podLimit = 17; //项目允许创建的 Pod 数量上限
  int64 nodeportLimit = 18; //项目允许使用的 NodePort 数量上限
  string status = 19; //项目状态（如 `Active`、`Disabled`、`Archived`）
  string createBy = 20; //记录创建人
  string updateBy = 21; //记录更新人
  int64 createTime = 22; //项目创建时间
  int64 updateTime = 23; //项目信息最后更新时间
}

message AddOnecProjectQuotaReq {
  uint64 clusterId = 1; //关联的集群 ID
  uint64 projectId = 2; //关联的项目 ID
  int64 cpuAllocatable = 3; //CPU 可分配总量（单位：核）
  int64 cpuQuota = 4; //CPU 分配配额（单位：核）
  double cpuOvercommit = 5; //CPU 超配比（如 1.5 表示允许超配 50%）
  int64 cpuLimit = 6; //CPU 上限值（单位：核）
  int64 cpuUsed = 7; //已使用的 CPU 资源（单位：核）
  int64 memoryAllocatable = 8; //内存可分配总量（单位：GiB）
  int64 memoryQuota = 9; //内存分配配额（单位：GiB）
  double memoryOvercommit = 10; //内存超配比（如 1.2 表示允许超配 20%）
  int64 memoryLimit = 11; //内存上限值（单位：GiB）
  int64 memoryUsed = 12; //已使用的内存资源（单位：GiB）
  int64 storageLimit = 13; //项目可使用的存储总量（单位：GiB）
  int64 configmapLimit = 14; //项目允许创建的 ConfigMap 数量上限
  int64 pvcLimit = 15; //项目允许创建的 PVC（PersistentVolumeClaim）数量上限
  int64 podLimit = 16; //项目允许创建的 Pod 数量上限
  int64 nodeportLimit = 17; //项目允许使用的 NodePort 数量上限
  string status = 18; //项目状态（如 `Active`、`Disabled`、`Archived`）
  string createBy = 19; //记录创建人
  string updateBy = 20; //记录更新人
}

message AddOnecProjectQuotaResp {
}

message UpdateOnecProjectQuotaReq {
  uint64 id = 1; //主键，自增 ID
  uint64 clusterId = 2; //关联的集群 ID
  uint64 projectId = 3; //关联的项目 ID
  int64 cpuAllocatable = 4; //CPU 可分配总量（单位：核）
  int64 cpuQuota = 5; //CPU 分配配额（单位：核）
  double cpuOvercommit = 6; //CPU 超配比（如 1.5 表示允许超配 50%）
  int64 cpuLimit = 7; //CPU 上限值（单位：核）
  int64 cpuUsed = 8; //已使用的 CPU 资源（单位：核）
  int64 memoryAllocatable = 9; //内存可分配总量（单位：GiB）
  int64 memoryQuota = 10; //内存分配配额（单位：GiB）
  double memoryOvercommit = 11; //内存超配比（如 1.2 表示允许超配 20%）
  int64 memoryLimit = 12; //内存上限值（单位：GiB）
  int64 memoryUsed = 13; //已使用的内存资源（单位：GiB）
  int64 storageLimit = 14; //项目可使用的存储总量（单位：GiB）
  int64 configmapLimit = 15; //项目允许创建的 ConfigMap 数量上限
  int64 pvcLimit = 16; //项目允许创建的 PVC（PersistentVolumeClaim）数量上限
  int64 podLimit = 17; //项目允许创建的 Pod 数量上限
  int64 nodeportLimit = 18; //项目允许使用的 NodePort 数量上限
  string status = 19; //项目状态（如 `Active`、`Disabled`、`Archived`）
  string updateBy = 20; //记录更新人
}

message UpdateOnecProjectQuotaResp {
}

message DelOnecProjectQuotaReq {
  uint64 id = 1; //id
}

message DelOnecProjectQuotaResp {
}

message GetOnecProjectQuotaByIdReq {
  uint64 id = 1; //id
}

message GetOnecProjectQuotaByIdResp {
  OnecProjectQuota data = 1; //onecProjectQuota
}

message SearchOnecProjectQuotaReq {
  uint64 page = 1; //page
  uint64 pageSize = 2; //pageSize
  string orderStr = 3; //orderStr
  bool isAsc = 4; //isAsc
  uint64 clusterId = 5; //关联的集群 ID
  uint64 projectId = 6; //关联的项目 ID
  int64 cpuAllocatable = 7; //CPU 可分配总量（单位：核）
  int64 cpuQuota = 8; //CPU 分配配额（单位：核）
  double cpuOvercommit = 9; //CPU 超配比（如 1.5 表示允许超配 50%）
  int64 cpuLimit = 10; //CPU 上限值（单位：核）
  int64 cpuUsed = 11; //已使用的 CPU 资源（单位：核）
  int64 memoryAllocatable = 12; //内存可分配总量（单位：GiB）
  int64 memoryQuota = 13; //内存分配配额（单位：GiB）
  double memoryOvercommit = 14; //内存超配比（如 1.2 表示允许超配 20%）
  int64 memoryLimit = 15; //内存上限值（单位：GiB）
  int64 memoryUsed = 16; //已使用的内存资源（单位：GiB）
  int64 storageLimit = 17; //项目可使用的存储总量（单位：GiB）
  int64 configmapLimit = 18; //项目允许创建的 ConfigMap 数量上限
  int64 pvcLimit = 19; //项目允许创建的 PVC（PersistentVolumeClaim）数量上限
  int64 podLimit = 20; //项目允许创建的 Pod 数量上限
  int64 nodeportLimit = 21; //项目允许使用的 NodePort 数量上限
  string status = 22; //项目状态（如 `Active`、`Disabled`、`Archived`）
  string createBy = 23; //记录创建人
  string updateBy = 24; //记录更新人
}

message SearchOnecProjectQuotaResp {
  repeated OnecProjectQuota data = 1; //onecProjectQuota
  uint64 total = 2; //total
}

service OnecProjectQuotaService {
	//-----------------------项目与集群的对应关系表，记录资源配额和使用情况----------------------- 
	 rpc AddOnecProjectQuota(AddOnecProjectQuotaReq) returns (AddOnecProjectQuotaResp);
	 rpc UpdateOnecProjectQuota(UpdateOnecProjectQuotaReq) returns (UpdateOnecProjectQuotaResp);
	 rpc DelOnecProjectQuota(DelOnecProjectQuotaReq) returns (DelOnecProjectQuotaResp);
	 rpc GetOnecProjectQuotaById(GetOnecProjectQuotaByIdReq) returns (GetOnecProjectQuotaByIdResp);
	 rpc SearchOnecProjectQuota(SearchOnecProjectQuotaReq) returns (SearchOnecProjectQuotaResp);
}

// ------------------------------------ 
// Enums
// ------------------------------------ 

// 连接类型 
enum OnecClusterConnType {
  KUBECONFIG = 0;
  TOKEN = 1;
  AGENT = 2;
  OTHER = 3;
}


