// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.19.4
// source: manager.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 连接类型
type OnecClusterConnType int32

const (
	OnecClusterConnType_KUBECONFIG OnecClusterConnType = 0
	OnecClusterConnType_TOKEN      OnecClusterConnType = 1
	OnecClusterConnType_AGENT      OnecClusterConnType = 2
	OnecClusterConnType_OTHER      OnecClusterConnType = 3
)

// Enum value maps for OnecClusterConnType.
var (
	OnecClusterConnType_name = map[int32]string{
		0: "KUBECONFIG",
		1: "TOKEN",
		2: "AGENT",
		3: "OTHER",
	}
	OnecClusterConnType_value = map[string]int32{
		"KUBECONFIG": 0,
		"TOKEN":      1,
		"AGENT":      2,
		"OTHER":      3,
	}
)

func (x OnecClusterConnType) Enum() *OnecClusterConnType {
	p := new(OnecClusterConnType)
	*p = x
	return p
}

func (x OnecClusterConnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnecClusterConnType) Descriptor() protoreflect.EnumDescriptor {
	return file_manager_proto_enumTypes[0].Descriptor()
}

func (OnecClusterConnType) Type() protoreflect.EnumType {
	return &file_manager_proto_enumTypes[0]
}

func (x OnecClusterConnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnecClusterConnType.Descriptor instead.
func (OnecClusterConnType) EnumDescriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{0}
}

// --------------------------------集群表，用于管理多个 Kubernetes 集群--------------------------------
type OnecCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                      //集群唯一标识符
	Name              string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                  //集群名称
	SkipInsecure      int64               `protobuf:"varint,3,opt,name=skipInsecure,proto3" json:"skipInsecure,omitempty"` //是否跳过不安全连接（0：否，1：是）
	Host              string              `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`                  //集群主机地址
	EnvTag            string              `protobuf:"bytes,5,opt,name=envTag,proto3" json:"envTag,omitempty"`              //访问集群的令牌
	Status            string              `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	ConnType          OnecClusterConnType `protobuf:"varint,7,opt,name=connType,proto3,enum=pb.OnecClusterConnType" json:"connType,omitempty"` //连接类型
	Version           string              `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`                                //集群版本
	Commit            string              `protobuf:"bytes,9,opt,name=commit,proto3" json:"commit,omitempty"`                                  //集群提交版本
	Platform          string              `protobuf:"bytes,10,opt,name=platform,proto3" json:"platform,omitempty"`                             //集群平台
	VersionBuildTime  int64               `protobuf:"varint,11,opt,name=versionBuildTime,proto3" json:"versionBuildTime,omitempty"`            //版本构建时间
	ClusterCreateTime int64               `protobuf:"varint,12,opt,name=clusterCreateTime,proto3" json:"clusterCreateTime,omitempty"`          //集群创建时间
	Description       string              `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`                       //集群描述信息
	CreateBy          string              `protobuf:"bytes,14,opt,name=createBy,proto3" json:"createBy,omitempty"`                             //记录创建人
	UpdateBy          string              `protobuf:"bytes,15,opt,name=updateBy,proto3" json:"updateBy,omitempty"`                             //记录更新人
	CreateTime        int64               `protobuf:"varint,16,opt,name=createTime,proto3" json:"createTime,omitempty"`                        //记录创建时间
	UpdateTime        int64               `protobuf:"varint,17,opt,name=updateTime,proto3" json:"updateTime,omitempty"`                        //记录更新时间
}

func (x *OnecCluster) Reset() {
	*x = OnecCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnecCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnecCluster) ProtoMessage() {}

func (x *OnecCluster) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnecCluster.ProtoReflect.Descriptor instead.
func (*OnecCluster) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{0}
}

func (x *OnecCluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OnecCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OnecCluster) GetSkipInsecure() int64 {
	if x != nil {
		return x.SkipInsecure
	}
	return 0
}

func (x *OnecCluster) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *OnecCluster) GetEnvTag() string {
	if x != nil {
		return x.EnvTag
	}
	return ""
}

func (x *OnecCluster) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OnecCluster) GetConnType() OnecClusterConnType {
	if x != nil {
		return x.ConnType
	}
	return OnecClusterConnType_KUBECONFIG
}

func (x *OnecCluster) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *OnecCluster) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *OnecCluster) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *OnecCluster) GetVersionBuildTime() int64 {
	if x != nil {
		return x.VersionBuildTime
	}
	return 0
}

func (x *OnecCluster) GetClusterCreateTime() int64 {
	if x != nil {
		return x.ClusterCreateTime
	}
	return 0
}

func (x *OnecCluster) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OnecCluster) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *OnecCluster) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *OnecCluster) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *OnecCluster) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type AddOnecClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                      //集群名称
	SkipInsecure int64               `protobuf:"varint,2,opt,name=skipInsecure,proto3" json:"skipInsecure,omitempty"`                     //是否跳过不安全连接（0：否，1：是）
	Host         string              `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`                                      //集群主机地址
	Token        string              `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`                                    //访问集群的令牌
	ConnType     OnecClusterConnType `protobuf:"varint,5,opt,name=connType,proto3,enum=pb.OnecClusterConnType" json:"connType,omitempty"` //连接类型
	EnvTag       int64               `protobuf:"varint,6,opt,name=envTag,proto3" json:"envTag,omitempty"`
	Description  string              `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"` //集群描述信息
	CreateBy     string              `protobuf:"bytes,12,opt,name=createBy,proto3" json:"createBy,omitempty"`       //记录创建人
	UpdateBy     string              `protobuf:"bytes,13,opt,name=updateBy,proto3" json:"updateBy,omitempty"`       //记录更新人
}

func (x *AddOnecClusterReq) Reset() {
	*x = AddOnecClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecClusterReq) ProtoMessage() {}

func (x *AddOnecClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecClusterReq.ProtoReflect.Descriptor instead.
func (*AddOnecClusterReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{1}
}

func (x *AddOnecClusterReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddOnecClusterReq) GetSkipInsecure() int64 {
	if x != nil {
		return x.SkipInsecure
	}
	return 0
}

func (x *AddOnecClusterReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *AddOnecClusterReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AddOnecClusterReq) GetConnType() OnecClusterConnType {
	if x != nil {
		return x.ConnType
	}
	return OnecClusterConnType_KUBECONFIG
}

func (x *AddOnecClusterReq) GetEnvTag() int64 {
	if x != nil {
		return x.EnvTag
	}
	return 0
}

func (x *AddOnecClusterReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddOnecClusterReq) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *AddOnecClusterReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type AddOnecClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddOnecClusterResp) Reset() {
	*x = AddOnecClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecClusterResp) ProtoMessage() {}

func (x *AddOnecClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecClusterResp.ProtoReflect.Descriptor instead.
func (*AddOnecClusterResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{2}
}

type UpdateOnecClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                          //集群唯一标识符
	Name         string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                      //集群名称
	SkipInsecure int64               `protobuf:"varint,3,opt,name=skipInsecure,proto3" json:"skipInsecure,omitempty"`                     //是否跳过不安全连接（0：否，1：是）
	Host         string              `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`                                      //集群主机地址
	Token        string              `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`                                    //访问集群的令牌
	ConnType     OnecClusterConnType `protobuf:"varint,6,opt,name=connType,proto3,enum=pb.OnecClusterConnType" json:"connType,omitempty"` //连接类型
	EnvTag       int64               `protobuf:"varint,7,opt,name=envTag,proto3" json:"envTag,omitempty"`
	Description  string              `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"` //集群描述信息
	UpdateBy     string              `protobuf:"bytes,13,opt,name=updateBy,proto3" json:"updateBy,omitempty"`       //记录更新人
}

func (x *UpdateOnecClusterReq) Reset() {
	*x = UpdateOnecClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOnecClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOnecClusterReq) ProtoMessage() {}

func (x *UpdateOnecClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOnecClusterReq.ProtoReflect.Descriptor instead.
func (*UpdateOnecClusterReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateOnecClusterReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateOnecClusterReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOnecClusterReq) GetSkipInsecure() int64 {
	if x != nil {
		return x.SkipInsecure
	}
	return 0
}

func (x *UpdateOnecClusterReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *UpdateOnecClusterReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UpdateOnecClusterReq) GetConnType() OnecClusterConnType {
	if x != nil {
		return x.ConnType
	}
	return OnecClusterConnType_KUBECONFIG
}

func (x *UpdateOnecClusterReq) GetEnvTag() int64 {
	if x != nil {
		return x.EnvTag
	}
	return 0
}

func (x *UpdateOnecClusterReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateOnecClusterReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type UpdateOnecClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOnecClusterResp) Reset() {
	*x = UpdateOnecClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOnecClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOnecClusterResp) ProtoMessage() {}

func (x *UpdateOnecClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOnecClusterResp.ProtoReflect.Descriptor instead.
func (*UpdateOnecClusterResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{4}
}

type DelOnecClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //id
}

func (x *DelOnecClusterReq) Reset() {
	*x = DelOnecClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecClusterReq) ProtoMessage() {}

func (x *DelOnecClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecClusterReq.ProtoReflect.Descriptor instead.
func (*DelOnecClusterReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{5}
}

func (x *DelOnecClusterReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DelOnecClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelOnecClusterResp) Reset() {
	*x = DelOnecClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecClusterResp) ProtoMessage() {}

func (x *DelOnecClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecClusterResp.ProtoReflect.Descriptor instead.
func (*DelOnecClusterResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{6}
}

type GetOnecClusterByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //id
}

func (x *GetOnecClusterByIdReq) Reset() {
	*x = GetOnecClusterByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnecClusterByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnecClusterByIdReq) ProtoMessage() {}

func (x *GetOnecClusterByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnecClusterByIdReq.ProtoReflect.Descriptor instead.
func (*GetOnecClusterByIdReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{7}
}

func (x *GetOnecClusterByIdReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type OtherInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeTotal   int64 `protobuf:"varint,1,opt,name=nodeTotal,proto3" json:"nodeTotal,omitempty"`
	CpuTotal    int64 `protobuf:"varint,2,opt,name=cpuTotal,proto3" json:"cpuTotal,omitempty"`
	MemoryTotal int64 `protobuf:"varint,3,opt,name=memoryTotal,proto3" json:"memoryTotal,omitempty"`
	PodTotal    int64 `protobuf:"varint,4,opt,name=podTotal,proto3" json:"podTotal,omitempty"`
}

func (x *OtherInfo) Reset() {
	*x = OtherInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtherInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherInfo) ProtoMessage() {}

func (x *OtherInfo) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherInfo.ProtoReflect.Descriptor instead.
func (*OtherInfo) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{8}
}

func (x *OtherInfo) GetNodeTotal() int64 {
	if x != nil {
		return x.NodeTotal
	}
	return 0
}

func (x *OtherInfo) GetCpuTotal() int64 {
	if x != nil {
		return x.CpuTotal
	}
	return 0
}

func (x *OtherInfo) GetMemoryTotal() int64 {
	if x != nil {
		return x.MemoryTotal
	}
	return 0
}

func (x *OtherInfo) GetPodTotal() int64 {
	if x != nil {
		return x.PodTotal
	}
	return 0
}

type GetOnecClusterByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      *OnecCluster `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` //onecCluster
	OtherInfo *OtherInfo   `protobuf:"bytes,2,opt,name=otherInfo,proto3" json:"otherInfo,omitempty"`
}

func (x *GetOnecClusterByIdResp) Reset() {
	*x = GetOnecClusterByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnecClusterByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnecClusterByIdResp) ProtoMessage() {}

func (x *GetOnecClusterByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnecClusterByIdResp.ProtoReflect.Descriptor instead.
func (*GetOnecClusterByIdResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{9}
}

func (x *GetOnecClusterByIdResp) GetData() *OnecCluster {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetOnecClusterByIdResp) GetOtherInfo() *OtherInfo {
	if x != nil {
		return x.OtherInfo
	}
	return nil
}

type SearchOnecClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64              `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                                     //page
	PageSize uint64              `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`                             //pageSize
	OrderStr string              `protobuf:"bytes,3,opt,name=orderStr,proto3" json:"orderStr,omitempty"`                              //orderStr
	IsAsc    bool                `protobuf:"varint,4,opt,name=isAsc,proto3" json:"isAsc,omitempty"`                                   //isAsc
	Name     string              `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                      //集群名称
	Host     string              `protobuf:"bytes,7,opt,name=host,proto3" json:"host,omitempty"`                                      //集群主机地址
	EnvTag   int64               `protobuf:"varint,8,opt,name=envTag,proto3" json:"envTag,omitempty"`                                 //访问集群的令牌
	ConnType OnecClusterConnType `protobuf:"varint,9,opt,name=connType,proto3,enum=pb.OnecClusterConnType" json:"connType,omitempty"` //连接类型
	Version  string              `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`                               //集群版本
	Platform string              `protobuf:"bytes,11,opt,name=platform,proto3" json:"platform,omitempty"`                             //集群平台
	CreateBy string              `protobuf:"bytes,12,opt,name=createBy,proto3" json:"createBy,omitempty"`                             //记录创建人
	UpdateBy string              `protobuf:"bytes,13,opt,name=updateBy,proto3" json:"updateBy,omitempty"`                             //记录更新人
}

func (x *SearchOnecClusterReq) Reset() {
	*x = SearchOnecClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecClusterReq) ProtoMessage() {}

func (x *SearchOnecClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecClusterReq.ProtoReflect.Descriptor instead.
func (*SearchOnecClusterReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{10}
}

func (x *SearchOnecClusterReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchOnecClusterReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchOnecClusterReq) GetOrderStr() string {
	if x != nil {
		return x.OrderStr
	}
	return ""
}

func (x *SearchOnecClusterReq) GetIsAsc() bool {
	if x != nil {
		return x.IsAsc
	}
	return false
}

func (x *SearchOnecClusterReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchOnecClusterReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SearchOnecClusterReq) GetEnvTag() int64 {
	if x != nil {
		return x.EnvTag
	}
	return 0
}

func (x *SearchOnecClusterReq) GetConnType() OnecClusterConnType {
	if x != nil {
		return x.ConnType
	}
	return OnecClusterConnType_KUBECONFIG
}

func (x *SearchOnecClusterReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SearchOnecClusterReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *SearchOnecClusterReq) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *SearchOnecClusterReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type SearchOnecClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*OnecCluster `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`    //onecCluster
	Total uint64         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //total
}

func (x *SearchOnecClusterResp) Reset() {
	*x = SearchOnecClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecClusterResp) ProtoMessage() {}

func (x *SearchOnecClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecClusterResp.ProtoReflect.Descriptor instead.
func (*SearchOnecClusterResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{11}
}

func (x *SearchOnecClusterResp) GetData() []*OnecCluster {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SearchOnecClusterResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 同步集群信息
type SyncOnecClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //集群唯一标识符
	UpdateBy string `protobuf:"bytes,2,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
}

func (x *SyncOnecClusterReq) Reset() {
	*x = SyncOnecClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncOnecClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncOnecClusterReq) ProtoMessage() {}

func (x *SyncOnecClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncOnecClusterReq.ProtoReflect.Descriptor instead.
func (*SyncOnecClusterReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{12}
}

func (x *SyncOnecClusterReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SyncOnecClusterReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type SyncOnecClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SyncOnecClusterResp) Reset() {
	*x = SyncOnecClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncOnecClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncOnecClusterResp) ProtoMessage() {}

func (x *SyncOnecClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncOnecClusterResp.ProtoReflect.Descriptor instead.
func (*SyncOnecClusterResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{13}
}

// 集群添加节点
type AddOnecNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"` //所属集群ID
	NodeName  string `protobuf:"bytes,2,opt,name=nodeName,proto3" json:"nodeName,omitempty"`   //节点名称，在同一集群中唯一
	Ipaddr    string `protobuf:"bytes,3,opt,name=ipaddr,proto3" json:"ipaddr,omitempty"`       //节点UID，唯一标识
	User      string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`           //节点状态
	Password  string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`   //节点角色列表
}

func (x *AddOnecNodeReq) Reset() {
	*x = AddOnecNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecNodeReq) ProtoMessage() {}

func (x *AddOnecNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecNodeReq.ProtoReflect.Descriptor instead.
func (*AddOnecNodeReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{14}
}

func (x *AddOnecNodeReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddOnecNodeReq) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *AddOnecNodeReq) GetIpaddr() string {
	if x != nil {
		return x.Ipaddr
	}
	return ""
}

func (x *AddOnecNodeReq) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AddOnecNodeReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AddOnecNodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddOnecNodeResp) Reset() {
	*x = AddOnecNodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecNodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecNodeResp) ProtoMessage() {}

func (x *AddOnecNodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecNodeResp.ProtoReflect.Descriptor instead.
func (*AddOnecNodeResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{15}
}

// --------------------------------节点表，用于管理各集群中的节点信息--------------------------------
type OnecNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                         //节点唯一标识符
	ClusterId        string `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`           //所属集群ID
	NodeName         string `protobuf:"bytes,3,opt,name=nodeName,proto3" json:"nodeName,omitempty"`             //节点名称，在同一集群中唯一
	NodeUid          string `protobuf:"bytes,4,opt,name=nodeUid,proto3" json:"nodeUid,omitempty"`               //节点UID，唯一标识
	Status           string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`                 //节点状态
	Roles            string `protobuf:"bytes,6,opt,name=roles,proto3" json:"roles,omitempty"`                   //节点角色列表
	JoinTime         int64  `protobuf:"varint,7,opt,name=joinTime,proto3" json:"joinTime,omitempty"`            //节点加入集群时间
	Labels           string `protobuf:"bytes,8,opt,name=labels,proto3" json:"labels,omitempty"`                 //节点标签，键值对形式
	Annotations      string `protobuf:"bytes,9,opt,name=annotations,proto3" json:"annotations,omitempty"`       //节点注解，键值对形式
	PodCidr          string `protobuf:"bytes,10,opt,name=podCidr,proto3" json:"podCidr,omitempty"`              //Pod CIDR
	Unschedulable    int64  `protobuf:"varint,11,opt,name=unschedulable,proto3" json:"unschedulable,omitempty"` //节点是否不可调度（0：可调度，1：不可调度）
	Taints           string `protobuf:"bytes,12,opt,name=taints,proto3" json:"taints,omitempty"`                //节点污点列表
	NodeIp           string `protobuf:"bytes,13,opt,name=nodeIp,proto3" json:"nodeIp,omitempty"`                //节点地址
	Os               string `protobuf:"bytes,14,opt,name=os,proto3" json:"os,omitempty"`                        //操作系统
	Cpu              int64  `protobuf:"varint,15,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory           int64  `protobuf:"varint,16,opt,name=memory,proto3" json:"memory,omitempty"`
	MaxPods          string `protobuf:"bytes,17,opt,name=maxPods,proto3" json:"maxPods,omitempty"`
	KernelVersion    string `protobuf:"bytes,18,opt,name=kernelVersion,proto3" json:"kernelVersion,omitempty"`       //内核版本
	ContainerRuntime string `protobuf:"bytes,19,opt,name=containerRuntime,proto3" json:"containerRuntime,omitempty"` //容器运行时
	KubeletVersion   string `protobuf:"bytes,20,opt,name=kubeletVersion,proto3" json:"kubeletVersion,omitempty"`     //Kubelet版本
	KubeletPort      int64  `protobuf:"varint,21,opt,name=kubeletPort,proto3" json:"kubeletPort,omitempty"`          //Kubelet端口号
	OperatingSystem  string `protobuf:"bytes,22,opt,name=operatingSystem,proto3" json:"operatingSystem,omitempty"`   //操作系统类型
	Architecture     string `protobuf:"bytes,23,opt,name=architecture,proto3" json:"architecture,omitempty"`         //架构类型
	CreateBy         string `protobuf:"bytes,24,opt,name=createBy,proto3" json:"createBy,omitempty"`                 //记录创建人
	UpdateBy         string `protobuf:"bytes,25,opt,name=updateBy,proto3" json:"updateBy,omitempty"`                 //记录更新人
	CreateTime       int64  `protobuf:"varint,26,opt,name=createTime,proto3" json:"createTime,omitempty"`            //记录创建时间
	UpdateTime       int64  `protobuf:"varint,27,opt,name=updateTime,proto3" json:"updateTime,omitempty"`            //记录更新时间
}

func (x *OnecNode) Reset() {
	*x = OnecNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnecNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnecNode) ProtoMessage() {}

func (x *OnecNode) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnecNode.ProtoReflect.Descriptor instead.
func (*OnecNode) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{16}
}

func (x *OnecNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OnecNode) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *OnecNode) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *OnecNode) GetNodeUid() string {
	if x != nil {
		return x.NodeUid
	}
	return ""
}

func (x *OnecNode) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OnecNode) GetRoles() string {
	if x != nil {
		return x.Roles
	}
	return ""
}

func (x *OnecNode) GetJoinTime() int64 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *OnecNode) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *OnecNode) GetAnnotations() string {
	if x != nil {
		return x.Annotations
	}
	return ""
}

func (x *OnecNode) GetPodCidr() string {
	if x != nil {
		return x.PodCidr
	}
	return ""
}

func (x *OnecNode) GetUnschedulable() int64 {
	if x != nil {
		return x.Unschedulable
	}
	return 0
}

func (x *OnecNode) GetTaints() string {
	if x != nil {
		return x.Taints
	}
	return ""
}

func (x *OnecNode) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

func (x *OnecNode) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *OnecNode) GetCpu() int64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *OnecNode) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *OnecNode) GetMaxPods() string {
	if x != nil {
		return x.MaxPods
	}
	return ""
}

func (x *OnecNode) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *OnecNode) GetContainerRuntime() string {
	if x != nil {
		return x.ContainerRuntime
	}
	return ""
}

func (x *OnecNode) GetKubeletVersion() string {
	if x != nil {
		return x.KubeletVersion
	}
	return ""
}

func (x *OnecNode) GetKubeletPort() int64 {
	if x != nil {
		return x.KubeletPort
	}
	return 0
}

func (x *OnecNode) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *OnecNode) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *OnecNode) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *OnecNode) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *OnecNode) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *OnecNode) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type DelOnecNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //id
}

func (x *DelOnecNodeReq) Reset() {
	*x = DelOnecNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecNodeReq) ProtoMessage() {}

func (x *DelOnecNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecNodeReq.ProtoReflect.Descriptor instead.
func (*DelOnecNodeReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{17}
}

func (x *DelOnecNodeReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DelOnecNodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelOnecNodeResp) Reset() {
	*x = DelOnecNodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecNodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecNodeResp) ProtoMessage() {}

func (x *DelOnecNodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecNodeResp.ProtoReflect.Descriptor instead.
func (*DelOnecNodeResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{18}
}

type GetOnecNodeByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //id
}

func (x *GetOnecNodeByIdReq) Reset() {
	*x = GetOnecNodeByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnecNodeByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnecNodeByIdReq) ProtoMessage() {}

func (x *GetOnecNodeByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnecNodeByIdReq.ProtoReflect.Descriptor instead.
func (*GetOnecNodeByIdReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{19}
}

func (x *GetOnecNodeByIdReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetOnecNodeByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *OnecNode `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` //onecNode
}

func (x *GetOnecNodeByIdResp) Reset() {
	*x = GetOnecNodeByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnecNodeByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnecNodeByIdResp) ProtoMessage() {}

func (x *GetOnecNodeByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnecNodeByIdResp.ProtoReflect.Descriptor instead.
func (*GetOnecNodeByIdResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{20}
}

func (x *GetOnecNodeByIdResp) GetData() *OnecNode {
	if x != nil {
		return x.Data
	}
	return nil
}

type SearchOnecNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page             uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                         //page
	PageSize         uint64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`                 //pageSize
	OrderStr         string `protobuf:"bytes,3,opt,name=orderStr,proto3" json:"orderStr,omitempty"`                  //orderStr
	IsAsc            bool   `protobuf:"varint,4,opt,name=isAsc,proto3" json:"isAsc,omitempty"`                       //isAsc
	ClusterId        string `protobuf:"bytes,5,opt,name=clusterId,proto3" json:"clusterId,omitempty"`                //所属集群ID
	NodeName         string `protobuf:"bytes,6,opt,name=nodeName,proto3" json:"nodeName,omitempty"`                  //节点名称，在同一集群中唯一
	NodeUid          string `protobuf:"bytes,7,opt,name=nodeUid,proto3" json:"nodeUid,omitempty"`                    //节点UID，唯一标识
	Status           string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`                      //节点状态
	Roles            string `protobuf:"bytes,9,opt,name=roles,proto3" json:"roles,omitempty"`                        //节点角色列表
	JoinTime         int64  `protobuf:"varint,10,opt,name=joinTime,proto3" json:"joinTime,omitempty"`                //节点加入集群时间
	Labels           string `protobuf:"bytes,11,opt,name=labels,proto3" json:"labels,omitempty"`                     //节点标签，键值对形式
	Annotations      string `protobuf:"bytes,12,opt,name=annotations,proto3" json:"annotations,omitempty"`           //节点注解，键值对形式
	PodCidr          string `protobuf:"bytes,13,opt,name=podCidr,proto3" json:"podCidr,omitempty"`                   //Pod CIDR
	Unschedulable    int64  `protobuf:"varint,14,opt,name=unschedulable,proto3" json:"unschedulable,omitempty"`      //节点是否不可调度（0：可调度，1：不可调度）
	Taints           string `protobuf:"bytes,15,opt,name=taints,proto3" json:"taints,omitempty"`                     //节点污点列表
	NodeIp           string `protobuf:"bytes,16,opt,name=nodeIp,proto3" json:"nodeIp,omitempty"`                     //节点地址
	Os               string `protobuf:"bytes,17,opt,name=os,proto3" json:"os,omitempty"`                             //操作系统
	KernelVersion    string `protobuf:"bytes,18,opt,name=kernelVersion,proto3" json:"kernelVersion,omitempty"`       //内核版本
	ContainerRuntime string `protobuf:"bytes,19,opt,name=containerRuntime,proto3" json:"containerRuntime,omitempty"` //容器运行时
	KubeletVersion   string `protobuf:"bytes,20,opt,name=kubeletVersion,proto3" json:"kubeletVersion,omitempty"`     //Kubelet版本
	KubeletPort      int64  `protobuf:"varint,21,opt,name=kubeletPort,proto3" json:"kubeletPort,omitempty"`          //Kubelet端口号
	OperatingSystem  string `protobuf:"bytes,22,opt,name=operatingSystem,proto3" json:"operatingSystem,omitempty"`   //操作系统类型
	Architecture     string `protobuf:"bytes,23,opt,name=architecture,proto3" json:"architecture,omitempty"`         //架构类型
	CreateBy         string `protobuf:"bytes,24,opt,name=createBy,proto3" json:"createBy,omitempty"`                 //记录创建人
	UpdateBy         string `protobuf:"bytes,25,opt,name=updateBy,proto3" json:"updateBy,omitempty"`                 //记录更新人
}

func (x *SearchOnecNodeReq) Reset() {
	*x = SearchOnecNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecNodeReq) ProtoMessage() {}

func (x *SearchOnecNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecNodeReq.ProtoReflect.Descriptor instead.
func (*SearchOnecNodeReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{21}
}

func (x *SearchOnecNodeReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchOnecNodeReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchOnecNodeReq) GetOrderStr() string {
	if x != nil {
		return x.OrderStr
	}
	return ""
}

func (x *SearchOnecNodeReq) GetIsAsc() bool {
	if x != nil {
		return x.IsAsc
	}
	return false
}

func (x *SearchOnecNodeReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *SearchOnecNodeReq) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *SearchOnecNodeReq) GetNodeUid() string {
	if x != nil {
		return x.NodeUid
	}
	return ""
}

func (x *SearchOnecNodeReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SearchOnecNodeReq) GetRoles() string {
	if x != nil {
		return x.Roles
	}
	return ""
}

func (x *SearchOnecNodeReq) GetJoinTime() int64 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *SearchOnecNodeReq) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *SearchOnecNodeReq) GetAnnotations() string {
	if x != nil {
		return x.Annotations
	}
	return ""
}

func (x *SearchOnecNodeReq) GetPodCidr() string {
	if x != nil {
		return x.PodCidr
	}
	return ""
}

func (x *SearchOnecNodeReq) GetUnschedulable() int64 {
	if x != nil {
		return x.Unschedulable
	}
	return 0
}

func (x *SearchOnecNodeReq) GetTaints() string {
	if x != nil {
		return x.Taints
	}
	return ""
}

func (x *SearchOnecNodeReq) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

func (x *SearchOnecNodeReq) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *SearchOnecNodeReq) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *SearchOnecNodeReq) GetContainerRuntime() string {
	if x != nil {
		return x.ContainerRuntime
	}
	return ""
}

func (x *SearchOnecNodeReq) GetKubeletVersion() string {
	if x != nil {
		return x.KubeletVersion
	}
	return ""
}

func (x *SearchOnecNodeReq) GetKubeletPort() int64 {
	if x != nil {
		return x.KubeletPort
	}
	return 0
}

func (x *SearchOnecNodeReq) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *SearchOnecNodeReq) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *SearchOnecNodeReq) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *SearchOnecNodeReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type SearchOnecNodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*OnecNode `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`    //onecNode
	Total uint64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //total
}

func (x *SearchOnecNodeResp) Reset() {
	*x = SearchOnecNodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecNodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecNodeResp) ProtoMessage() {}

func (x *SearchOnecNodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecNodeResp.ProtoReflect.Descriptor instead.
func (*SearchOnecNodeResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{22}
}

func (x *SearchOnecNodeResp) GetData() []*OnecNode {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SearchOnecNodeResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 同步节点信息
type SyncOnecNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"` //所属集群ID
	NodeName  string `protobuf:"bytes,2,opt,name=nodeName,proto3" json:"nodeName,omitempty"`   //节点名称，在同一集群中唯一
	UpdateBy  string `protobuf:"bytes,3,opt,name=UpdateBy,proto3" json:"UpdateBy,omitempty"`
}

func (x *SyncOnecNodeReq) Reset() {
	*x = SyncOnecNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncOnecNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncOnecNodeReq) ProtoMessage() {}

func (x *SyncOnecNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncOnecNodeReq.ProtoReflect.Descriptor instead.
func (*SyncOnecNodeReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{23}
}

func (x *SyncOnecNodeReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *SyncOnecNodeReq) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *SyncOnecNodeReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type SyncOnecNodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SyncOnecNodeResp) Reset() {
	*x = SyncOnecNodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncOnecNodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncOnecNodeResp) ProtoMessage() {}

func (x *SyncOnecNodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncOnecNodeResp.ProtoReflect.Descriptor instead.
func (*SyncOnecNodeResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{24}
}

// 增加标签
type AddOnecNodeLabelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`               //id
	ClusterId string `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"` //所属集群ID
	Key       string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`             //标签键
	Value     string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`         //标签值
}

func (x *AddOnecNodeLabelReq) Reset() {
	*x = AddOnecNodeLabelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecNodeLabelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecNodeLabelReq) ProtoMessage() {}

func (x *AddOnecNodeLabelReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecNodeLabelReq.ProtoReflect.Descriptor instead.
func (*AddOnecNodeLabelReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{25}
}

func (x *AddOnecNodeLabelReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddOnecNodeLabelReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddOnecNodeLabelReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AddOnecNodeLabelReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type AddOnecNodeLabelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddOnecNodeLabelResp) Reset() {
	*x = AddOnecNodeLabelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecNodeLabelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecNodeLabelResp) ProtoMessage() {}

func (x *AddOnecNodeLabelResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecNodeLabelResp.ProtoReflect.Descriptor instead.
func (*AddOnecNodeLabelResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{26}
}

// 删除标签
type DelOnecNodeLabelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`               //id
	ClusterId string `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"` //所属集群ID
	Key       string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`             //标签键
}

func (x *DelOnecNodeLabelReq) Reset() {
	*x = DelOnecNodeLabelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecNodeLabelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecNodeLabelReq) ProtoMessage() {}

func (x *DelOnecNodeLabelReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecNodeLabelReq.ProtoReflect.Descriptor instead.
func (*DelOnecNodeLabelReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{27}
}

func (x *DelOnecNodeLabelReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DelOnecNodeLabelReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DelOnecNodeLabelReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type DelOnecNodeLabelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelOnecNodeLabelResp) Reset() {
	*x = DelOnecNodeLabelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecNodeLabelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecNodeLabelResp) ProtoMessage() {}

func (x *DelOnecNodeLabelResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecNodeLabelResp.ProtoReflect.Descriptor instead.
func (*DelOnecNodeLabelResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{28}
}

// 添加注解
type AddOnecNodeAnnotationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`               //id
	ClusterId string `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"` //所属集群ID
	Key       string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`             //注解键
	Value     string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`         //注解值
}

func (x *AddOnecNodeAnnotationReq) Reset() {
	*x = AddOnecNodeAnnotationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecNodeAnnotationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecNodeAnnotationReq) ProtoMessage() {}

func (x *AddOnecNodeAnnotationReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecNodeAnnotationReq.ProtoReflect.Descriptor instead.
func (*AddOnecNodeAnnotationReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{29}
}

func (x *AddOnecNodeAnnotationReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddOnecNodeAnnotationReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddOnecNodeAnnotationReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AddOnecNodeAnnotationReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type AddOnecNodeAnnotationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddOnecNodeAnnotationResp) Reset() {
	*x = AddOnecNodeAnnotationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecNodeAnnotationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecNodeAnnotationResp) ProtoMessage() {}

func (x *AddOnecNodeAnnotationResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecNodeAnnotationResp.ProtoReflect.Descriptor instead.
func (*AddOnecNodeAnnotationResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{30}
}

// 删除注解
type DelOnecNodeAnnotationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`               //id
	ClusterId string `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"` //所属集群ID
	Key       string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`             //注解键
}

func (x *DelOnecNodeAnnotationReq) Reset() {
	*x = DelOnecNodeAnnotationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecNodeAnnotationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecNodeAnnotationReq) ProtoMessage() {}

func (x *DelOnecNodeAnnotationReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecNodeAnnotationReq.ProtoReflect.Descriptor instead.
func (*DelOnecNodeAnnotationReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{31}
}

func (x *DelOnecNodeAnnotationReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DelOnecNodeAnnotationReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DelOnecNodeAnnotationReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type DelOnecNodeAnnotationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelOnecNodeAnnotationResp) Reset() {
	*x = DelOnecNodeAnnotationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecNodeAnnotationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecNodeAnnotationResp) ProtoMessage() {}

func (x *DelOnecNodeAnnotationResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecNodeAnnotationResp.ProtoReflect.Descriptor instead.
func (*DelOnecNodeAnnotationResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{32}
}

// 禁止调度
type ForbidOnecNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`               //id
	ClusterId string `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"` //所属集群ID
	NodeName  string `protobuf:"bytes,3,opt,name=nodeName,proto3" json:"nodeName,omitempty"`   //节点名称，在同一集群中唯一
}

func (x *ForbidOnecNodeReq) Reset() {
	*x = ForbidOnecNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForbidOnecNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForbidOnecNodeReq) ProtoMessage() {}

func (x *ForbidOnecNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForbidOnecNodeReq.ProtoReflect.Descriptor instead.
func (*ForbidOnecNodeReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{33}
}

func (x *ForbidOnecNodeReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ForbidOnecNodeReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ForbidOnecNodeReq) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

type ForbidOnecNodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ForbidOnecNodeResp) Reset() {
	*x = ForbidOnecNodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForbidOnecNodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForbidOnecNodeResp) ProtoMessage() {}

func (x *ForbidOnecNodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForbidOnecNodeResp.ProtoReflect.Descriptor instead.
func (*ForbidOnecNodeResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{34}
}

// 添加污点
type AddOnecNodeTaintReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`               //id
	ClusterId string `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"` //所属集群ID
	Key       string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`             //污点键
	Value     string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`         //污点值
	Effect    string `protobuf:"bytes,5,opt,name=effect,proto3" json:"effect,omitempty"`       //污点效果
}

func (x *AddOnecNodeTaintReq) Reset() {
	*x = AddOnecNodeTaintReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecNodeTaintReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecNodeTaintReq) ProtoMessage() {}

func (x *AddOnecNodeTaintReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecNodeTaintReq.ProtoReflect.Descriptor instead.
func (*AddOnecNodeTaintReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{35}
}

func (x *AddOnecNodeTaintReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddOnecNodeTaintReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddOnecNodeTaintReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AddOnecNodeTaintReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AddOnecNodeTaintReq) GetEffect() string {
	if x != nil {
		return x.Effect
	}
	return ""
}

type AddOnecNodeTaintResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddOnecNodeTaintResp) Reset() {
	*x = AddOnecNodeTaintResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecNodeTaintResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecNodeTaintResp) ProtoMessage() {}

func (x *AddOnecNodeTaintResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecNodeTaintResp.ProtoReflect.Descriptor instead.
func (*AddOnecNodeTaintResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{36}
}

// 删除污点
type DelOnecNodeTaintReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`               //id
	ClusterId string `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"` //所属集群ID
	Key       string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`             //污点键
}

func (x *DelOnecNodeTaintReq) Reset() {
	*x = DelOnecNodeTaintReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecNodeTaintReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecNodeTaintReq) ProtoMessage() {}

func (x *DelOnecNodeTaintReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecNodeTaintReq.ProtoReflect.Descriptor instead.
func (*DelOnecNodeTaintReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{37}
}

func (x *DelOnecNodeTaintReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DelOnecNodeTaintReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DelOnecNodeTaintReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type DelOnecNodeTaintResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelOnecNodeTaintResp) Reset() {
	*x = DelOnecNodeTaintResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecNodeTaintResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecNodeTaintResp) ProtoMessage() {}

func (x *DelOnecNodeTaintResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecNodeTaintResp.ProtoReflect.Descriptor instead.
func (*DelOnecNodeTaintResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{38}
}

// 取消禁止调度
type CancelForbidOnecNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`               //id
	ClusterId string `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"` //所属集群ID
	NodeName  string `protobuf:"bytes,3,opt,name=nodeName,proto3" json:"nodeName,omitempty"`   //节点名称，在同一集群中唯一
}

func (x *CancelForbidOnecNodeReq) Reset() {
	*x = CancelForbidOnecNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelForbidOnecNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelForbidOnecNodeReq) ProtoMessage() {}

func (x *CancelForbidOnecNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelForbidOnecNodeReq.ProtoReflect.Descriptor instead.
func (*CancelForbidOnecNodeReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{39}
}

func (x *CancelForbidOnecNodeReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CancelForbidOnecNodeReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CancelForbidOnecNodeReq) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

type CancelForbidOnecNodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelForbidOnecNodeResp) Reset() {
	*x = CancelForbidOnecNodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelForbidOnecNodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelForbidOnecNodeResp) ProtoMessage() {}

func (x *CancelForbidOnecNodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelForbidOnecNodeResp.ProtoReflect.Descriptor instead.
func (*CancelForbidOnecNodeResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{40}
}

var File_manager_proto protoreflect.FileDescriptor

var file_manager_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x22, 0x90, 0x04, 0x0a, 0x0b, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x49,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x6b, 0x69, 0x70, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x6e, 0x76, 0x54, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x6e, 0x76, 0x54, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x33, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9c, 0x02, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x4f, 0x6e,
	0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x33,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x76, 0x54, 0x61, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x6e, 0x76, 0x54, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x93, 0x02, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70,
	0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x6e,
	0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x76, 0x54, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x6e, 0x76,
	0x54, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x83,
	0x01, 0x0a, 0x09, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70,
	0x75, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x70,
	0x75, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x6a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x62, 0x2e, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xdb, 0x02, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x76, 0x54, 0x61, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x6e, 0x76, 0x54, 0x61, 0x67, 0x12, 0x33, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x52,
	0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x65, 0x63, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x40, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x65, 0x63,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x92, 0x01, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x70, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x11, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x98, 0x06, 0x0a, 0x08, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x55, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x43,
	0x69, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x43, 0x69,
	0x64, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x6e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x64, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6b, 0x75, 0x62,
	0x65, 0x6c, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x20,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x11, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f,
	0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x20, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xef, 0x05, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65,
	0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x43, 0x69, 0x64, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x43, 0x69, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x75,
	0x62, 0x65, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x22, 0x4c, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e,
	0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x6e,
	0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x67, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x12, 0x0a, 0x10, 0x53,
	0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x6b, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x16, 0x0a, 0x14,
	0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x55, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e,
	0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x16, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x70, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x5a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x1b,
	0x0a, 0x19, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5d, 0x0a, 0x11, 0x46,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x46, 0x6f,
	0x72, 0x62, 0x69, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x83, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65,
	0x63, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x55,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x63, 0x0a,
	0x17, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x4f, 0x6e, 0x65,
	0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2a, 0x46,
	0x0a, 0x13, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x55, 0x42, 0x45, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x32, 0xf3, 0x03, 0x0a, 0x12, 0x4f, 0x6e, 0x65, 0x63, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a,
	0x0e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x15, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f,
	0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x4f,
	0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x42, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x65,
	0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64,
	0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x32, 0xe5, 0x06, 0x0a,
	0x0f, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x36, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f,
	0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63,
	0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x15,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a,
	0x10, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f,
	0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e,
	0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e,
	0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f,
	0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x15, 0x41,
	0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65,
	0x63, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x54, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x4f, 0x6e, 0x65, 0x63,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x4f,
	0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x10, 0x41,
	0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x12,
	0x17, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64,
	0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x45, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4f,
	0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x53, 0x79, 0x6e,
	0x63, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x73, 0x68, 0x69, 0x63, 0x68, 0x65, 0x6e, 0x67, 0x2f, 0x6b,
	0x75, 0x62, 0x65, 0x2d, 0x6f, 0x6e, 0x65, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x72, 0x70, 0x63,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_manager_proto_rawDescOnce sync.Once
	file_manager_proto_rawDescData = file_manager_proto_rawDesc
)

func file_manager_proto_rawDescGZIP() []byte {
	file_manager_proto_rawDescOnce.Do(func() {
		file_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_manager_proto_rawDescData)
	})
	return file_manager_proto_rawDescData
}

var file_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_manager_proto_goTypes = []any{
	(OnecClusterConnType)(0),          // 0: pb.OnecClusterConnType
	(*OnecCluster)(nil),               // 1: pb.OnecCluster
	(*AddOnecClusterReq)(nil),         // 2: pb.AddOnecClusterReq
	(*AddOnecClusterResp)(nil),        // 3: pb.AddOnecClusterResp
	(*UpdateOnecClusterReq)(nil),      // 4: pb.UpdateOnecClusterReq
	(*UpdateOnecClusterResp)(nil),     // 5: pb.UpdateOnecClusterResp
	(*DelOnecClusterReq)(nil),         // 6: pb.DelOnecClusterReq
	(*DelOnecClusterResp)(nil),        // 7: pb.DelOnecClusterResp
	(*GetOnecClusterByIdReq)(nil),     // 8: pb.GetOnecClusterByIdReq
	(*OtherInfo)(nil),                 // 9: pb.OtherInfo
	(*GetOnecClusterByIdResp)(nil),    // 10: pb.GetOnecClusterByIdResp
	(*SearchOnecClusterReq)(nil),      // 11: pb.SearchOnecClusterReq
	(*SearchOnecClusterResp)(nil),     // 12: pb.SearchOnecClusterResp
	(*SyncOnecClusterReq)(nil),        // 13: pb.SyncOnecClusterReq
	(*SyncOnecClusterResp)(nil),       // 14: pb.SyncOnecClusterResp
	(*AddOnecNodeReq)(nil),            // 15: pb.AddOnecNodeReq
	(*AddOnecNodeResp)(nil),           // 16: pb.AddOnecNodeResp
	(*OnecNode)(nil),                  // 17: pb.OnecNode
	(*DelOnecNodeReq)(nil),            // 18: pb.DelOnecNodeReq
	(*DelOnecNodeResp)(nil),           // 19: pb.DelOnecNodeResp
	(*GetOnecNodeByIdReq)(nil),        // 20: pb.GetOnecNodeByIdReq
	(*GetOnecNodeByIdResp)(nil),       // 21: pb.GetOnecNodeByIdResp
	(*SearchOnecNodeReq)(nil),         // 22: pb.SearchOnecNodeReq
	(*SearchOnecNodeResp)(nil),        // 23: pb.SearchOnecNodeResp
	(*SyncOnecNodeReq)(nil),           // 24: pb.SyncOnecNodeReq
	(*SyncOnecNodeResp)(nil),          // 25: pb.SyncOnecNodeResp
	(*AddOnecNodeLabelReq)(nil),       // 26: pb.AddOnecNodeLabelReq
	(*AddOnecNodeLabelResp)(nil),      // 27: pb.AddOnecNodeLabelResp
	(*DelOnecNodeLabelReq)(nil),       // 28: pb.DelOnecNodeLabelReq
	(*DelOnecNodeLabelResp)(nil),      // 29: pb.DelOnecNodeLabelResp
	(*AddOnecNodeAnnotationReq)(nil),  // 30: pb.AddOnecNodeAnnotationReq
	(*AddOnecNodeAnnotationResp)(nil), // 31: pb.AddOnecNodeAnnotationResp
	(*DelOnecNodeAnnotationReq)(nil),  // 32: pb.DelOnecNodeAnnotationReq
	(*DelOnecNodeAnnotationResp)(nil), // 33: pb.DelOnecNodeAnnotationResp
	(*ForbidOnecNodeReq)(nil),         // 34: pb.ForbidOnecNodeReq
	(*ForbidOnecNodeResp)(nil),        // 35: pb.ForbidOnecNodeResp
	(*AddOnecNodeTaintReq)(nil),       // 36: pb.AddOnecNodeTaintReq
	(*AddOnecNodeTaintResp)(nil),      // 37: pb.AddOnecNodeTaintResp
	(*DelOnecNodeTaintReq)(nil),       // 38: pb.DelOnecNodeTaintReq
	(*DelOnecNodeTaintResp)(nil),      // 39: pb.DelOnecNodeTaintResp
	(*CancelForbidOnecNodeReq)(nil),   // 40: pb.CancelForbidOnecNodeReq
	(*CancelForbidOnecNodeResp)(nil),  // 41: pb.CancelForbidOnecNodeResp
}
var file_manager_proto_depIdxs = []int32{
	0,  // 0: pb.OnecCluster.connType:type_name -> pb.OnecClusterConnType
	0,  // 1: pb.AddOnecClusterReq.connType:type_name -> pb.OnecClusterConnType
	0,  // 2: pb.UpdateOnecClusterReq.connType:type_name -> pb.OnecClusterConnType
	1,  // 3: pb.GetOnecClusterByIdResp.data:type_name -> pb.OnecCluster
	9,  // 4: pb.GetOnecClusterByIdResp.otherInfo:type_name -> pb.OtherInfo
	0,  // 5: pb.SearchOnecClusterReq.connType:type_name -> pb.OnecClusterConnType
	1,  // 6: pb.SearchOnecClusterResp.data:type_name -> pb.OnecCluster
	17, // 7: pb.GetOnecNodeByIdResp.data:type_name -> pb.OnecNode
	17, // 8: pb.SearchOnecNodeResp.data:type_name -> pb.OnecNode
	2,  // 9: pb.OnecClusterService.AddOnecCluster:input_type -> pb.AddOnecClusterReq
	4,  // 10: pb.OnecClusterService.UpdateOnecCluster:input_type -> pb.UpdateOnecClusterReq
	6,  // 11: pb.OnecClusterService.DelOnecCluster:input_type -> pb.DelOnecClusterReq
	8,  // 12: pb.OnecClusterService.GetOnecClusterById:input_type -> pb.GetOnecClusterByIdReq
	11, // 13: pb.OnecClusterService.SearchOnecCluster:input_type -> pb.SearchOnecClusterReq
	13, // 14: pb.OnecClusterService.SyncOnecCluster:input_type -> pb.SyncOnecClusterReq
	15, // 15: pb.OnecClusterService.AddOnecNode:input_type -> pb.AddOnecNodeReq
	18, // 16: pb.OnecNodeService.DelOnecNode:input_type -> pb.DelOnecNodeReq
	20, // 17: pb.OnecNodeService.GetOnecNodeById:input_type -> pb.GetOnecNodeByIdReq
	22, // 18: pb.OnecNodeService.SearchOnecNode:input_type -> pb.SearchOnecNodeReq
	26, // 19: pb.OnecNodeService.AddOnecNodeLabel:input_type -> pb.AddOnecNodeLabelReq
	28, // 20: pb.OnecNodeService.DelOnecNodeLabel:input_type -> pb.DelOnecNodeLabelReq
	30, // 21: pb.OnecNodeService.AddOnecNodeAnnotation:input_type -> pb.AddOnecNodeAnnotationReq
	32, // 22: pb.OnecNodeService.DelOnecNodeAnnotation:input_type -> pb.DelOnecNodeAnnotationReq
	34, // 23: pb.OnecNodeService.ForbidOnecNode:input_type -> pb.ForbidOnecNodeReq
	40, // 24: pb.OnecNodeService.CancelForbidOnecNode:input_type -> pb.CancelForbidOnecNodeReq
	36, // 25: pb.OnecNodeService.AddOnecNodeTaint:input_type -> pb.AddOnecNodeTaintReq
	38, // 26: pb.OnecNodeService.DelOnecNodeTaint:input_type -> pb.DelOnecNodeTaintReq
	24, // 27: pb.OnecNodeService.SyncOnecNode:input_type -> pb.SyncOnecNodeReq
	3,  // 28: pb.OnecClusterService.AddOnecCluster:output_type -> pb.AddOnecClusterResp
	5,  // 29: pb.OnecClusterService.UpdateOnecCluster:output_type -> pb.UpdateOnecClusterResp
	7,  // 30: pb.OnecClusterService.DelOnecCluster:output_type -> pb.DelOnecClusterResp
	10, // 31: pb.OnecClusterService.GetOnecClusterById:output_type -> pb.GetOnecClusterByIdResp
	12, // 32: pb.OnecClusterService.SearchOnecCluster:output_type -> pb.SearchOnecClusterResp
	14, // 33: pb.OnecClusterService.SyncOnecCluster:output_type -> pb.SyncOnecClusterResp
	16, // 34: pb.OnecClusterService.AddOnecNode:output_type -> pb.AddOnecNodeResp
	19, // 35: pb.OnecNodeService.DelOnecNode:output_type -> pb.DelOnecNodeResp
	21, // 36: pb.OnecNodeService.GetOnecNodeById:output_type -> pb.GetOnecNodeByIdResp
	23, // 37: pb.OnecNodeService.SearchOnecNode:output_type -> pb.SearchOnecNodeResp
	27, // 38: pb.OnecNodeService.AddOnecNodeLabel:output_type -> pb.AddOnecNodeLabelResp
	29, // 39: pb.OnecNodeService.DelOnecNodeLabel:output_type -> pb.DelOnecNodeLabelResp
	31, // 40: pb.OnecNodeService.AddOnecNodeAnnotation:output_type -> pb.AddOnecNodeAnnotationResp
	33, // 41: pb.OnecNodeService.DelOnecNodeAnnotation:output_type -> pb.DelOnecNodeAnnotationResp
	35, // 42: pb.OnecNodeService.ForbidOnecNode:output_type -> pb.ForbidOnecNodeResp
	41, // 43: pb.OnecNodeService.CancelForbidOnecNode:output_type -> pb.CancelForbidOnecNodeResp
	37, // 44: pb.OnecNodeService.AddOnecNodeTaint:output_type -> pb.AddOnecNodeTaintResp
	39, // 45: pb.OnecNodeService.DelOnecNodeTaint:output_type -> pb.DelOnecNodeTaintResp
	25, // 46: pb.OnecNodeService.SyncOnecNode:output_type -> pb.SyncOnecNodeResp
	28, // [28:47] is the sub-list for method output_type
	9,  // [9:28] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_manager_proto_init() }
func file_manager_proto_init() {
	if File_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_manager_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*OnecCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateOnecClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateOnecClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetOnecClusterByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*OtherInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetOnecClusterByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SyncOnecClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SyncOnecClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecNodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*OnecNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecNodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*GetOnecNodeByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*GetOnecNodeByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecNodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*SyncOnecNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*SyncOnecNodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecNodeLabelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecNodeLabelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecNodeLabelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecNodeLabelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecNodeAnnotationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecNodeAnnotationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecNodeAnnotationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecNodeAnnotationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*ForbidOnecNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*ForbidOnecNodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecNodeTaintReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecNodeTaintResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecNodeTaintReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecNodeTaintResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*CancelForbidOnecNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*CancelForbidOnecNodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_manager_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_manager_proto_goTypes,
		DependencyIndexes: file_manager_proto_depIdxs,
		EnumInfos:         file_manager_proto_enumTypes,
		MessageInfos:      file_manager_proto_msgTypes,
	}.Build()
	File_manager_proto = out.File
	file_manager_proto_rawDesc = nil
	file_manager_proto_goTypes = nil
	file_manager_proto_depIdxs = nil
}
