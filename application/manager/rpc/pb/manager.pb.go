// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.19.4
// source: manager.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 连接类型
type OnecClusterconnCode int32

const (
	OnecClusterconnCode_KUBECONFIG OnecClusterconnCode = 0
	OnecClusterconnCode_TOKEN      OnecClusterconnCode = 1
	OnecClusterconnCode_AGENT      OnecClusterconnCode = 2
	OnecClusterconnCode_OTHER      OnecClusterconnCode = 3
)

// Enum value maps for OnecClusterconnCode.
var (
	OnecClusterconnCode_name = map[int32]string{
		0: "KUBECONFIG",
		1: "TOKEN",
		2: "AGENT",
		3: "OTHER",
	}
	OnecClusterconnCode_value = map[string]int32{
		"KUBECONFIG": 0,
		"TOKEN":      1,
		"AGENT":      2,
		"OTHER":      3,
	}
)

func (x OnecClusterconnCode) Enum() *OnecClusterconnCode {
	p := new(OnecClusterconnCode)
	*p = x
	return p
}

func (x OnecClusterconnCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnecClusterconnCode) Descriptor() protoreflect.EnumDescriptor {
	return file_manager_proto_enumTypes[0].Descriptor()
}

func (OnecClusterconnCode) Type() protoreflect.EnumType {
	return &file_manager_proto_enumTypes[0]
}

func (x OnecClusterconnCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnecClusterconnCode.Descriptor instead.
func (OnecClusterconnCode) EnumDescriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{0}
}

// --------------------------------集群表，用于管理多个 Kubernetes 集群--------------------------------
type OnecCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                              //自增主键
	Name             string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                           //集群名称
	Uuid             string  `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`                           //集群唯一标识
	SkipInsecure     int64   `protobuf:"varint,4,opt,name=skipInsecure,proto3" json:"skipInsecure,omitempty"`          //是否跳过不安全连接（0：否，1：是）
	Host             string  `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`                           //集群主机地址
	EnvName          string  `protobuf:"bytes,6,opt,name=envName,proto3" json:"envName,omitempty"`                     //访问集群的令牌
	ConnCode         string  `protobuf:"bytes,7,opt,name=connCode,proto3" json:"connCode,omitempty"`                   //连接类型
	EnvCode          string  `protobuf:"bytes,8,opt,name=envCode,proto3" json:"envCode,omitempty"`                     //集群环境标签 数据字典表
	Status           int64   `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                      //集群状态
	Version          string  `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`                    //集群版本
	Commit           string  `protobuf:"bytes,11,opt,name=commit,proto3" json:"commit,omitempty"`                      //集群提交版本
	Platform         string  `protobuf:"bytes,12,opt,name=platform,proto3" json:"platform,omitempty"`                  //集群平台
	VersionBuildAt   int64   `protobuf:"varint,13,opt,name=versionBuildAt,proto3" json:"versionBuildAt,omitempty"`     //版本构建时间
	ClusterCreatedAt int64   `protobuf:"varint,14,opt,name=clusterCreatedAt,proto3" json:"clusterCreatedAt,omitempty"` //集群创建时间
	NodeCount        int64   `protobuf:"varint,15,opt,name=nodeCount,proto3" json:"nodeCount,omitempty"`               //节点数量
	CpuTotal         int64   `protobuf:"varint,16,opt,name=cpuTotal,proto3" json:"cpuTotal,omitempty"`                 //总 CPU
	MemoryTotal      float64 `protobuf:"fixed64,17,opt,name=memoryTotal,proto3" json:"memoryTotal,omitempty"`          //总内存
	PodTotal         int64   `protobuf:"varint,18,opt,name=podTotal,proto3" json:"podTotal,omitempty"`                 //最大 Pod 数量
	CpuUsed          int64   `protobuf:"varint,19,opt,name=cpuUsed,proto3" json:"cpuUsed,omitempty"`                   //已使用的 CPU
	MemoryUsed       float64 `protobuf:"fixed64,20,opt,name=memoryUsed,proto3" json:"memoryUsed,omitempty"`            //已使用的内存
	PodUsed          int64   `protobuf:"varint,21,opt,name=podUsed,proto3" json:"podUsed,omitempty"`                   //已使用的 Pod 数量
	Location         string  `protobuf:"bytes,22,opt,name=location,proto3" json:"location,omitempty"`                  //集群所在地址
	NodeLbIp         string  `protobuf:"bytes,23,opt,name=nodeLbIp,proto3" json:"nodeLbIp,omitempty"`                  //Node 负载均衡 IP
	Description      string  `protobuf:"bytes,24,opt,name=description,proto3" json:"description,omitempty"`            //集群描述信息
	CreatedBy        string  `protobuf:"bytes,25,opt,name=createdBy,proto3" json:"createdBy,omitempty"`                //记录创建人
	UpdatedBy        string  `protobuf:"bytes,26,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`                //记录更新人
	CreatedAt        int64   `protobuf:"varint,27,opt,name=createdAt,proto3" json:"createdAt,omitempty"`               //记录创建时间
	UpdatedAt        int64   `protobuf:"varint,28,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`               //记录更新时间
	Token            string  `protobuf:"bytes,29,opt,name=token,proto3" json:"token,omitempty"`
	ConnName         string  `protobuf:"bytes,30,opt,name=connName,proto3" json:"connName,omitempty"`
}

func (x *OnecCluster) Reset() {
	*x = OnecCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnecCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnecCluster) ProtoMessage() {}

func (x *OnecCluster) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnecCluster.ProtoReflect.Descriptor instead.
func (*OnecCluster) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{0}
}

func (x *OnecCluster) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OnecCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OnecCluster) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *OnecCluster) GetSkipInsecure() int64 {
	if x != nil {
		return x.SkipInsecure
	}
	return 0
}

func (x *OnecCluster) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *OnecCluster) GetEnvName() string {
	if x != nil {
		return x.EnvName
	}
	return ""
}

func (x *OnecCluster) GetConnCode() string {
	if x != nil {
		return x.ConnCode
	}
	return ""
}

func (x *OnecCluster) GetEnvCode() string {
	if x != nil {
		return x.EnvCode
	}
	return ""
}

func (x *OnecCluster) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OnecCluster) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *OnecCluster) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *OnecCluster) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *OnecCluster) GetVersionBuildAt() int64 {
	if x != nil {
		return x.VersionBuildAt
	}
	return 0
}

func (x *OnecCluster) GetClusterCreatedAt() int64 {
	if x != nil {
		return x.ClusterCreatedAt
	}
	return 0
}

func (x *OnecCluster) GetNodeCount() int64 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *OnecCluster) GetCpuTotal() int64 {
	if x != nil {
		return x.CpuTotal
	}
	return 0
}

func (x *OnecCluster) GetMemoryTotal() float64 {
	if x != nil {
		return x.MemoryTotal
	}
	return 0
}

func (x *OnecCluster) GetPodTotal() int64 {
	if x != nil {
		return x.PodTotal
	}
	return 0
}

func (x *OnecCluster) GetCpuUsed() int64 {
	if x != nil {
		return x.CpuUsed
	}
	return 0
}

func (x *OnecCluster) GetMemoryUsed() float64 {
	if x != nil {
		return x.MemoryUsed
	}
	return 0
}

func (x *OnecCluster) GetPodUsed() int64 {
	if x != nil {
		return x.PodUsed
	}
	return 0
}

func (x *OnecCluster) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *OnecCluster) GetNodeLbIp() string {
	if x != nil {
		return x.NodeLbIp
	}
	return ""
}

func (x *OnecCluster) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OnecCluster) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *OnecCluster) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *OnecCluster) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *OnecCluster) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *OnecCluster) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *OnecCluster) GetConnName() string {
	if x != nil {
		return x.ConnName
	}
	return ""
}

type AddOnecClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                  //集群名称
	SkipInsecure int64  `protobuf:"varint,2,opt,name=skipInsecure,proto3" json:"skipInsecure,omitempty"` //是否跳过不安全连接（0：否，1：是）
	Host         string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`                  //集群主机地址
	Token        string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`                //访问集群的令牌
	ConnCode     string `protobuf:"bytes,5,opt,name=connCode,proto3" json:"connCode,omitempty"`          //连接类型
	EnvCode      string `protobuf:"bytes,6,opt,name=envCode,proto3" json:"envCode,omitempty"`            //集群环境标签 数据字典表
	Location     string `protobuf:"bytes,20,opt,name=location,proto3" json:"location,omitempty"`         //集群所在地址
	NodeLbIp     string `protobuf:"bytes,21,opt,name=nodeLbIp,proto3" json:"nodeLbIp,omitempty"`         //Node 负载均衡 IP
	Description  string `protobuf:"bytes,22,opt,name=description,proto3" json:"description,omitempty"`   //集群描述信息
	CreatedBy    string `protobuf:"bytes,23,opt,name=createdBy,proto3" json:"createdBy,omitempty"`       //记录创建人
	UpdatedBy    string `protobuf:"bytes,24,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`       //记录更新人
}

func (x *AddOnecClusterReq) Reset() {
	*x = AddOnecClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecClusterReq) ProtoMessage() {}

func (x *AddOnecClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecClusterReq.ProtoReflect.Descriptor instead.
func (*AddOnecClusterReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{1}
}

func (x *AddOnecClusterReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddOnecClusterReq) GetSkipInsecure() int64 {
	if x != nil {
		return x.SkipInsecure
	}
	return 0
}

func (x *AddOnecClusterReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *AddOnecClusterReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AddOnecClusterReq) GetConnCode() string {
	if x != nil {
		return x.ConnCode
	}
	return ""
}

func (x *AddOnecClusterReq) GetEnvCode() string {
	if x != nil {
		return x.EnvCode
	}
	return ""
}

func (x *AddOnecClusterReq) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *AddOnecClusterReq) GetNodeLbIp() string {
	if x != nil {
		return x.NodeLbIp
	}
	return ""
}

func (x *AddOnecClusterReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddOnecClusterReq) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *AddOnecClusterReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type AddOnecClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddOnecClusterResp) Reset() {
	*x = AddOnecClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecClusterResp) ProtoMessage() {}

func (x *AddOnecClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecClusterResp.ProtoReflect.Descriptor instead.
func (*AddOnecClusterResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{2}
}

type UpdateOnecClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                     //自增主键
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                  //集群名称
	SkipInsecure int64  `protobuf:"varint,3,opt,name=skipInsecure,proto3" json:"skipInsecure,omitempty"` //是否跳过不安全连接（0：否，1：是）
	Host         string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`                  //集群主机地址
	Token        string `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`                //访问集群的令牌
	ConnCode     string `protobuf:"bytes,6,opt,name=connCode,proto3" json:"connCode,omitempty"`          //连接类型
	EnvCode      string `protobuf:"bytes,7,opt,name=envCode,proto3" json:"envCode,omitempty"`            //集群环境标签 数据字典表
	Location     string `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`          //集群所在地址
	NodeLbIp     string `protobuf:"bytes,9,opt,name=nodeLbIp,proto3" json:"nodeLbIp,omitempty"`          //Node 负载均衡 IP
	Description  string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`   //集群描述信息
	UpdatedBy    string `protobuf:"bytes,11,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`       //记录更新人
}

func (x *UpdateOnecClusterReq) Reset() {
	*x = UpdateOnecClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOnecClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOnecClusterReq) ProtoMessage() {}

func (x *UpdateOnecClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOnecClusterReq.ProtoReflect.Descriptor instead.
func (*UpdateOnecClusterReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateOnecClusterReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOnecClusterReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOnecClusterReq) GetSkipInsecure() int64 {
	if x != nil {
		return x.SkipInsecure
	}
	return 0
}

func (x *UpdateOnecClusterReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *UpdateOnecClusterReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UpdateOnecClusterReq) GetConnCode() string {
	if x != nil {
		return x.ConnCode
	}
	return ""
}

func (x *UpdateOnecClusterReq) GetEnvCode() string {
	if x != nil {
		return x.EnvCode
	}
	return ""
}

func (x *UpdateOnecClusterReq) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UpdateOnecClusterReq) GetNodeLbIp() string {
	if x != nil {
		return x.NodeLbIp
	}
	return ""
}

func (x *UpdateOnecClusterReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateOnecClusterReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type UpdateOnecClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOnecClusterResp) Reset() {
	*x = UpdateOnecClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOnecClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOnecClusterResp) ProtoMessage() {}

func (x *UpdateOnecClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOnecClusterResp.ProtoReflect.Descriptor instead.
func (*UpdateOnecClusterResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{4}
}

type DelOnecClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
	UpdatedBy string `protobuf:"bytes,2,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
}

func (x *DelOnecClusterReq) Reset() {
	*x = DelOnecClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecClusterReq) ProtoMessage() {}

func (x *DelOnecClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecClusterReq.ProtoReflect.Descriptor instead.
func (*DelOnecClusterReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{5}
}

func (x *DelOnecClusterReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DelOnecClusterReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type DelOnecClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelOnecClusterResp) Reset() {
	*x = DelOnecClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecClusterResp) ProtoMessage() {}

func (x *DelOnecClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecClusterResp.ProtoReflect.Descriptor instead.
func (*DelOnecClusterResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{6}
}

type GetOnecClusterByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
}

func (x *GetOnecClusterByIdReq) Reset() {
	*x = GetOnecClusterByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnecClusterByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnecClusterByIdReq) ProtoMessage() {}

func (x *GetOnecClusterByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnecClusterByIdReq.ProtoReflect.Descriptor instead.
func (*GetOnecClusterByIdReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{7}
}

func (x *GetOnecClusterByIdReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetOnecClusterByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *OnecCluster `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` //onecCluster
}

func (x *GetOnecClusterByIdResp) Reset() {
	*x = GetOnecClusterByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnecClusterByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnecClusterByIdResp) ProtoMessage() {}

func (x *GetOnecClusterByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnecClusterByIdResp.ProtoReflect.Descriptor instead.
func (*GetOnecClusterByIdResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{8}
}

func (x *GetOnecClusterByIdResp) GetData() *OnecCluster {
	if x != nil {
		return x.Data
	}
	return nil
}

type SearchOnecClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`         //page
	PageSize    uint64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"` //pageSize
	OrderStr    string `protobuf:"bytes,3,opt,name=orderStr,proto3" json:"orderStr,omitempty"`  //orderStr
	IsAsc       bool   `protobuf:"varint,4,opt,name=isAsc,proto3" json:"isAsc,omitempty"`       //isAsc
	Name        string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`          //集群名称
	Uuid        string `protobuf:"bytes,6,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Host        string `protobuf:"bytes,7,opt,name=host,proto3" json:"host,omitempty"`                //集群主机地址
	EnvCode     string `protobuf:"bytes,8,opt,name=envCode,proto3" json:"envCode,omitempty"`          //集群环境标签 数据字典表
	Status      int64  `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`          //集群状态
	Version     string `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`         //集群版本
	Platform    string `protobuf:"bytes,13,opt,name=platform,proto3" json:"platform,omitempty"`       //集群平台
	Location    string `protobuf:"bytes,14,opt,name=location,proto3" json:"location,omitempty"`       //集群所在地址
	NodeLbIp    string `protobuf:"bytes,15,opt,name=nodeLbIp,proto3" json:"nodeLbIp,omitempty"`       //Node 负载均衡 IP
	Description string `protobuf:"bytes,16,opt,name=description,proto3" json:"description,omitempty"` //集群描述信息
	CreatedBy   string `protobuf:"bytes,17,opt,name=createdBy,proto3" json:"createdBy,omitempty"`     //记录创建人
	UpdatedBy   string `protobuf:"bytes,18,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`     //记录更新人
}

func (x *SearchOnecClusterReq) Reset() {
	*x = SearchOnecClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecClusterReq) ProtoMessage() {}

func (x *SearchOnecClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecClusterReq.ProtoReflect.Descriptor instead.
func (*SearchOnecClusterReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{9}
}

func (x *SearchOnecClusterReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchOnecClusterReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchOnecClusterReq) GetOrderStr() string {
	if x != nil {
		return x.OrderStr
	}
	return ""
}

func (x *SearchOnecClusterReq) GetIsAsc() bool {
	if x != nil {
		return x.IsAsc
	}
	return false
}

func (x *SearchOnecClusterReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchOnecClusterReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SearchOnecClusterReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SearchOnecClusterReq) GetEnvCode() string {
	if x != nil {
		return x.EnvCode
	}
	return ""
}

func (x *SearchOnecClusterReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SearchOnecClusterReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SearchOnecClusterReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *SearchOnecClusterReq) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *SearchOnecClusterReq) GetNodeLbIp() string {
	if x != nil {
		return x.NodeLbIp
	}
	return ""
}

func (x *SearchOnecClusterReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SearchOnecClusterReq) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *SearchOnecClusterReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type SearchOnecClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*OnecCluster `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`    //onecCluster
	Total uint64         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //total
}

func (x *SearchOnecClusterResp) Reset() {
	*x = SearchOnecClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecClusterResp) ProtoMessage() {}

func (x *SearchOnecClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecClusterResp.ProtoReflect.Descriptor instead.
func (*SearchOnecClusterResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{10}
}

func (x *SearchOnecClusterResp) GetData() []*OnecCluster {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SearchOnecClusterResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 同步集群信息
type SyncOnecClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //集群唯一标识符
	UpdatedBy string `protobuf:"bytes,2,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
}

func (x *SyncOnecClusterReq) Reset() {
	*x = SyncOnecClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncOnecClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncOnecClusterReq) ProtoMessage() {}

func (x *SyncOnecClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncOnecClusterReq.ProtoReflect.Descriptor instead.
func (*SyncOnecClusterReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{11}
}

func (x *SyncOnecClusterReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SyncOnecClusterReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type SyncOnecClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SyncOnecClusterResp) Reset() {
	*x = SyncOnecClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncOnecClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncOnecClusterResp) ProtoMessage() {}

func (x *SyncOnecClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncOnecClusterResp.ProtoReflect.Descriptor instead.
func (*SyncOnecClusterResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{12}
}

// 集群添加节点
type AddOnecNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterUuid string `protobuf:"bytes,1,opt,name=clusterUuid,proto3" json:"clusterUuid,omitempty"` //所属集群ID
	NodeName    string `protobuf:"bytes,2,opt,name=nodeName,proto3" json:"nodeName,omitempty"`       //节点名称，在同一集群中唯一
	Ipaddr      string `protobuf:"bytes,3,opt,name=ipaddr,proto3" json:"ipaddr,omitempty"`           //节点UID，唯一标识
	User        string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`               //节点状态
	Password    string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`       //节点角色列表
}

func (x *AddOnecNodeReq) Reset() {
	*x = AddOnecNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecNodeReq) ProtoMessage() {}

func (x *AddOnecNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecNodeReq.ProtoReflect.Descriptor instead.
func (*AddOnecNodeReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{13}
}

func (x *AddOnecNodeReq) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

func (x *AddOnecNodeReq) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *AddOnecNodeReq) GetIpaddr() string {
	if x != nil {
		return x.Ipaddr
	}
	return ""
}

func (x *AddOnecNodeReq) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AddOnecNodeReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AddOnecNodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddOnecNodeResp) Reset() {
	*x = AddOnecNodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecNodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecNodeResp) ProtoMessage() {}

func (x *AddOnecNodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecNodeResp.ProtoReflect.Descriptor instead.
func (*AddOnecNodeResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{14}
}

// --------------------------------通用的服务连接信息表，动态支持多个服务--------------------------------
type OnecClusterConnInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                     //自增主键
	ClusterUuid  string `protobuf:"bytes,2,opt,name=clusterUuid,proto3" json:"clusterUuid,omitempty"`    //关联集群 ID
	ServiceCode  string `protobuf:"bytes,3,opt,name=serviceCode,proto3" json:"serviceCode,omitempty"`    //服务名称
	ServiceUrl   string `protobuf:"bytes,4,opt,name=serviceUrl,proto3" json:"serviceUrl,omitempty"`      //服务的 URL
	Username     string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`          //用户名（如果使用基本认证）
	Password     string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`          //密码（如果使用基本认证）
	Token        string `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`                //令牌（如果使用 Token 认证）
	SkipInsecure int64  `protobuf:"varint,8,opt,name=skipInsecure,proto3" json:"skipInsecure,omitempty"` //是否忽略自签名证书验证
	CaCert       string `protobuf:"bytes,9,opt,name=caCert,proto3" json:"caCert,omitempty"`              //CA 证书内容（以 PEM 格式存储）
	ClientCert   string `protobuf:"bytes,10,opt,name=clientCert,proto3" json:"clientCert,omitempty"`     //客户端证书内容（以 PEM 格式存储）
	ClientKey    string `protobuf:"bytes,11,opt,name=clientKey,proto3" json:"clientKey,omitempty"`       //客户端私钥内容（以 PEM 格式存储，仅客户端证书需要）
	CreatedBy    string `protobuf:"bytes,12,opt,name=createdBy,proto3" json:"createdBy,omitempty"`       //记录创建人
	UpdatedBy    string `protobuf:"bytes,13,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`       //记录更新人
	CreatedAt    int64  `protobuf:"varint,14,opt,name=createdAt,proto3" json:"createdAt,omitempty"`      //记录创建时间
	UpdatedAt    int64  `protobuf:"varint,15,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`      //记录更新时间
}

func (x *OnecClusterConnInfo) Reset() {
	*x = OnecClusterConnInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnecClusterConnInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnecClusterConnInfo) ProtoMessage() {}

func (x *OnecClusterConnInfo) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnecClusterConnInfo.ProtoReflect.Descriptor instead.
func (*OnecClusterConnInfo) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{15}
}

func (x *OnecClusterConnInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OnecClusterConnInfo) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

func (x *OnecClusterConnInfo) GetServiceCode() string {
	if x != nil {
		return x.ServiceCode
	}
	return ""
}

func (x *OnecClusterConnInfo) GetServiceUrl() string {
	if x != nil {
		return x.ServiceUrl
	}
	return ""
}

func (x *OnecClusterConnInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *OnecClusterConnInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *OnecClusterConnInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *OnecClusterConnInfo) GetSkipInsecure() int64 {
	if x != nil {
		return x.SkipInsecure
	}
	return 0
}

func (x *OnecClusterConnInfo) GetCaCert() string {
	if x != nil {
		return x.CaCert
	}
	return ""
}

func (x *OnecClusterConnInfo) GetClientCert() string {
	if x != nil {
		return x.ClientCert
	}
	return ""
}

func (x *OnecClusterConnInfo) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

func (x *OnecClusterConnInfo) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *OnecClusterConnInfo) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *OnecClusterConnInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *OnecClusterConnInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type AddOnecClusterConnInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterUuid  string `protobuf:"bytes,1,opt,name=clusterUuid,proto3" json:"clusterUuid,omitempty"`    //关联集群 ID
	ServiceCode  string `protobuf:"bytes,2,opt,name=serviceCode,proto3" json:"serviceCode,omitempty"`    //服务名称
	ServiceUrl   string `protobuf:"bytes,3,opt,name=serviceUrl,proto3" json:"serviceUrl,omitempty"`      //服务的 URL
	Username     string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`          //用户名（如果使用基本认证）
	Password     string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`          //密码（如果使用基本认证）
	Token        string `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`                //令牌（如果使用 Token 认证）
	SkipInsecure int64  `protobuf:"varint,7,opt,name=skipInsecure,proto3" json:"skipInsecure,omitempty"` //是否忽略自签名证书验证
	CaCert       string `protobuf:"bytes,8,opt,name=caCert,proto3" json:"caCert,omitempty"`              //CA 证书内容（以 PEM 格式存储）
	ClientCert   string `protobuf:"bytes,9,opt,name=clientCert,proto3" json:"clientCert,omitempty"`      //客户端证书内容（以 PEM 格式存储）
	ClientKey    string `protobuf:"bytes,10,opt,name=clientKey,proto3" json:"clientKey,omitempty"`       //客户端私钥内容（以 PEM 格式存储，仅客户端证书需要）
	CreatedBy    string `protobuf:"bytes,12,opt,name=createdBy,proto3" json:"createdBy,omitempty"`       //记录创建人
	UpdatedBy    string `protobuf:"bytes,13,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`       //记录更新人
}

func (x *AddOnecClusterConnInfoReq) Reset() {
	*x = AddOnecClusterConnInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecClusterConnInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecClusterConnInfoReq) ProtoMessage() {}

func (x *AddOnecClusterConnInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecClusterConnInfoReq.ProtoReflect.Descriptor instead.
func (*AddOnecClusterConnInfoReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{16}
}

func (x *AddOnecClusterConnInfoReq) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

func (x *AddOnecClusterConnInfoReq) GetServiceCode() string {
	if x != nil {
		return x.ServiceCode
	}
	return ""
}

func (x *AddOnecClusterConnInfoReq) GetServiceUrl() string {
	if x != nil {
		return x.ServiceUrl
	}
	return ""
}

func (x *AddOnecClusterConnInfoReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AddOnecClusterConnInfoReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AddOnecClusterConnInfoReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AddOnecClusterConnInfoReq) GetSkipInsecure() int64 {
	if x != nil {
		return x.SkipInsecure
	}
	return 0
}

func (x *AddOnecClusterConnInfoReq) GetCaCert() string {
	if x != nil {
		return x.CaCert
	}
	return ""
}

func (x *AddOnecClusterConnInfoReq) GetClientCert() string {
	if x != nil {
		return x.ClientCert
	}
	return ""
}

func (x *AddOnecClusterConnInfoReq) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

func (x *AddOnecClusterConnInfoReq) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *AddOnecClusterConnInfoReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type AddOnecClusterConnInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddOnecClusterConnInfoResp) Reset() {
	*x = AddOnecClusterConnInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecClusterConnInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecClusterConnInfoResp) ProtoMessage() {}

func (x *AddOnecClusterConnInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecClusterConnInfoResp.ProtoReflect.Descriptor instead.
func (*AddOnecClusterConnInfoResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{17}
}

type UpdateOnecClusterConnInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                     //自增主键
	ClusterUuid  string `protobuf:"bytes,2,opt,name=clusterUuid,proto3" json:"clusterUuid,omitempty"`    //关联集群 ID
	ServiceCode  string `protobuf:"bytes,3,opt,name=serviceCode,proto3" json:"serviceCode,omitempty"`    //服务名称
	ServiceUrl   string `protobuf:"bytes,4,opt,name=serviceUrl,proto3" json:"serviceUrl,omitempty"`      //服务的 URL
	Username     string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`          //用户名（如果使用基本认证）
	Password     string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`          //密码（如果使用基本认证）
	Token        string `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`                //令牌（如果使用 Token 认证）
	SkipInsecure int64  `protobuf:"varint,8,opt,name=skipInsecure,proto3" json:"skipInsecure,omitempty"` //是否忽略自签名证书验证
	CaCert       string `protobuf:"bytes,9,opt,name=caCert,proto3" json:"caCert,omitempty"`              //CA 证书内容（以 PEM 格式存储）
	ClientCert   string `protobuf:"bytes,10,opt,name=clientCert,proto3" json:"clientCert,omitempty"`     //客户端证书内容（以 PEM 格式存储）
	ClientKey    string `protobuf:"bytes,11,opt,name=clientKey,proto3" json:"clientKey,omitempty"`       //客户端私钥内容（以 PEM 格式存储，仅客户端证书需要）
	UpdatedBy    string `protobuf:"bytes,12,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`       //记录更新人
}

func (x *UpdateOnecClusterConnInfoReq) Reset() {
	*x = UpdateOnecClusterConnInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOnecClusterConnInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOnecClusterConnInfoReq) ProtoMessage() {}

func (x *UpdateOnecClusterConnInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOnecClusterConnInfoReq.ProtoReflect.Descriptor instead.
func (*UpdateOnecClusterConnInfoReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateOnecClusterConnInfoReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOnecClusterConnInfoReq) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

func (x *UpdateOnecClusterConnInfoReq) GetServiceCode() string {
	if x != nil {
		return x.ServiceCode
	}
	return ""
}

func (x *UpdateOnecClusterConnInfoReq) GetServiceUrl() string {
	if x != nil {
		return x.ServiceUrl
	}
	return ""
}

func (x *UpdateOnecClusterConnInfoReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UpdateOnecClusterConnInfoReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UpdateOnecClusterConnInfoReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UpdateOnecClusterConnInfoReq) GetSkipInsecure() int64 {
	if x != nil {
		return x.SkipInsecure
	}
	return 0
}

func (x *UpdateOnecClusterConnInfoReq) GetCaCert() string {
	if x != nil {
		return x.CaCert
	}
	return ""
}

func (x *UpdateOnecClusterConnInfoReq) GetClientCert() string {
	if x != nil {
		return x.ClientCert
	}
	return ""
}

func (x *UpdateOnecClusterConnInfoReq) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

func (x *UpdateOnecClusterConnInfoReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type UpdateOnecClusterConnInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOnecClusterConnInfoResp) Reset() {
	*x = UpdateOnecClusterConnInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOnecClusterConnInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOnecClusterConnInfoResp) ProtoMessage() {}

func (x *UpdateOnecClusterConnInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOnecClusterConnInfoResp.ProtoReflect.Descriptor instead.
func (*UpdateOnecClusterConnInfoResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{19}
}

type DelOnecClusterConnInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
}

func (x *DelOnecClusterConnInfoReq) Reset() {
	*x = DelOnecClusterConnInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecClusterConnInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecClusterConnInfoReq) ProtoMessage() {}

func (x *DelOnecClusterConnInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecClusterConnInfoReq.ProtoReflect.Descriptor instead.
func (*DelOnecClusterConnInfoReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{20}
}

func (x *DelOnecClusterConnInfoReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DelOnecClusterConnInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelOnecClusterConnInfoResp) Reset() {
	*x = DelOnecClusterConnInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecClusterConnInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecClusterConnInfoResp) ProtoMessage() {}

func (x *DelOnecClusterConnInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecClusterConnInfoResp.ProtoReflect.Descriptor instead.
func (*DelOnecClusterConnInfoResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{21}
}

type GetOnecClusterConnInfoByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
}

func (x *GetOnecClusterConnInfoByIdReq) Reset() {
	*x = GetOnecClusterConnInfoByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnecClusterConnInfoByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnecClusterConnInfoByIdReq) ProtoMessage() {}

func (x *GetOnecClusterConnInfoByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnecClusterConnInfoByIdReq.ProtoReflect.Descriptor instead.
func (*GetOnecClusterConnInfoByIdReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{22}
}

func (x *GetOnecClusterConnInfoByIdReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetOnecClusterConnInfoByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *OnecClusterConnInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` //onecClusterConnInfo
}

func (x *GetOnecClusterConnInfoByIdResp) Reset() {
	*x = GetOnecClusterConnInfoByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnecClusterConnInfoByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnecClusterConnInfoByIdResp) ProtoMessage() {}

func (x *GetOnecClusterConnInfoByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnecClusterConnInfoByIdResp.ProtoReflect.Descriptor instead.
func (*GetOnecClusterConnInfoByIdResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{23}
}

func (x *GetOnecClusterConnInfoByIdResp) GetData() *OnecClusterConnInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type SearchOnecClusterConnInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`              //page
	PageSize    uint64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`      //pageSize
	OrderStr    string `protobuf:"bytes,3,opt,name=orderStr,proto3" json:"orderStr,omitempty"`       //orderStr
	IsAsc       bool   `protobuf:"varint,4,opt,name=isAsc,proto3" json:"isAsc,omitempty"`            //isAsc
	ClusterUuid string `protobuf:"bytes,5,opt,name=clusterUuid,proto3" json:"clusterUuid,omitempty"` //关联集群 ID
	ServiceCode string `protobuf:"bytes,6,opt,name=serviceCode,proto3" json:"serviceCode,omitempty"` //服务名称
}

func (x *SearchOnecClusterConnInfoReq) Reset() {
	*x = SearchOnecClusterConnInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecClusterConnInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecClusterConnInfoReq) ProtoMessage() {}

func (x *SearchOnecClusterConnInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecClusterConnInfoReq.ProtoReflect.Descriptor instead.
func (*SearchOnecClusterConnInfoReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{24}
}

func (x *SearchOnecClusterConnInfoReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchOnecClusterConnInfoReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchOnecClusterConnInfoReq) GetOrderStr() string {
	if x != nil {
		return x.OrderStr
	}
	return ""
}

func (x *SearchOnecClusterConnInfoReq) GetIsAsc() bool {
	if x != nil {
		return x.IsAsc
	}
	return false
}

func (x *SearchOnecClusterConnInfoReq) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

func (x *SearchOnecClusterConnInfoReq) GetServiceCode() string {
	if x != nil {
		return x.ServiceCode
	}
	return ""
}

type SearchOnecClusterConnInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*OnecClusterConnInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`    //onecClusterConnInfo
	Total uint64                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //total
}

func (x *SearchOnecClusterConnInfoResp) Reset() {
	*x = SearchOnecClusterConnInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecClusterConnInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecClusterConnInfoResp) ProtoMessage() {}

func (x *SearchOnecClusterConnInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecClusterConnInfoResp.ProtoReflect.Descriptor instead.
func (*SearchOnecClusterConnInfoResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{25}
}

func (x *SearchOnecClusterConnInfoResp) GetData() []*OnecClusterConnInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SearchOnecClusterConnInfoResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// --------------------------------节点表，用于管理各集群中的节点信息--------------------------------
type OnecNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                  //自增主键
	ClusterUuid      string  `protobuf:"bytes,2,opt,name=clusterUuid,proto3" json:"clusterUuid,omitempty"` //所属集群ID
	NodeName         string  `protobuf:"bytes,3,opt,name=nodeName,proto3" json:"nodeName,omitempty"`       //节点名称，在同一集群中唯一
	Cpu              int64   `protobuf:"varint,4,opt,name=cpu,proto3" json:"cpu,omitempty"`                //CPU核数
	Memory           float64 `protobuf:"fixed64,5,opt,name=memory,proto3" json:"memory,omitempty"`         //内存大小，Mi
	MaxPods          int64   `protobuf:"varint,6,opt,name=maxPods,proto3" json:"maxPods,omitempty"`        //最大Pod数量
	IsGpu            int64   `protobuf:"varint,7,opt,name=isGpu,proto3" json:"isGpu,omitempty"`            //节点是否包含GPU
	NodeUid          string  `protobuf:"bytes,8,opt,name=nodeUid,proto3" json:"nodeUid,omitempty"`         //节点UID，唯一标识
	Status           string  `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`           //节点状态
	Roles            string  `protobuf:"bytes,10,opt,name=roles,proto3" json:"roles,omitempty"`            //节点角色列表
	JoinAt           int64   `protobuf:"varint,11,opt,name=joinAt,proto3" json:"joinAt,omitempty"`         //节点加入集群时间
	SyncStatus       int64   `protobuf:"varint,12,opt,name=syncStatus,proto3" json:"syncStatus,omitempty"`
	PodCidr          string  `protobuf:"bytes,14,opt,name=podCidr,proto3" json:"podCidr,omitempty"`                   //Pod CIDR
	Unschedulable    int64   `protobuf:"varint,15,opt,name=unschedulable,proto3" json:"unschedulable,omitempty"`      //节点是否不可调度（0：可调度，1：不可调度）
	NodeIp           string  `protobuf:"bytes,17,opt,name=nodeIp,proto3" json:"nodeIp,omitempty"`                     //节点地址
	Os               string  `protobuf:"bytes,18,opt,name=os,proto3" json:"os,omitempty"`                             //操作系统
	KernelVersion    string  `protobuf:"bytes,19,opt,name=kernelVersion,proto3" json:"kernelVersion,omitempty"`       //内核版本
	ContainerRuntime string  `protobuf:"bytes,20,opt,name=containerRuntime,proto3" json:"containerRuntime,omitempty"` //容器运行时
	KubeletVersion   string  `protobuf:"bytes,21,opt,name=kubeletVersion,proto3" json:"kubeletVersion,omitempty"`     //Kubelet版本
	KubeletPort      int64   `protobuf:"varint,22,opt,name=kubeletPort,proto3" json:"kubeletPort,omitempty"`          //Kubelet端口号
	OperatingSystem  string  `protobuf:"bytes,23,opt,name=operatingSystem,proto3" json:"operatingSystem,omitempty"`   //操作系统类型
	Architecture     string  `protobuf:"bytes,24,opt,name=architecture,proto3" json:"architecture,omitempty"`         //架构类型
	CreatedBy        string  `protobuf:"bytes,25,opt,name=createdBy,proto3" json:"createdBy,omitempty"`               //记录创建人
	UpdatedBy        string  `protobuf:"bytes,26,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`               //记录更新人
	CreatedAt        int64   `protobuf:"varint,27,opt,name=createdAt,proto3" json:"createdAt,omitempty"`              //记录创建时间
	UpdatedAt        int64   `protobuf:"varint,28,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`              //记录更新时间
}

func (x *OnecNode) Reset() {
	*x = OnecNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnecNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnecNode) ProtoMessage() {}

func (x *OnecNode) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnecNode.ProtoReflect.Descriptor instead.
func (*OnecNode) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{26}
}

func (x *OnecNode) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OnecNode) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

func (x *OnecNode) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *OnecNode) GetCpu() int64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *OnecNode) GetMemory() float64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *OnecNode) GetMaxPods() int64 {
	if x != nil {
		return x.MaxPods
	}
	return 0
}

func (x *OnecNode) GetIsGpu() int64 {
	if x != nil {
		return x.IsGpu
	}
	return 0
}

func (x *OnecNode) GetNodeUid() string {
	if x != nil {
		return x.NodeUid
	}
	return ""
}

func (x *OnecNode) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OnecNode) GetRoles() string {
	if x != nil {
		return x.Roles
	}
	return ""
}

func (x *OnecNode) GetJoinAt() int64 {
	if x != nil {
		return x.JoinAt
	}
	return 0
}

func (x *OnecNode) GetSyncStatus() int64 {
	if x != nil {
		return x.SyncStatus
	}
	return 0
}

func (x *OnecNode) GetPodCidr() string {
	if x != nil {
		return x.PodCidr
	}
	return ""
}

func (x *OnecNode) GetUnschedulable() int64 {
	if x != nil {
		return x.Unschedulable
	}
	return 0
}

func (x *OnecNode) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

func (x *OnecNode) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *OnecNode) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *OnecNode) GetContainerRuntime() string {
	if x != nil {
		return x.ContainerRuntime
	}
	return ""
}

func (x *OnecNode) GetKubeletVersion() string {
	if x != nil {
		return x.KubeletVersion
	}
	return ""
}

func (x *OnecNode) GetKubeletPort() int64 {
	if x != nil {
		return x.KubeletPort
	}
	return 0
}

func (x *OnecNode) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *OnecNode) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *OnecNode) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *OnecNode) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *OnecNode) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *OnecNode) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type DelOnecNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
	ClusterUuid string `protobuf:"bytes,2,opt,name=clusterUuid,proto3" json:"clusterUuid,omitempty"`
}

func (x *DelOnecNodeReq) Reset() {
	*x = DelOnecNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecNodeReq) ProtoMessage() {}

func (x *DelOnecNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecNodeReq.ProtoReflect.Descriptor instead.
func (*DelOnecNodeReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{27}
}

func (x *DelOnecNodeReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DelOnecNodeReq) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

type DelOnecNodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelOnecNodeResp) Reset() {
	*x = DelOnecNodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecNodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecNodeResp) ProtoMessage() {}

func (x *DelOnecNodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecNodeResp.ProtoReflect.Descriptor instead.
func (*DelOnecNodeResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{28}
}

type GetOnecNodeByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
}

func (x *GetOnecNodeByIdReq) Reset() {
	*x = GetOnecNodeByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnecNodeByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnecNodeByIdReq) ProtoMessage() {}

func (x *GetOnecNodeByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnecNodeByIdReq.ProtoReflect.Descriptor instead.
func (*GetOnecNodeByIdReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{29}
}

func (x *GetOnecNodeByIdReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetOnecNodeByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *OnecNode `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` //onecNode
}

func (x *GetOnecNodeByIdResp) Reset() {
	*x = GetOnecNodeByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnecNodeByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnecNodeByIdResp) ProtoMessage() {}

func (x *GetOnecNodeByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnecNodeByIdResp.ProtoReflect.Descriptor instead.
func (*GetOnecNodeByIdResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{30}
}

func (x *GetOnecNodeByIdResp) GetData() *OnecNode {
	if x != nil {
		return x.Data
	}
	return nil
}

type SearchOnecNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page             uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`              //page
	PageSize         uint64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`      //pageSize
	OrderStr         string `protobuf:"bytes,3,opt,name=orderStr,proto3" json:"orderStr,omitempty"`       //orderStr
	IsAsc            bool   `protobuf:"varint,4,opt,name=isAsc,proto3" json:"isAsc,omitempty"`            //isAsc
	ClusterUuid      string `protobuf:"bytes,5,opt,name=clusterUuid,proto3" json:"clusterUuid,omitempty"` //所属集群ID
	NodeName         string `protobuf:"bytes,6,opt,name=nodeName,proto3" json:"nodeName,omitempty"`       //节点名称，在同一集群中唯一
	NodeUid          string `protobuf:"bytes,7,opt,name=nodeUid,proto3" json:"nodeUid,omitempty"`         //节点UID，唯一标识
	Status           string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`           //节点状态
	Roles            string `protobuf:"bytes,9,opt,name=roles,proto3" json:"roles,omitempty"`             //节点角色列表
	SyncStatus       int64  `protobuf:"varint,12,opt,name=syncStatus,proto3" json:"syncStatus,omitempty"`
	PodCidr          string `protobuf:"bytes,13,opt,name=podCidr,proto3" json:"podCidr,omitempty"`                   //Pod CIDR
	Unschedulable    int64  `protobuf:"varint,14,opt,name=unschedulable,proto3" json:"unschedulable,omitempty"`      //节点是否不可调度（0：可调度，1：不可调度）
	NodeIp           string `protobuf:"bytes,16,opt,name=nodeIp,proto3" json:"nodeIp,omitempty"`                     //节点地址
	Os               string `protobuf:"bytes,17,opt,name=os,proto3" json:"os,omitempty"`                             //操作系统
	ContainerRuntime string `protobuf:"bytes,19,opt,name=containerRuntime,proto3" json:"containerRuntime,omitempty"` //容器运行时
	OperatingSystem  string `protobuf:"bytes,22,opt,name=operatingSystem,proto3" json:"operatingSystem,omitempty"`   //操作系统类型
	Architecture     string `protobuf:"bytes,23,opt,name=architecture,proto3" json:"architecture,omitempty"`         //架构类型
	CreatedBy        string `protobuf:"bytes,24,opt,name=createdBy,proto3" json:"createdBy,omitempty"`               //记录创建人
	UpdatedBy        string `protobuf:"bytes,25,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`               //记录更新人
}

func (x *SearchOnecNodeReq) Reset() {
	*x = SearchOnecNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecNodeReq) ProtoMessage() {}

func (x *SearchOnecNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecNodeReq.ProtoReflect.Descriptor instead.
func (*SearchOnecNodeReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{31}
}

func (x *SearchOnecNodeReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchOnecNodeReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchOnecNodeReq) GetOrderStr() string {
	if x != nil {
		return x.OrderStr
	}
	return ""
}

func (x *SearchOnecNodeReq) GetIsAsc() bool {
	if x != nil {
		return x.IsAsc
	}
	return false
}

func (x *SearchOnecNodeReq) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

func (x *SearchOnecNodeReq) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *SearchOnecNodeReq) GetNodeUid() string {
	if x != nil {
		return x.NodeUid
	}
	return ""
}

func (x *SearchOnecNodeReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SearchOnecNodeReq) GetRoles() string {
	if x != nil {
		return x.Roles
	}
	return ""
}

func (x *SearchOnecNodeReq) GetSyncStatus() int64 {
	if x != nil {
		return x.SyncStatus
	}
	return 0
}

func (x *SearchOnecNodeReq) GetPodCidr() string {
	if x != nil {
		return x.PodCidr
	}
	return ""
}

func (x *SearchOnecNodeReq) GetUnschedulable() int64 {
	if x != nil {
		return x.Unschedulable
	}
	return 0
}

func (x *SearchOnecNodeReq) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

func (x *SearchOnecNodeReq) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *SearchOnecNodeReq) GetContainerRuntime() string {
	if x != nil {
		return x.ContainerRuntime
	}
	return ""
}

func (x *SearchOnecNodeReq) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *SearchOnecNodeReq) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *SearchOnecNodeReq) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *SearchOnecNodeReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type SearchOnecNodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*OnecNode `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`    //onecNode
	Total uint64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //total
}

func (x *SearchOnecNodeResp) Reset() {
	*x = SearchOnecNodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecNodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecNodeResp) ProtoMessage() {}

func (x *SearchOnecNodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecNodeResp.ProtoReflect.Descriptor instead.
func (*SearchOnecNodeResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{32}
}

func (x *SearchOnecNodeResp) GetData() []*OnecNode {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SearchOnecNodeResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 同步节点信息
type SyncOnecNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId    uint64 `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	UpdatedBy string `protobuf:"bytes,3,opt,name=UpdatedBy,proto3" json:"UpdatedBy,omitempty"`
}

func (x *SyncOnecNodeReq) Reset() {
	*x = SyncOnecNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncOnecNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncOnecNodeReq) ProtoMessage() {}

func (x *SyncOnecNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncOnecNodeReq.ProtoReflect.Descriptor instead.
func (*SyncOnecNodeReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{33}
}

func (x *SyncOnecNodeReq) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *SyncOnecNodeReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type SyncOnecNodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SyncOnecNodeResp) Reset() {
	*x = SyncOnecNodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncOnecNodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncOnecNodeResp) ProtoMessage() {}

func (x *SyncOnecNodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncOnecNodeResp.ProtoReflect.Descriptor instead.
func (*SyncOnecNodeResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{34}
}

// 增加标签
type AddOnecNodeLabelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId    uint64 `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"` //id
	Key       string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`        //标签键
	Value     string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`    //标签值
	UpdatedBy string `protobuf:"bytes,5,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
}

func (x *AddOnecNodeLabelReq) Reset() {
	*x = AddOnecNodeLabelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecNodeLabelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecNodeLabelReq) ProtoMessage() {}

func (x *AddOnecNodeLabelReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecNodeLabelReq.ProtoReflect.Descriptor instead.
func (*AddOnecNodeLabelReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{35}
}

func (x *AddOnecNodeLabelReq) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *AddOnecNodeLabelReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AddOnecNodeLabelReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AddOnecNodeLabelReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type AddOnecNodeLabelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddOnecNodeLabelResp) Reset() {
	*x = AddOnecNodeLabelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecNodeLabelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecNodeLabelResp) ProtoMessage() {}

func (x *AddOnecNodeLabelResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecNodeLabelResp.ProtoReflect.Descriptor instead.
func (*AddOnecNodeLabelResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{36}
}

// 删除标签
type DelOnecNodeLabelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelId   uint64 `protobuf:"varint,1,opt,name=labelId,proto3" json:"labelId,omitempty"` //id
	UpdatedBy string `protobuf:"bytes,5,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
}

func (x *DelOnecNodeLabelReq) Reset() {
	*x = DelOnecNodeLabelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecNodeLabelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecNodeLabelReq) ProtoMessage() {}

func (x *DelOnecNodeLabelReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecNodeLabelReq.ProtoReflect.Descriptor instead.
func (*DelOnecNodeLabelReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{37}
}

func (x *DelOnecNodeLabelReq) GetLabelId() uint64 {
	if x != nil {
		return x.LabelId
	}
	return 0
}

func (x *DelOnecNodeLabelReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type DelOnecNodeLabelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelOnecNodeLabelResp) Reset() {
	*x = DelOnecNodeLabelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecNodeLabelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecNodeLabelResp) ProtoMessage() {}

func (x *DelOnecNodeLabelResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecNodeLabelResp.ProtoReflect.Descriptor instead.
func (*DelOnecNodeLabelResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{38}
}

// 添加注解
type AddOnecNodeAnnotationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId    uint64 `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"` //id
	Key       string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`        //注解键
	Value     string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`    //注解值
	UpdatedBy string `protobuf:"bytes,5,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
}

func (x *AddOnecNodeAnnotationReq) Reset() {
	*x = AddOnecNodeAnnotationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecNodeAnnotationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecNodeAnnotationReq) ProtoMessage() {}

func (x *AddOnecNodeAnnotationReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecNodeAnnotationReq.ProtoReflect.Descriptor instead.
func (*AddOnecNodeAnnotationReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{39}
}

func (x *AddOnecNodeAnnotationReq) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *AddOnecNodeAnnotationReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AddOnecNodeAnnotationReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AddOnecNodeAnnotationReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type AddOnecNodeAnnotationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddOnecNodeAnnotationResp) Reset() {
	*x = AddOnecNodeAnnotationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecNodeAnnotationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecNodeAnnotationResp) ProtoMessage() {}

func (x *AddOnecNodeAnnotationResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecNodeAnnotationResp.ProtoReflect.Descriptor instead.
func (*AddOnecNodeAnnotationResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{40}
}

// 删除注解
type DelOnecNodeAnnotationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotationId uint64 `protobuf:"varint,1,opt,name=annotationId,proto3" json:"annotationId,omitempty"` //id
	UpdatedBy    string `protobuf:"bytes,5,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
}

func (x *DelOnecNodeAnnotationReq) Reset() {
	*x = DelOnecNodeAnnotationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecNodeAnnotationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecNodeAnnotationReq) ProtoMessage() {}

func (x *DelOnecNodeAnnotationReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecNodeAnnotationReq.ProtoReflect.Descriptor instead.
func (*DelOnecNodeAnnotationReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{41}
}

func (x *DelOnecNodeAnnotationReq) GetAnnotationId() uint64 {
	if x != nil {
		return x.AnnotationId
	}
	return 0
}

func (x *DelOnecNodeAnnotationReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type DelOnecNodeAnnotationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelOnecNodeAnnotationResp) Reset() {
	*x = DelOnecNodeAnnotationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecNodeAnnotationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecNodeAnnotationResp) ProtoMessage() {}

func (x *DelOnecNodeAnnotationResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecNodeAnnotationResp.ProtoReflect.Descriptor instead.
func (*DelOnecNodeAnnotationResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{42}
}

// 禁止调度
type ForbidScheduledReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId    uint64 `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"` //id
	UpdatedBy string `protobuf:"bytes,4,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
}

func (x *ForbidScheduledReq) Reset() {
	*x = ForbidScheduledReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForbidScheduledReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForbidScheduledReq) ProtoMessage() {}

func (x *ForbidScheduledReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForbidScheduledReq.ProtoReflect.Descriptor instead.
func (*ForbidScheduledReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{43}
}

func (x *ForbidScheduledReq) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *ForbidScheduledReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type ForbidScheduledResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ForbidScheduledResp) Reset() {
	*x = ForbidScheduledResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForbidScheduledResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForbidScheduledResp) ProtoMessage() {}

func (x *ForbidScheduledResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForbidScheduledResp.ProtoReflect.Descriptor instead.
func (*ForbidScheduledResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{44}
}

// 取消禁止调度
type EnableScheduledNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId    uint64 `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"` //id
	UpdatedBy string `protobuf:"bytes,4,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
}

func (x *EnableScheduledNodeReq) Reset() {
	*x = EnableScheduledNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableScheduledNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableScheduledNodeReq) ProtoMessage() {}

func (x *EnableScheduledNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableScheduledNodeReq.ProtoReflect.Descriptor instead.
func (*EnableScheduledNodeReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{45}
}

func (x *EnableScheduledNodeReq) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *EnableScheduledNodeReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type EnableScheduledNodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnableScheduledNodeResp) Reset() {
	*x = EnableScheduledNodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableScheduledNodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableScheduledNodeResp) ProtoMessage() {}

func (x *EnableScheduledNodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableScheduledNodeResp.ProtoReflect.Descriptor instead.
func (*EnableScheduledNodeResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{46}
}

// 添加污点
type AddOnecNodeTaintReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId    uint64 `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"` //id
	Key       string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`        //污点键
	Value     string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`    //污点值
	Effect    string `protobuf:"bytes,5,opt,name=effect,proto3" json:"effect,omitempty"`  //污点效果
	UpdatedBy string `protobuf:"bytes,6,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
}

func (x *AddOnecNodeTaintReq) Reset() {
	*x = AddOnecNodeTaintReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecNodeTaintReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecNodeTaintReq) ProtoMessage() {}

func (x *AddOnecNodeTaintReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecNodeTaintReq.ProtoReflect.Descriptor instead.
func (*AddOnecNodeTaintReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{47}
}

func (x *AddOnecNodeTaintReq) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *AddOnecNodeTaintReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AddOnecNodeTaintReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AddOnecNodeTaintReq) GetEffect() string {
	if x != nil {
		return x.Effect
	}
	return ""
}

func (x *AddOnecNodeTaintReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type AddOnecNodeTaintResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddOnecNodeTaintResp) Reset() {
	*x = AddOnecNodeTaintResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecNodeTaintResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecNodeTaintResp) ProtoMessage() {}

func (x *AddOnecNodeTaintResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecNodeTaintResp.ProtoReflect.Descriptor instead.
func (*AddOnecNodeTaintResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{48}
}

// 删除污点
type DelOnecNodeTaintReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaintId   uint64 `protobuf:"varint,1,opt,name=taintId,proto3" json:"taintId,omitempty"` //id
	UpdatedBy string `protobuf:"bytes,6,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
}

func (x *DelOnecNodeTaintReq) Reset() {
	*x = DelOnecNodeTaintReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecNodeTaintReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecNodeTaintReq) ProtoMessage() {}

func (x *DelOnecNodeTaintReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecNodeTaintReq.ProtoReflect.Descriptor instead.
func (*DelOnecNodeTaintReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{49}
}

func (x *DelOnecNodeTaintReq) GetTaintId() uint64 {
	if x != nil {
		return x.TaintId
	}
	return 0
}

func (x *DelOnecNodeTaintReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type DelOnecNodeTaintResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelOnecNodeTaintResp) Reset() {
	*x = DelOnecNodeTaintResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecNodeTaintResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecNodeTaintResp) ProtoMessage() {}

func (x *DelOnecNodeTaintResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecNodeTaintResp.ProtoReflect.Descriptor instead.
func (*DelOnecNodeTaintResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{50}
}

// 获取标签列表
type SearchOnecNodeLabelListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`         //page
	PageSize uint64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"` //pageSize
	OrderStr string `protobuf:"bytes,3,opt,name=orderStr,proto3" json:"orderStr,omitempty"`  //orderStr
	IsAsc    bool   `protobuf:"varint,4,opt,name=isAsc,proto3" json:"isAsc,omitempty"`       //isAsc
	NodeId   uint64 `protobuf:"varint,5,opt,name=nodeId,proto3" json:"nodeId,omitempty"`     //id
	Key      string `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SearchOnecNodeLabelListReq) Reset() {
	*x = SearchOnecNodeLabelListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecNodeLabelListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecNodeLabelListReq) ProtoMessage() {}

func (x *SearchOnecNodeLabelListReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecNodeLabelListReq.ProtoReflect.Descriptor instead.
func (*SearchOnecNodeLabelListReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{51}
}

func (x *SearchOnecNodeLabelListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchOnecNodeLabelListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchOnecNodeLabelListReq) GetOrderStr() string {
	if x != nil {
		return x.OrderStr
	}
	return ""
}

func (x *SearchOnecNodeLabelListReq) GetIsAsc() bool {
	if x != nil {
		return x.IsAsc
	}
	return false
}

func (x *SearchOnecNodeLabelListReq) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *SearchOnecNodeLabelListReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type NodeLabels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ResourceType string `protobuf:"bytes,2,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceId   uint64 `protobuf:"varint,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	Key          string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Value        string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	CreatedAt    int64  `protobuf:"varint,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt    int64  `protobuf:"varint,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *NodeLabels) Reset() {
	*x = NodeLabels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeLabels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeLabels) ProtoMessage() {}

func (x *NodeLabels) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeLabels.ProtoReflect.Descriptor instead.
func (*NodeLabels) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{52}
}

func (x *NodeLabels) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NodeLabels) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *NodeLabels) GetResourceId() uint64 {
	if x != nil {
		return x.ResourceId
	}
	return 0
}

func (x *NodeLabels) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NodeLabels) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *NodeLabels) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *NodeLabels) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type SearchOnecNodeLabelListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*NodeLabels `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total uint64        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SearchOnecNodeLabelListResp) Reset() {
	*x = SearchOnecNodeLabelListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecNodeLabelListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecNodeLabelListResp) ProtoMessage() {}

func (x *SearchOnecNodeLabelListResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecNodeLabelListResp.ProtoReflect.Descriptor instead.
func (*SearchOnecNodeLabelListResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{53}
}

func (x *SearchOnecNodeLabelListResp) GetData() []*NodeLabels {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SearchOnecNodeLabelListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 获取注解列表
type SearchOnecNodeAnnotationListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`         //page
	PageSize uint64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"` //pageSize
	OrderStr string `protobuf:"bytes,3,opt,name=orderStr,proto3" json:"orderStr,omitempty"`  //orderStr
	IsAsc    bool   `protobuf:"varint,4,opt,name=isAsc,proto3" json:"isAsc,omitempty"`       //isAsc
	NodeId   uint64 `protobuf:"varint,5,opt,name=nodeId,proto3" json:"nodeId,omitempty"`     //id
	Key      string `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SearchOnecNodeAnnotationListReq) Reset() {
	*x = SearchOnecNodeAnnotationListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecNodeAnnotationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecNodeAnnotationListReq) ProtoMessage() {}

func (x *SearchOnecNodeAnnotationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecNodeAnnotationListReq.ProtoReflect.Descriptor instead.
func (*SearchOnecNodeAnnotationListReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{54}
}

func (x *SearchOnecNodeAnnotationListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchOnecNodeAnnotationListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchOnecNodeAnnotationListReq) GetOrderStr() string {
	if x != nil {
		return x.OrderStr
	}
	return ""
}

func (x *SearchOnecNodeAnnotationListReq) GetIsAsc() bool {
	if x != nil {
		return x.IsAsc
	}
	return false
}

func (x *SearchOnecNodeAnnotationListReq) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *SearchOnecNodeAnnotationListReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type NodeAnnotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ResourceType string `protobuf:"bytes,2,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceId   uint64 `protobuf:"varint,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	Key          string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Value        string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	CreatedAt    int64  `protobuf:"varint,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt    int64  `protobuf:"varint,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *NodeAnnotations) Reset() {
	*x = NodeAnnotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAnnotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAnnotations) ProtoMessage() {}

func (x *NodeAnnotations) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAnnotations.ProtoReflect.Descriptor instead.
func (*NodeAnnotations) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{55}
}

func (x *NodeAnnotations) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NodeAnnotations) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *NodeAnnotations) GetResourceId() uint64 {
	if x != nil {
		return x.ResourceId
	}
	return 0
}

func (x *NodeAnnotations) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NodeAnnotations) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *NodeAnnotations) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *NodeAnnotations) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type SearchOnecNodeAnnotationListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*NodeAnnotations `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total uint64             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SearchOnecNodeAnnotationListResp) Reset() {
	*x = SearchOnecNodeAnnotationListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecNodeAnnotationListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecNodeAnnotationListResp) ProtoMessage() {}

func (x *SearchOnecNodeAnnotationListResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecNodeAnnotationListResp.ProtoReflect.Descriptor instead.
func (*SearchOnecNodeAnnotationListResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{56}
}

func (x *SearchOnecNodeAnnotationListResp) GetData() []*NodeAnnotations {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SearchOnecNodeAnnotationListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 获取污点列表
type SearchOnecNodeTaintListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`         //page
	PageSize uint64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"` //pageSize
	OrderStr string `protobuf:"bytes,3,opt,name=orderStr,proto3" json:"orderStr,omitempty"`  //orderStr
	IsAsc    bool   `protobuf:"varint,4,opt,name=isAsc,proto3" json:"isAsc,omitempty"`       //isAsc
	NodeId   uint64 `protobuf:"varint,5,opt,name=nodeId,proto3" json:"nodeId,omitempty"`     //id
	Key      string `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SearchOnecNodeTaintListReq) Reset() {
	*x = SearchOnecNodeTaintListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecNodeTaintListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecNodeTaintListReq) ProtoMessage() {}

func (x *SearchOnecNodeTaintListReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecNodeTaintListReq.ProtoReflect.Descriptor instead.
func (*SearchOnecNodeTaintListReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{57}
}

func (x *SearchOnecNodeTaintListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchOnecNodeTaintListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchOnecNodeTaintListReq) GetOrderStr() string {
	if x != nil {
		return x.OrderStr
	}
	return ""
}

func (x *SearchOnecNodeTaintListReq) GetIsAsc() bool {
	if x != nil {
		return x.IsAsc
	}
	return false
}

func (x *SearchOnecNodeTaintListReq) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *SearchOnecNodeTaintListReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type NodeTaints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeId     uint64 `protobuf:"varint,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Key        string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value      string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	EffectCode string `protobuf:"bytes,5,opt,name=effectCode,proto3" json:"effectCode,omitempty"`
	CreatedAt  int64  `protobuf:"varint,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt  int64  `protobuf:"varint,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *NodeTaints) Reset() {
	*x = NodeTaints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeTaints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeTaints) ProtoMessage() {}

func (x *NodeTaints) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeTaints.ProtoReflect.Descriptor instead.
func (*NodeTaints) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{58}
}

func (x *NodeTaints) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NodeTaints) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *NodeTaints) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NodeTaints) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *NodeTaints) GetEffectCode() string {
	if x != nil {
		return x.EffectCode
	}
	return ""
}

func (x *NodeTaints) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *NodeTaints) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type SearchOnecNodeTaintListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*NodeTaints `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total uint64        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SearchOnecNodeTaintListResp) Reset() {
	*x = SearchOnecNodeTaintListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecNodeTaintListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecNodeTaintListResp) ProtoMessage() {}

func (x *SearchOnecNodeTaintListResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecNodeTaintListResp.ProtoReflect.Descriptor instead.
func (*SearchOnecNodeTaintListResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{59}
}

func (x *SearchOnecNodeTaintListResp) GetData() []*NodeTaints {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SearchOnecNodeTaintListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 驱逐节点pod
type EvictNodePodReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId    uint64 `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"` //id
	UpdatedBy string `protobuf:"bytes,4,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
}

func (x *EvictNodePodReq) Reset() {
	*x = EvictNodePodReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvictNodePodReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvictNodePodReq) ProtoMessage() {}

func (x *EvictNodePodReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvictNodePodReq.ProtoReflect.Descriptor instead.
func (*EvictNodePodReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{60}
}

func (x *EvictNodePodReq) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *EvictNodePodReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type EvictNodePodResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EvictNodePodResp) Reset() {
	*x = EvictNodePodResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvictNodePodResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvictNodePodResp) ProtoMessage() {}

func (x *EvictNodePodResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvictNodePodResp.ProtoReflect.Descriptor instead.
func (*EvictNodePodResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{61}
}

// --------------------------------项目表，记录项目信息--------------------------------
type OnecProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                  //主键，自增 ID
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`               //项目的中文名称
	Identifier  string `protobuf:"bytes,3,opt,name=identifier,proto3" json:"identifier,omitempty"`   //项目的唯一标识符（英文），便于程序中唯一标识
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"` //项目描述信息
	IsDefault   int64  `protobuf:"varint,5,opt,name=isDefault,proto3" json:"isDefault,omitempty"`
	CreatedBy   string `protobuf:"bytes,6,opt,name=createdBy,proto3" json:"createdBy,omitempty"`  //记录创建人
	UpdatedBy   string `protobuf:"bytes,7,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`  //记录更新人
	CreatedAt   int64  `protobuf:"varint,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"` //项目创建时间
	UpdatedAt   int64  `protobuf:"varint,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"` //项目信息最后更新时间
}

func (x *OnecProject) Reset() {
	*x = OnecProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnecProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnecProject) ProtoMessage() {}

func (x *OnecProject) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnecProject.ProtoReflect.Descriptor instead.
func (*OnecProject) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{62}
}

func (x *OnecProject) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OnecProject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OnecProject) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *OnecProject) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OnecProject) GetIsDefault() int64 {
	if x != nil {
		return x.IsDefault
	}
	return 0
}

func (x *OnecProject) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *OnecProject) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *OnecProject) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *OnecProject) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type AddOnecProjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`               //项目的中文名称
	Identifier  string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`   //项目的唯一标识符（英文），便于程序中唯一标识
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"` //项目描述信息
	CreatedBy   string `protobuf:"bytes,4,opt,name=createdBy,proto3" json:"createdBy,omitempty"`     //记录创建人
	UpdatedBy   string `protobuf:"bytes,5,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`     //记录更新人
}

func (x *AddOnecProjectReq) Reset() {
	*x = AddOnecProjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecProjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecProjectReq) ProtoMessage() {}

func (x *AddOnecProjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecProjectReq.ProtoReflect.Descriptor instead.
func (*AddOnecProjectReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{63}
}

func (x *AddOnecProjectReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddOnecProjectReq) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *AddOnecProjectReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddOnecProjectReq) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *AddOnecProjectReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type AddOnecProjectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddOnecProjectResp) Reset() {
	*x = AddOnecProjectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecProjectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecProjectResp) ProtoMessage() {}

func (x *AddOnecProjectResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecProjectResp.ProtoReflect.Descriptor instead.
func (*AddOnecProjectResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{64}
}

type UpdateOnecProjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                  //主键，自增 ID
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`               //项目的中文名称
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"` //项目描述信息
	UpdatedBy   string `protobuf:"bytes,4,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`     //记录更新人
}

func (x *UpdateOnecProjectReq) Reset() {
	*x = UpdateOnecProjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOnecProjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOnecProjectReq) ProtoMessage() {}

func (x *UpdateOnecProjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOnecProjectReq.ProtoReflect.Descriptor instead.
func (*UpdateOnecProjectReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{65}
}

func (x *UpdateOnecProjectReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOnecProjectReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOnecProjectReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateOnecProjectReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type UpdateOnecProjectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOnecProjectResp) Reset() {
	*x = UpdateOnecProjectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOnecProjectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOnecProjectResp) ProtoMessage() {}

func (x *UpdateOnecProjectResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOnecProjectResp.ProtoReflect.Descriptor instead.
func (*UpdateOnecProjectResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{66}
}

type DelOnecProjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
	UpdatedBy string `protobuf:"bytes,2,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
}

func (x *DelOnecProjectReq) Reset() {
	*x = DelOnecProjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecProjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecProjectReq) ProtoMessage() {}

func (x *DelOnecProjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecProjectReq.ProtoReflect.Descriptor instead.
func (*DelOnecProjectReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{67}
}

func (x *DelOnecProjectReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DelOnecProjectReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type DelOnecProjectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelOnecProjectResp) Reset() {
	*x = DelOnecProjectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecProjectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecProjectResp) ProtoMessage() {}

func (x *DelOnecProjectResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecProjectResp.ProtoReflect.Descriptor instead.
func (*DelOnecProjectResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{68}
}

type GetOnecProjectByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
}

func (x *GetOnecProjectByIdReq) Reset() {
	*x = GetOnecProjectByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnecProjectByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnecProjectByIdReq) ProtoMessage() {}

func (x *GetOnecProjectByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnecProjectByIdReq.ProtoReflect.Descriptor instead.
func (*GetOnecProjectByIdReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{69}
}

func (x *GetOnecProjectByIdReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetOnecProjectByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *OnecProject `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` //onecProject
}

func (x *GetOnecProjectByIdResp) Reset() {
	*x = GetOnecProjectByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnecProjectByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnecProjectByIdResp) ProtoMessage() {}

func (x *GetOnecProjectByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnecProjectByIdResp.ProtoReflect.Descriptor instead.
func (*GetOnecProjectByIdResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{70}
}

func (x *GetOnecProjectByIdResp) GetData() *OnecProject {
	if x != nil {
		return x.Data
	}
	return nil
}

type SearchOnecProjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`            //page
	PageSize   uint64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`    //pageSize
	OrderStr   string `protobuf:"bytes,3,opt,name=orderStr,proto3" json:"orderStr,omitempty"`     //orderStr
	IsAsc      bool   `protobuf:"varint,4,opt,name=isAsc,proto3" json:"isAsc,omitempty"`          //isAsc
	Name       string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`             //项目的中文名称
	Identifier string `protobuf:"bytes,6,opt,name=identifier,proto3" json:"identifier,omitempty"` //项目的唯一标识符（英文），便于程序中唯一标识
	CreatedBy  string `protobuf:"bytes,7,opt,name=createdBy,proto3" json:"createdBy,omitempty"`   //记录创建人
	UpdatedBy  string `protobuf:"bytes,8,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`   //记录更新人
}

func (x *SearchOnecProjectReq) Reset() {
	*x = SearchOnecProjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecProjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecProjectReq) ProtoMessage() {}

func (x *SearchOnecProjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecProjectReq.ProtoReflect.Descriptor instead.
func (*SearchOnecProjectReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{71}
}

func (x *SearchOnecProjectReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchOnecProjectReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchOnecProjectReq) GetOrderStr() string {
	if x != nil {
		return x.OrderStr
	}
	return ""
}

func (x *SearchOnecProjectReq) GetIsAsc() bool {
	if x != nil {
		return x.IsAsc
	}
	return false
}

func (x *SearchOnecProjectReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchOnecProjectReq) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *SearchOnecProjectReq) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *SearchOnecProjectReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type SearchOnecProjectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*OnecProject `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`    //onecProject
	Total uint64         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //total
}

func (x *SearchOnecProjectResp) Reset() {
	*x = SearchOnecProjectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecProjectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecProjectResp) ProtoMessage() {}

func (x *SearchOnecProjectResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecProjectResp.ProtoReflect.Descriptor instead.
func (*SearchOnecProjectResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{72}
}

func (x *SearchOnecProjectResp) GetData() []*OnecProject {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SearchOnecProjectResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// --------------------------------项目与集群的对应关系表，记录资源配额和使用情况--------------------------------
type OnecProjectQuota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                               //主键，自增 ID
	ClusterUuid          string  `protobuf:"bytes,2,opt,name=clusterUuid,proto3" json:"clusterUuid,omitempty"`              //关联的集群 ID
	ProjectId            uint64  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId,omitempty"`                 //关联的项目 ID
	CpuQuota             int64   `protobuf:"varint,4,opt,name=cpuQuota,proto3" json:"cpuQuota,omitempty"`                   //CPU 分配配额（单位：核）
	CpuOvercommit        float64 `protobuf:"fixed64,5,opt,name=cpuOvercommit,proto3" json:"cpuOvercommit,omitempty"`        //CPU 超配比（如 1.5 表示允许超配 50%）
	CpuLimit             float64 `protobuf:"fixed64,6,opt,name=cpuLimit,proto3" json:"cpuLimit,omitempty"`                  //CPU 上限值（单位：核）
	CpuUsed              float64 `protobuf:"fixed64,7,opt,name=cpuUsed,proto3" json:"cpuUsed,omitempty"`                    //已使用的 CPU 资源（单位：核）
	CpuLimitRemain       float64 `protobuf:"fixed64,8,opt,name=cpuLimitRemain,proto3" json:"cpuLimitRemain,omitempty"`      // cpu 剩余资源
	MemoryQuota          float64 `protobuf:"fixed64,9,opt,name=memoryQuota,proto3" json:"memoryQuota,omitempty"`            //内存分配配额（单位：GiB）
	MemoryOvercommit     float64 `protobuf:"fixed64,10,opt,name=memoryOvercommit,proto3" json:"memoryOvercommit,omitempty"` //内存超配比（如 1.2 表示允许超配 20%）
	MemoryLimit          float64 `protobuf:"fixed64,11,opt,name=memoryLimit,proto3" json:"memoryLimit,omitempty"`           //内存上限值（单位：GiB）
	MemoryUsed           float64 `protobuf:"fixed64,12,opt,name=memoryUsed,proto3" json:"memoryUsed,omitempty"`             //已使用的内存资源（单位：GiB）
	MemoryLimitRemain    float64 `protobuf:"fixed64,13,opt,name=memoryLimitRemain,proto3" json:"memoryLimitRemain,omitempty"`
	StorageLimit         int64   `protobuf:"varint,14,opt,name=storageLimit,proto3" json:"storageLimit,omitempty"` //项目可使用的存储总量（单位：GiB）
	StorageUsed          int64   `protobuf:"varint,15,opt,name=storageUsed,proto3" json:"storageUsed,omitempty"`
	StorageLimitRemain   int64   `protobuf:"varint,16,opt,name=storageLimitRemain,proto3" json:"storageLimitRemain,omitempty"`
	ConfigmapLimit       int64   `protobuf:"varint,17,opt,name=configmapLimit,proto3" json:"configmapLimit,omitempty"` //项目允许创建的 ConfigMap 数量上限
	ConfigmapUsed        int64   `protobuf:"varint,18,opt,name=configmapUsed,proto3" json:"configmapUsed,omitempty"`
	ConfigmapLimitRemain int64   `protobuf:"varint,19,opt,name=configmapLimitRemain,proto3" json:"configmapLimitRemain,omitempty"`
	SecretLimit          int64   `protobuf:"varint,20,opt,name=secretLimit,proto3" json:"secretLimit,omitempty"`
	SecretUsed           int64   `protobuf:"varint,21,opt,name=secretUsed,proto3" json:"secretUsed,omitempty"`
	SecretLimitRemain    int64   `protobuf:"varint,22,opt,name=secretLimitRemain,proto3" json:"secretLimitRemain,omitempty"`
	PvcLimit             int64   `protobuf:"varint,23,opt,name=pvcLimit,proto3" json:"pvcLimit,omitempty"` //项目允许创建的 PVC（PersistentVolumeClaim）数量上限
	PvcUsed              int64   `protobuf:"varint,24,opt,name=pvcUsed,proto3" json:"pvcUsed,omitempty"`
	PvcLimitRemain       int64   `protobuf:"varint,25,opt,name=pvcLimitRemain,proto3" json:"pvcLimitRemain,omitempty"`
	PodLimit             int64   `protobuf:"varint,26,opt,name=podLimit,proto3" json:"podLimit,omitempty"` //项目允许创建的 Pod 数量上限
	PodUsed              int64   `protobuf:"varint,27,opt,name=podUsed,proto3" json:"podUsed,omitempty"`
	PodLimitRemain       int64   `protobuf:"varint,28,opt,name=podLimitRemain,proto3" json:"podLimitRemain,omitempty"`
	NodeportLimit        int64   `protobuf:"varint,29,opt,name=nodeportLimit,proto3" json:"nodeportLimit,omitempty"` //项目允许使用的 NodePort 数量上限
	NodeportUsed         int64   `protobuf:"varint,30,opt,name=nodeportUsed,proto3" json:"nodeportUsed,omitempty"`
	NodeportLimitRemain  int64   `protobuf:"varint,31,opt,name=nodeportLimitRemain,proto3" json:"nodeportLimitRemain,omitempty"`
	Status               string  `protobuf:"bytes,32,opt,name=status,proto3" json:"status,omitempty"`        //项目状态（如 `Active`、`Disabled`、`Archived`）
	CreatedBy            string  `protobuf:"bytes,33,opt,name=createdBy,proto3" json:"createdBy,omitempty"`  //记录创建人
	UpdatedBy            string  `protobuf:"bytes,34,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`  //记录更新人
	CreatedAt            int64   `protobuf:"varint,35,opt,name=createdAt,proto3" json:"createdAt,omitempty"` //项目创建时间
	UpdatedAt            int64   `protobuf:"varint,36,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"` //项目信息最后更新时间
}

func (x *OnecProjectQuota) Reset() {
	*x = OnecProjectQuota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnecProjectQuota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnecProjectQuota) ProtoMessage() {}

func (x *OnecProjectQuota) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnecProjectQuota.ProtoReflect.Descriptor instead.
func (*OnecProjectQuota) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{73}
}

func (x *OnecProjectQuota) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OnecProjectQuota) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

func (x *OnecProjectQuota) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *OnecProjectQuota) GetCpuQuota() int64 {
	if x != nil {
		return x.CpuQuota
	}
	return 0
}

func (x *OnecProjectQuota) GetCpuOvercommit() float64 {
	if x != nil {
		return x.CpuOvercommit
	}
	return 0
}

func (x *OnecProjectQuota) GetCpuLimit() float64 {
	if x != nil {
		return x.CpuLimit
	}
	return 0
}

func (x *OnecProjectQuota) GetCpuUsed() float64 {
	if x != nil {
		return x.CpuUsed
	}
	return 0
}

func (x *OnecProjectQuota) GetCpuLimitRemain() float64 {
	if x != nil {
		return x.CpuLimitRemain
	}
	return 0
}

func (x *OnecProjectQuota) GetMemoryQuota() float64 {
	if x != nil {
		return x.MemoryQuota
	}
	return 0
}

func (x *OnecProjectQuota) GetMemoryOvercommit() float64 {
	if x != nil {
		return x.MemoryOvercommit
	}
	return 0
}

func (x *OnecProjectQuota) GetMemoryLimit() float64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *OnecProjectQuota) GetMemoryUsed() float64 {
	if x != nil {
		return x.MemoryUsed
	}
	return 0
}

func (x *OnecProjectQuota) GetMemoryLimitRemain() float64 {
	if x != nil {
		return x.MemoryLimitRemain
	}
	return 0
}

func (x *OnecProjectQuota) GetStorageLimit() int64 {
	if x != nil {
		return x.StorageLimit
	}
	return 0
}

func (x *OnecProjectQuota) GetStorageUsed() int64 {
	if x != nil {
		return x.StorageUsed
	}
	return 0
}

func (x *OnecProjectQuota) GetStorageLimitRemain() int64 {
	if x != nil {
		return x.StorageLimitRemain
	}
	return 0
}

func (x *OnecProjectQuota) GetConfigmapLimit() int64 {
	if x != nil {
		return x.ConfigmapLimit
	}
	return 0
}

func (x *OnecProjectQuota) GetConfigmapUsed() int64 {
	if x != nil {
		return x.ConfigmapUsed
	}
	return 0
}

func (x *OnecProjectQuota) GetConfigmapLimitRemain() int64 {
	if x != nil {
		return x.ConfigmapLimitRemain
	}
	return 0
}

func (x *OnecProjectQuota) GetSecretLimit() int64 {
	if x != nil {
		return x.SecretLimit
	}
	return 0
}

func (x *OnecProjectQuota) GetSecretUsed() int64 {
	if x != nil {
		return x.SecretUsed
	}
	return 0
}

func (x *OnecProjectQuota) GetSecretLimitRemain() int64 {
	if x != nil {
		return x.SecretLimitRemain
	}
	return 0
}

func (x *OnecProjectQuota) GetPvcLimit() int64 {
	if x != nil {
		return x.PvcLimit
	}
	return 0
}

func (x *OnecProjectQuota) GetPvcUsed() int64 {
	if x != nil {
		return x.PvcUsed
	}
	return 0
}

func (x *OnecProjectQuota) GetPvcLimitRemain() int64 {
	if x != nil {
		return x.PvcLimitRemain
	}
	return 0
}

func (x *OnecProjectQuota) GetPodLimit() int64 {
	if x != nil {
		return x.PodLimit
	}
	return 0
}

func (x *OnecProjectQuota) GetPodUsed() int64 {
	if x != nil {
		return x.PodUsed
	}
	return 0
}

func (x *OnecProjectQuota) GetPodLimitRemain() int64 {
	if x != nil {
		return x.PodLimitRemain
	}
	return 0
}

func (x *OnecProjectQuota) GetNodeportLimit() int64 {
	if x != nil {
		return x.NodeportLimit
	}
	return 0
}

func (x *OnecProjectQuota) GetNodeportUsed() int64 {
	if x != nil {
		return x.NodeportUsed
	}
	return 0
}

func (x *OnecProjectQuota) GetNodeportLimitRemain() int64 {
	if x != nil {
		return x.NodeportLimitRemain
	}
	return 0
}

func (x *OnecProjectQuota) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OnecProjectQuota) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *OnecProjectQuota) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *OnecProjectQuota) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *OnecProjectQuota) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type AddOnecProjectQuotaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterUuid      string  `protobuf:"bytes,1,opt,name=clusterUuid,proto3" json:"clusterUuid,omitempty"`             //关联的集群 ID
	ProjectId        uint64  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId,omitempty"`                //关联的项目 ID
	CpuQuota         int64   `protobuf:"varint,3,opt,name=cpuQuota,proto3" json:"cpuQuota,omitempty"`                  //CPU 分配配额（单位：核）
	CpuOvercommit    float64 `protobuf:"fixed64,4,opt,name=cpuOvercommit,proto3" json:"cpuOvercommit,omitempty"`       //CPU 超配比（如 1.5 表示允许超配 50%）
	CpuLimit         float64 `protobuf:"fixed64,5,opt,name=cpuLimit,proto3" json:"cpuLimit,omitempty"`                 //CPU 上限值（单位：核）
	MemoryQuota      float64 `protobuf:"fixed64,7,opt,name=memoryQuota,proto3" json:"memoryQuota,omitempty"`           //内存分配配额（单位：GiB）
	MemoryOvercommit float64 `protobuf:"fixed64,8,opt,name=memoryOvercommit,proto3" json:"memoryOvercommit,omitempty"` //内存超配比（如 1.2 表示允许超配 20%）
	MemoryLimit      float64 `protobuf:"fixed64,9,opt,name=memoryLimit,proto3" json:"memoryLimit,omitempty"`           //内存上限值（单位：GiB）
	StorageLimit     int64   `protobuf:"varint,11,opt,name=storageLimit,proto3" json:"storageLimit,omitempty"`         //项目可使用的存储总量（单位：GiB）
	ConfigmapLimit   int64   `protobuf:"varint,12,opt,name=configmapLimit,proto3" json:"configmapLimit,omitempty"`     //项目允许创建的 ConfigMap 数量上限
	PvcLimit         int64   `protobuf:"varint,13,opt,name=pvcLimit,proto3" json:"pvcLimit,omitempty"`                 //项目允许创建的 PVC（PersistentVolumeClaim）数量上限
	PodLimit         int64   `protobuf:"varint,14,opt,name=podLimit,proto3" json:"podLimit,omitempty"`                 //项目允许创建的 Pod 数量上限
	NodeportLimit    int64   `protobuf:"varint,15,opt,name=nodeportLimit,proto3" json:"nodeportLimit,omitempty"`       //项目允许使用的 NodePort 数量上限
	SecretLimit      int64   `protobuf:"varint,16,opt,name=secretLimit,proto3" json:"secretLimit,omitempty"`
	CreatedBy        string  `protobuf:"bytes,17,opt,name=createdBy,proto3" json:"createdBy,omitempty"` //记录创建人
	UpdatedBy        string  `protobuf:"bytes,18,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"` //记录更新人
}

func (x *AddOnecProjectQuotaReq) Reset() {
	*x = AddOnecProjectQuotaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecProjectQuotaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecProjectQuotaReq) ProtoMessage() {}

func (x *AddOnecProjectQuotaReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecProjectQuotaReq.ProtoReflect.Descriptor instead.
func (*AddOnecProjectQuotaReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{74}
}

func (x *AddOnecProjectQuotaReq) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

func (x *AddOnecProjectQuotaReq) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *AddOnecProjectQuotaReq) GetCpuQuota() int64 {
	if x != nil {
		return x.CpuQuota
	}
	return 0
}

func (x *AddOnecProjectQuotaReq) GetCpuOvercommit() float64 {
	if x != nil {
		return x.CpuOvercommit
	}
	return 0
}

func (x *AddOnecProjectQuotaReq) GetCpuLimit() float64 {
	if x != nil {
		return x.CpuLimit
	}
	return 0
}

func (x *AddOnecProjectQuotaReq) GetMemoryQuota() float64 {
	if x != nil {
		return x.MemoryQuota
	}
	return 0
}

func (x *AddOnecProjectQuotaReq) GetMemoryOvercommit() float64 {
	if x != nil {
		return x.MemoryOvercommit
	}
	return 0
}

func (x *AddOnecProjectQuotaReq) GetMemoryLimit() float64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *AddOnecProjectQuotaReq) GetStorageLimit() int64 {
	if x != nil {
		return x.StorageLimit
	}
	return 0
}

func (x *AddOnecProjectQuotaReq) GetConfigmapLimit() int64 {
	if x != nil {
		return x.ConfigmapLimit
	}
	return 0
}

func (x *AddOnecProjectQuotaReq) GetPvcLimit() int64 {
	if x != nil {
		return x.PvcLimit
	}
	return 0
}

func (x *AddOnecProjectQuotaReq) GetPodLimit() int64 {
	if x != nil {
		return x.PodLimit
	}
	return 0
}

func (x *AddOnecProjectQuotaReq) GetNodeportLimit() int64 {
	if x != nil {
		return x.NodeportLimit
	}
	return 0
}

func (x *AddOnecProjectQuotaReq) GetSecretLimit() int64 {
	if x != nil {
		return x.SecretLimit
	}
	return 0
}

func (x *AddOnecProjectQuotaReq) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *AddOnecProjectQuotaReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type AddOnecProjectQuotaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddOnecProjectQuotaResp) Reset() {
	*x = AddOnecProjectQuotaResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecProjectQuotaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecProjectQuotaResp) ProtoMessage() {}

func (x *AddOnecProjectQuotaResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecProjectQuotaResp.ProtoReflect.Descriptor instead.
func (*AddOnecProjectQuotaResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{75}
}

type UpdateOnecProjectQuotaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                              //主键，自增 ID
	ClusterUuid      string  `protobuf:"bytes,2,opt,name=clusterUuid,proto3" json:"clusterUuid,omitempty"`             //关联的集群 ID
	ProjectId        uint64  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId,omitempty"`                //关联的项目 ID
	CpuQuota         int64   `protobuf:"varint,4,opt,name=cpuQuota,proto3" json:"cpuQuota,omitempty"`                  //CPU 分配配额（单位：核）
	CpuOvercommit    float64 `protobuf:"fixed64,5,opt,name=cpuOvercommit,proto3" json:"cpuOvercommit,omitempty"`       //CPU 超配比（如 1.5 表示允许超配 50%）
	CpuLimit         float64 `protobuf:"fixed64,6,opt,name=cpuLimit,proto3" json:"cpuLimit,omitempty"`                 //CPU 上限值（单位：核）
	MemoryQuota      float64 `protobuf:"fixed64,8,opt,name=memoryQuota,proto3" json:"memoryQuota,omitempty"`           //内存分配配额（单位：GiB）
	MemoryOvercommit float64 `protobuf:"fixed64,9,opt,name=memoryOvercommit,proto3" json:"memoryOvercommit,omitempty"` //内存超配比（如 1.2 表示允许超配 20%）
	MemoryLimit      float64 `protobuf:"fixed64,10,opt,name=memoryLimit,proto3" json:"memoryLimit,omitempty"`          //内存上限值（单位：GiB）
	StorageLimit     int64   `protobuf:"varint,12,opt,name=storageLimit,proto3" json:"storageLimit,omitempty"`         //项目可使用的存储总量（单位：GiB）
	ConfigmapLimit   int64   `protobuf:"varint,13,opt,name=configmapLimit,proto3" json:"configmapLimit,omitempty"`     //项目允许创建的 ConfigMap 数量上限
	PvcLimit         int64   `protobuf:"varint,14,opt,name=pvcLimit,proto3" json:"pvcLimit,omitempty"`                 //项目允许创建的 PVC（PersistentVolumeClaim）数量上限
	PodLimit         int64   `protobuf:"varint,15,opt,name=podLimit,proto3" json:"podLimit,omitempty"`                 //项目允许创建的 Pod 数量上限
	SecretLimit      int64   `protobuf:"varint,16,opt,name=secretLimit,proto3" json:"secretLimit,omitempty"`
	NodeportLimit    int64   `protobuf:"varint,17,opt,name=nodeportLimit,proto3" json:"nodeportLimit,omitempty"` //项目允许使用的 NodePort 数量上限
	UpdatedBy        string  `protobuf:"bytes,18,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`          //记录更新人
}

func (x *UpdateOnecProjectQuotaReq) Reset() {
	*x = UpdateOnecProjectQuotaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOnecProjectQuotaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOnecProjectQuotaReq) ProtoMessage() {}

func (x *UpdateOnecProjectQuotaReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOnecProjectQuotaReq.ProtoReflect.Descriptor instead.
func (*UpdateOnecProjectQuotaReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{76}
}

func (x *UpdateOnecProjectQuotaReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOnecProjectQuotaReq) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

func (x *UpdateOnecProjectQuotaReq) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateOnecProjectQuotaReq) GetCpuQuota() int64 {
	if x != nil {
		return x.CpuQuota
	}
	return 0
}

func (x *UpdateOnecProjectQuotaReq) GetCpuOvercommit() float64 {
	if x != nil {
		return x.CpuOvercommit
	}
	return 0
}

func (x *UpdateOnecProjectQuotaReq) GetCpuLimit() float64 {
	if x != nil {
		return x.CpuLimit
	}
	return 0
}

func (x *UpdateOnecProjectQuotaReq) GetMemoryQuota() float64 {
	if x != nil {
		return x.MemoryQuota
	}
	return 0
}

func (x *UpdateOnecProjectQuotaReq) GetMemoryOvercommit() float64 {
	if x != nil {
		return x.MemoryOvercommit
	}
	return 0
}

func (x *UpdateOnecProjectQuotaReq) GetMemoryLimit() float64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *UpdateOnecProjectQuotaReq) GetStorageLimit() int64 {
	if x != nil {
		return x.StorageLimit
	}
	return 0
}

func (x *UpdateOnecProjectQuotaReq) GetConfigmapLimit() int64 {
	if x != nil {
		return x.ConfigmapLimit
	}
	return 0
}

func (x *UpdateOnecProjectQuotaReq) GetPvcLimit() int64 {
	if x != nil {
		return x.PvcLimit
	}
	return 0
}

func (x *UpdateOnecProjectQuotaReq) GetPodLimit() int64 {
	if x != nil {
		return x.PodLimit
	}
	return 0
}

func (x *UpdateOnecProjectQuotaReq) GetSecretLimit() int64 {
	if x != nil {
		return x.SecretLimit
	}
	return 0
}

func (x *UpdateOnecProjectQuotaReq) GetNodeportLimit() int64 {
	if x != nil {
		return x.NodeportLimit
	}
	return 0
}

func (x *UpdateOnecProjectQuotaReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type UpdateOnecProjectQuotaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOnecProjectQuotaResp) Reset() {
	*x = UpdateOnecProjectQuotaResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOnecProjectQuotaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOnecProjectQuotaResp) ProtoMessage() {}

func (x *UpdateOnecProjectQuotaResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOnecProjectQuotaResp.ProtoReflect.Descriptor instead.
func (*UpdateOnecProjectQuotaResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{77}
}

type DelOnecProjectQuotaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
}

func (x *DelOnecProjectQuotaReq) Reset() {
	*x = DelOnecProjectQuotaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecProjectQuotaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecProjectQuotaReq) ProtoMessage() {}

func (x *DelOnecProjectQuotaReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecProjectQuotaReq.ProtoReflect.Descriptor instead.
func (*DelOnecProjectQuotaReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{78}
}

func (x *DelOnecProjectQuotaReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DelOnecProjectQuotaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelOnecProjectQuotaResp) Reset() {
	*x = DelOnecProjectQuotaResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecProjectQuotaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecProjectQuotaResp) ProtoMessage() {}

func (x *DelOnecProjectQuotaResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecProjectQuotaResp.ProtoReflect.Descriptor instead.
func (*DelOnecProjectQuotaResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{79}
}

type GetOnecProjectQuotaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   uint64 `protobuf:"varint,1,opt,name=projectId,proto3" json:"projectId,omitempty"` //id
	ClusterUuid string `protobuf:"bytes,2,opt,name=clusterUuid,proto3" json:"clusterUuid,omitempty"`
}

func (x *GetOnecProjectQuotaReq) Reset() {
	*x = GetOnecProjectQuotaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnecProjectQuotaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnecProjectQuotaReq) ProtoMessage() {}

func (x *GetOnecProjectQuotaReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnecProjectQuotaReq.ProtoReflect.Descriptor instead.
func (*GetOnecProjectQuotaReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{80}
}

func (x *GetOnecProjectQuotaReq) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetOnecProjectQuotaReq) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

type GetOnecProjectQuotaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *OnecProjectQuota `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` //onecProjectQuota
}

func (x *GetOnecProjectQuotaResp) Reset() {
	*x = GetOnecProjectQuotaResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnecProjectQuotaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnecProjectQuotaResp) ProtoMessage() {}

func (x *GetOnecProjectQuotaResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnecProjectQuotaResp.ProtoReflect.Descriptor instead.
func (*GetOnecProjectQuotaResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{81}
}

func (x *GetOnecProjectQuotaResp) GetData() *OnecProjectQuota {
	if x != nil {
		return x.Data
	}
	return nil
}

// --------------------------------项目管理员表，关联项目与用户的多对多关系--------------------------------
type OnecProjectAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`               //主键，自增 ID
	ProjectId uint64 `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId,omitempty"` //关联的项目 ID
	UserId    uint64 `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`       //关联的用户 ID
	CreatedBy string `protobuf:"bytes,4,opt,name=createdBy,proto3" json:"createdBy,omitempty"`  //记录创建人
	UpdatedBy string `protobuf:"bytes,5,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`  //记录更新人
	CreatedAt int64  `protobuf:"varint,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"` //记录创建时间
	UpdatedAt int64  `protobuf:"varint,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"` //记录更新时间
}

func (x *OnecProjectAdmin) Reset() {
	*x = OnecProjectAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnecProjectAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnecProjectAdmin) ProtoMessage() {}

func (x *OnecProjectAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnecProjectAdmin.ProtoReflect.Descriptor instead.
func (*OnecProjectAdmin) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{82}
}

func (x *OnecProjectAdmin) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OnecProjectAdmin) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *OnecProjectAdmin) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OnecProjectAdmin) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *OnecProjectAdmin) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *OnecProjectAdmin) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *OnecProjectAdmin) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type AddOnecProjectAdminReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=projectId,proto3" json:"projectId,omitempty"` //关联的项目 ID
	UserId    uint64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`       //关联的用户 ID
	CreatedBy string `protobuf:"bytes,3,opt,name=createdBy,proto3" json:"createdBy,omitempty"`  //记录创建人
	UpdatedBy string `protobuf:"bytes,4,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`  //记录更新人
}

func (x *AddOnecProjectAdminReq) Reset() {
	*x = AddOnecProjectAdminReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecProjectAdminReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecProjectAdminReq) ProtoMessage() {}

func (x *AddOnecProjectAdminReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecProjectAdminReq.ProtoReflect.Descriptor instead.
func (*AddOnecProjectAdminReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{83}
}

func (x *AddOnecProjectAdminReq) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *AddOnecProjectAdminReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddOnecProjectAdminReq) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *AddOnecProjectAdminReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type AddOnecProjectAdminResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddOnecProjectAdminResp) Reset() {
	*x = AddOnecProjectAdminResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecProjectAdminResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecProjectAdminResp) ProtoMessage() {}

func (x *AddOnecProjectAdminResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecProjectAdminResp.ProtoReflect.Descriptor instead.
func (*AddOnecProjectAdminResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{84}
}

type UpdateOnecProjectAdminReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`               //主键，自增 ID
	ProjectId uint64 `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId,omitempty"` //关联的项目 ID
	UserId    uint64 `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`       //关联的用户 ID
	UpdatedBy string `protobuf:"bytes,4,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`  //记录更新人
}

func (x *UpdateOnecProjectAdminReq) Reset() {
	*x = UpdateOnecProjectAdminReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOnecProjectAdminReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOnecProjectAdminReq) ProtoMessage() {}

func (x *UpdateOnecProjectAdminReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOnecProjectAdminReq.ProtoReflect.Descriptor instead.
func (*UpdateOnecProjectAdminReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{85}
}

func (x *UpdateOnecProjectAdminReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOnecProjectAdminReq) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateOnecProjectAdminReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateOnecProjectAdminReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type UpdateOnecProjectAdminResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOnecProjectAdminResp) Reset() {
	*x = UpdateOnecProjectAdminResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOnecProjectAdminResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOnecProjectAdminResp) ProtoMessage() {}

func (x *UpdateOnecProjectAdminResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOnecProjectAdminResp.ProtoReflect.Descriptor instead.
func (*UpdateOnecProjectAdminResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{86}
}

type DelOnecProjectAdminReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
}

func (x *DelOnecProjectAdminReq) Reset() {
	*x = DelOnecProjectAdminReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecProjectAdminReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecProjectAdminReq) ProtoMessage() {}

func (x *DelOnecProjectAdminReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecProjectAdminReq.ProtoReflect.Descriptor instead.
func (*DelOnecProjectAdminReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{87}
}

func (x *DelOnecProjectAdminReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DelOnecProjectAdminResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelOnecProjectAdminResp) Reset() {
	*x = DelOnecProjectAdminResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecProjectAdminResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecProjectAdminResp) ProtoMessage() {}

func (x *DelOnecProjectAdminResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecProjectAdminResp.ProtoReflect.Descriptor instead.
func (*DelOnecProjectAdminResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{88}
}

type GetOnecProjectAdminByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
}

func (x *GetOnecProjectAdminByIdReq) Reset() {
	*x = GetOnecProjectAdminByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnecProjectAdminByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnecProjectAdminByIdReq) ProtoMessage() {}

func (x *GetOnecProjectAdminByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnecProjectAdminByIdReq.ProtoReflect.Descriptor instead.
func (*GetOnecProjectAdminByIdReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{89}
}

func (x *GetOnecProjectAdminByIdReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetOnecProjectAdminByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *OnecProjectAdmin `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` //onecProjectAdmin
}

func (x *GetOnecProjectAdminByIdResp) Reset() {
	*x = GetOnecProjectAdminByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnecProjectAdminByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnecProjectAdminByIdResp) ProtoMessage() {}

func (x *GetOnecProjectAdminByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnecProjectAdminByIdResp.ProtoReflect.Descriptor instead.
func (*GetOnecProjectAdminByIdResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{90}
}

func (x *GetOnecProjectAdminByIdResp) GetData() *OnecProjectAdmin {
	if x != nil {
		return x.Data
	}
	return nil
}

type SearchOnecProjectAdminReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`           //page
	PageSize  uint64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`   //pageSize
	OrderStr  string `protobuf:"bytes,3,opt,name=orderStr,proto3" json:"orderStr,omitempty"`    //orderStr
	IsAsc     bool   `protobuf:"varint,4,opt,name=isAsc,proto3" json:"isAsc,omitempty"`         //isAsc
	ProjectId uint64 `protobuf:"varint,5,opt,name=projectId,proto3" json:"projectId,omitempty"` //关联的项目 ID
	UserId    uint64 `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty"`       //关联的用户 ID
	CreatedBy string `protobuf:"bytes,7,opt,name=createdBy,proto3" json:"createdBy,omitempty"`  //记录创建人
	UpdatedBy string `protobuf:"bytes,8,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`  //记录更新人
}

func (x *SearchOnecProjectAdminReq) Reset() {
	*x = SearchOnecProjectAdminReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecProjectAdminReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecProjectAdminReq) ProtoMessage() {}

func (x *SearchOnecProjectAdminReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecProjectAdminReq.ProtoReflect.Descriptor instead.
func (*SearchOnecProjectAdminReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{91}
}

func (x *SearchOnecProjectAdminReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchOnecProjectAdminReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchOnecProjectAdminReq) GetOrderStr() string {
	if x != nil {
		return x.OrderStr
	}
	return ""
}

func (x *SearchOnecProjectAdminReq) GetIsAsc() bool {
	if x != nil {
		return x.IsAsc
	}
	return false
}

func (x *SearchOnecProjectAdminReq) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *SearchOnecProjectAdminReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SearchOnecProjectAdminReq) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *SearchOnecProjectAdminReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type SearchOnecProjectAdminResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*OnecProjectAdmin `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`    //onecProjectAdmin
	Total uint64              `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //total
}

func (x *SearchOnecProjectAdminResp) Reset() {
	*x = SearchOnecProjectAdminResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecProjectAdminResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecProjectAdminResp) ProtoMessage() {}

func (x *SearchOnecProjectAdminResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecProjectAdminResp.ProtoReflect.Descriptor instead.
func (*SearchOnecProjectAdminResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{92}
}

func (x *SearchOnecProjectAdminResp) GetData() []*OnecProjectAdmin {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SearchOnecProjectAdminResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// --------------------------------应用表，--------------------------------
type OnecProjectApplication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                          //主键，自增 ID
	ProjectId      uint64  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId,omitempty"`            //关联到项目表的 ID，表示应用所属的项目
	ClusterUuid    string  `protobuf:"bytes,3,opt,name=clusterUuid,proto3" json:"clusterUuid,omitempty"`         //关联到集群表的 ID，表示应用所属的集群
	Name           string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                       //应用的中文名称
	Identifier     string  `protobuf:"bytes,5,opt,name=identifier,proto3" json:"identifier,omitempty"`           //应用的唯一标识符（英文，等同于 Kubernetes 的命名空间名称）
	Uuid           string  `protobuf:"bytes,6,opt,name=uuid,proto3" json:"uuid,omitempty"`                       //应用的唯一 UUID，用于标识和追踪命名空间
	Description    string  `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`         //应用描述信息
	CpuLimit       float64 `protobuf:"fixed64,8,opt,name=cpuLimit,proto3" json:"cpuLimit,omitempty"`             //应用可使用的 CPU 总量（单位：核）
	MemoryLimit    float64 `protobuf:"fixed64,9,opt,name=memoryLimit,proto3" json:"memoryLimit,omitempty"`       //应用可使用的内存总量（单位：GiB）
	StorageLimit   int64   `protobuf:"varint,10,opt,name=storageLimit,proto3" json:"storageLimit,omitempty"`     //应用可使用的存储总量（单位：GiB）
	ConfigmapLimit int64   `protobuf:"varint,11,opt,name=configmapLimit,proto3" json:"configmapLimit,omitempty"` //应用允许创建的 ConfigMap 数量上限
	PvcLimit       int64   `protobuf:"varint,12,opt,name=pvcLimit,proto3" json:"pvcLimit,omitempty"`             //应用允许创建的 PVC 数量上限
	PodLimit       int64   `protobuf:"varint,13,opt,name=podLimit,proto3" json:"podLimit,omitempty"`             //应用允许创建的 Pod 数量上限
	NodeportLimit  int64   `protobuf:"varint,14,opt,name=nodeportLimit,proto3" json:"nodeportLimit,omitempty"`   //应用允许使用的 NodePort 数量上限
	SecretLimit    int64   `protobuf:"varint,15,opt,name=secretLimit,proto3" json:"secretLimit,omitempty"`
	Status         string  `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`              //应用状态（如 `Success`、`Error`）
	AppCreatedAt   int64   `protobuf:"varint,17,opt,name=appCreatedAt,proto3" json:"appCreatedAt,omitempty"` //应用创建时间，标识该应用在业务系统中首次创建的时间
	CreatedBy      string  `protobuf:"bytes,18,opt,name=createdBy,proto3" json:"createdBy,omitempty"`        //记录创建人
	UpdatedBy      string  `protobuf:"bytes,19,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`        //记录更新人
	CreatedAt      int64   `protobuf:"varint,20,opt,name=createdAt,proto3" json:"createdAt,omitempty"`       //记录创建时间
	UpdatedAt      int64   `protobuf:"varint,21,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`       //记录更新时间
}

func (x *OnecProjectApplication) Reset() {
	*x = OnecProjectApplication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnecProjectApplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnecProjectApplication) ProtoMessage() {}

func (x *OnecProjectApplication) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnecProjectApplication.ProtoReflect.Descriptor instead.
func (*OnecProjectApplication) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{93}
}

func (x *OnecProjectApplication) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OnecProjectApplication) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *OnecProjectApplication) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

func (x *OnecProjectApplication) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OnecProjectApplication) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *OnecProjectApplication) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *OnecProjectApplication) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OnecProjectApplication) GetCpuLimit() float64 {
	if x != nil {
		return x.CpuLimit
	}
	return 0
}

func (x *OnecProjectApplication) GetMemoryLimit() float64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *OnecProjectApplication) GetStorageLimit() int64 {
	if x != nil {
		return x.StorageLimit
	}
	return 0
}

func (x *OnecProjectApplication) GetConfigmapLimit() int64 {
	if x != nil {
		return x.ConfigmapLimit
	}
	return 0
}

func (x *OnecProjectApplication) GetPvcLimit() int64 {
	if x != nil {
		return x.PvcLimit
	}
	return 0
}

func (x *OnecProjectApplication) GetPodLimit() int64 {
	if x != nil {
		return x.PodLimit
	}
	return 0
}

func (x *OnecProjectApplication) GetNodeportLimit() int64 {
	if x != nil {
		return x.NodeportLimit
	}
	return 0
}

func (x *OnecProjectApplication) GetSecretLimit() int64 {
	if x != nil {
		return x.SecretLimit
	}
	return 0
}

func (x *OnecProjectApplication) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OnecProjectApplication) GetAppCreatedAt() int64 {
	if x != nil {
		return x.AppCreatedAt
	}
	return 0
}

func (x *OnecProjectApplication) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *OnecProjectApplication) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *OnecProjectApplication) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *OnecProjectApplication) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type AddOnecProjectApplicationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId      uint64  `protobuf:"varint,1,opt,name=projectId,proto3" json:"projectId,omitempty"`           //关联到项目表的 ID，表示应用所属的项目
	ClusterUuid    string  `protobuf:"bytes,2,opt,name=clusterUuid,proto3" json:"clusterUuid,omitempty"`        //关联到集群表的 ID，表示应用所属的集群
	Name           string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                      //应用的中文名称
	Identifier     string  `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`          //应用的唯一标识符（英文，等同于 Kubernetes 的命名空间名称）
	Description    string  `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`        //应用描述信息
	CpuLimit       float64 `protobuf:"fixed64,6,opt,name=cpuLimit,proto3" json:"cpuLimit,omitempty"`            //应用可使用的 CPU 总量（单位：核）
	MemoryLimit    float64 `protobuf:"fixed64,7,opt,name=memoryLimit,proto3" json:"memoryLimit,omitempty"`      //应用可使用的内存总量（单位：GiB）
	StorageLimit   int64   `protobuf:"varint,8,opt,name=storageLimit,proto3" json:"storageLimit,omitempty"`     //应用可使用的存储总量（单位：GiB）
	ConfigmapLimit int64   `protobuf:"varint,9,opt,name=configmapLimit,proto3" json:"configmapLimit,omitempty"` //应用允许创建的 ConfigMap 数量上限
	PvcLimit       int64   `protobuf:"varint,10,opt,name=pvcLimit,proto3" json:"pvcLimit,omitempty"`            //应用允许创建的 PVC 数量上限
	PodLimit       int64   `protobuf:"varint,11,opt,name=podLimit,proto3" json:"podLimit,omitempty"`            //应用允许创建的 Pod 数量上限
	NodeportLimit  int64   `protobuf:"varint,12,opt,name=nodeportLimit,proto3" json:"nodeportLimit,omitempty"`  //应用允许使用的 NodePort 数量上限
	SecretLimit    int64   `protobuf:"varint,13,opt,name=secretLimit,proto3" json:"secretLimit,omitempty"`
	CreatedBy      string  `protobuf:"bytes,14,opt,name=createdBy,proto3" json:"createdBy,omitempty"` //记录创建人
	UpdatedBy      string  `protobuf:"bytes,15,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"` //记录更新人
}

func (x *AddOnecProjectApplicationReq) Reset() {
	*x = AddOnecProjectApplicationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecProjectApplicationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecProjectApplicationReq) ProtoMessage() {}

func (x *AddOnecProjectApplicationReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecProjectApplicationReq.ProtoReflect.Descriptor instead.
func (*AddOnecProjectApplicationReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{94}
}

func (x *AddOnecProjectApplicationReq) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *AddOnecProjectApplicationReq) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

func (x *AddOnecProjectApplicationReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddOnecProjectApplicationReq) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *AddOnecProjectApplicationReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddOnecProjectApplicationReq) GetCpuLimit() float64 {
	if x != nil {
		return x.CpuLimit
	}
	return 0
}

func (x *AddOnecProjectApplicationReq) GetMemoryLimit() float64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *AddOnecProjectApplicationReq) GetStorageLimit() int64 {
	if x != nil {
		return x.StorageLimit
	}
	return 0
}

func (x *AddOnecProjectApplicationReq) GetConfigmapLimit() int64 {
	if x != nil {
		return x.ConfigmapLimit
	}
	return 0
}

func (x *AddOnecProjectApplicationReq) GetPvcLimit() int64 {
	if x != nil {
		return x.PvcLimit
	}
	return 0
}

func (x *AddOnecProjectApplicationReq) GetPodLimit() int64 {
	if x != nil {
		return x.PodLimit
	}
	return 0
}

func (x *AddOnecProjectApplicationReq) GetNodeportLimit() int64 {
	if x != nil {
		return x.NodeportLimit
	}
	return 0
}

func (x *AddOnecProjectApplicationReq) GetSecretLimit() int64 {
	if x != nil {
		return x.SecretLimit
	}
	return 0
}

func (x *AddOnecProjectApplicationReq) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *AddOnecProjectApplicationReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type AddOnecProjectApplicationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddOnecProjectApplicationResp) Reset() {
	*x = AddOnecProjectApplicationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnecProjectApplicationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnecProjectApplicationResp) ProtoMessage() {}

func (x *AddOnecProjectApplicationResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnecProjectApplicationResp.ProtoReflect.Descriptor instead.
func (*AddOnecProjectApplicationResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{95}
}

type UpdateOnecProjectApplicationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                         //主键，自增 ID
	ProjectId      uint64  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId,omitempty"`           //关联到项目表的 ID，表示应用所属的项目
	ClusterUuid    string  `protobuf:"bytes,3,opt,name=clusterUuid,proto3" json:"clusterUuid,omitempty"`        //关联到集群表的 ID，表示应用所属的集群
	Name           string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                      //应用的中文名称
	Description    string  `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`        //应用描述信息
	CpuLimit       float64 `protobuf:"fixed64,6,opt,name=cpuLimit,proto3" json:"cpuLimit,omitempty"`            //应用可使用的 CPU 总量（单位：核）
	MemoryLimit    float64 `protobuf:"fixed64,7,opt,name=memoryLimit,proto3" json:"memoryLimit,omitempty"`      //应用可使用的内存总量（单位：GiB）
	StorageLimit   int64   `protobuf:"varint,8,opt,name=storageLimit,proto3" json:"storageLimit,omitempty"`     //应用可使用的存储总量（单位：GiB）
	ConfigmapLimit int64   `protobuf:"varint,9,opt,name=configmapLimit,proto3" json:"configmapLimit,omitempty"` //应用允许创建的 ConfigMap 数量上限
	PvcLimit       int64   `protobuf:"varint,10,opt,name=pvcLimit,proto3" json:"pvcLimit,omitempty"`            //应用允许创建的 PVC 数量上限
	PodLimit       int64   `protobuf:"varint,11,opt,name=podLimit,proto3" json:"podLimit,omitempty"`            //应用允许创建的 Pod 数量上限
	NodeportLimit  int64   `protobuf:"varint,12,opt,name=nodeportLimit,proto3" json:"nodeportLimit,omitempty"`  //应用允许使用的 NodePort 数量上限
	SecretLimit    int64   `protobuf:"varint,13,opt,name=secretLimit,proto3" json:"secretLimit,omitempty"`
	UpdatedBy      string  `protobuf:"bytes,14,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"` //记录更新人
}

func (x *UpdateOnecProjectApplicationReq) Reset() {
	*x = UpdateOnecProjectApplicationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOnecProjectApplicationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOnecProjectApplicationReq) ProtoMessage() {}

func (x *UpdateOnecProjectApplicationReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOnecProjectApplicationReq.ProtoReflect.Descriptor instead.
func (*UpdateOnecProjectApplicationReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{96}
}

func (x *UpdateOnecProjectApplicationReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOnecProjectApplicationReq) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateOnecProjectApplicationReq) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

func (x *UpdateOnecProjectApplicationReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOnecProjectApplicationReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateOnecProjectApplicationReq) GetCpuLimit() float64 {
	if x != nil {
		return x.CpuLimit
	}
	return 0
}

func (x *UpdateOnecProjectApplicationReq) GetMemoryLimit() float64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *UpdateOnecProjectApplicationReq) GetStorageLimit() int64 {
	if x != nil {
		return x.StorageLimit
	}
	return 0
}

func (x *UpdateOnecProjectApplicationReq) GetConfigmapLimit() int64 {
	if x != nil {
		return x.ConfigmapLimit
	}
	return 0
}

func (x *UpdateOnecProjectApplicationReq) GetPvcLimit() int64 {
	if x != nil {
		return x.PvcLimit
	}
	return 0
}

func (x *UpdateOnecProjectApplicationReq) GetPodLimit() int64 {
	if x != nil {
		return x.PodLimit
	}
	return 0
}

func (x *UpdateOnecProjectApplicationReq) GetNodeportLimit() int64 {
	if x != nil {
		return x.NodeportLimit
	}
	return 0
}

func (x *UpdateOnecProjectApplicationReq) GetSecretLimit() int64 {
	if x != nil {
		return x.SecretLimit
	}
	return 0
}

func (x *UpdateOnecProjectApplicationReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type UpdateOnecProjectApplicationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOnecProjectApplicationResp) Reset() {
	*x = UpdateOnecProjectApplicationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOnecProjectApplicationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOnecProjectApplicationResp) ProtoMessage() {}

func (x *UpdateOnecProjectApplicationResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOnecProjectApplicationResp.ProtoReflect.Descriptor instead.
func (*UpdateOnecProjectApplicationResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{97}
}

type DelOnecProjectApplicationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
}

func (x *DelOnecProjectApplicationReq) Reset() {
	*x = DelOnecProjectApplicationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecProjectApplicationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecProjectApplicationReq) ProtoMessage() {}

func (x *DelOnecProjectApplicationReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecProjectApplicationReq.ProtoReflect.Descriptor instead.
func (*DelOnecProjectApplicationReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{98}
}

func (x *DelOnecProjectApplicationReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DelOnecProjectApplicationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelOnecProjectApplicationResp) Reset() {
	*x = DelOnecProjectApplicationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOnecProjectApplicationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOnecProjectApplicationResp) ProtoMessage() {}

func (x *DelOnecProjectApplicationResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOnecProjectApplicationResp.ProtoReflect.Descriptor instead.
func (*DelOnecProjectApplicationResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{99}
}

type GetOnecProjectApplicationByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
}

func (x *GetOnecProjectApplicationByIdReq) Reset() {
	*x = GetOnecProjectApplicationByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnecProjectApplicationByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnecProjectApplicationByIdReq) ProtoMessage() {}

func (x *GetOnecProjectApplicationByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnecProjectApplicationByIdReq.ProtoReflect.Descriptor instead.
func (*GetOnecProjectApplicationByIdReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{100}
}

func (x *GetOnecProjectApplicationByIdReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetOnecProjectApplicationByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *OnecProjectApplication `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` //onecProjectApplication
}

func (x *GetOnecProjectApplicationByIdResp) Reset() {
	*x = GetOnecProjectApplicationByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnecProjectApplicationByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnecProjectApplicationByIdResp) ProtoMessage() {}

func (x *GetOnecProjectApplicationByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnecProjectApplicationByIdResp.ProtoReflect.Descriptor instead.
func (*GetOnecProjectApplicationByIdResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{101}
}

func (x *GetOnecProjectApplicationByIdResp) GetData() *OnecProjectApplication {
	if x != nil {
		return x.Data
	}
	return nil
}

type SearchOnecProjectApplicationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`              //page
	PageSize    uint64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`      //pageSize
	OrderStr    string `protobuf:"bytes,3,opt,name=orderStr,proto3" json:"orderStr,omitempty"`       //orderStr
	IsAsc       bool   `protobuf:"varint,4,opt,name=isAsc,proto3" json:"isAsc,omitempty"`            //isAsc
	ProjectId   uint64 `protobuf:"varint,5,opt,name=projectId,proto3" json:"projectId,omitempty"`    //关联到项目表的 ID，表示应用所属的项目
	ClusterUuid string `protobuf:"bytes,6,opt,name=clusterUuid,proto3" json:"clusterUuid,omitempty"` //关联到集群表的 ID，表示应用所属的集群
	Name        string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`               //应用的中文名称
	Identifier  string `protobuf:"bytes,8,opt,name=identifier,proto3" json:"identifier,omitempty"`   //应用的唯一标识符（英文，等同于 Kubernetes 的命名空间名称）
	Uuid        string `protobuf:"bytes,9,opt,name=uuid,proto3" json:"uuid,omitempty"`               //应用的唯一 UUID，用于标识和追踪命名空间
	Status      string `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`          //应用状态（如 `Success`、`Error`）
	CreatedBy   string `protobuf:"bytes,11,opt,name=createdBy,proto3" json:"createdBy,omitempty"`    //记录创建人
	UpdatedBy   string `protobuf:"bytes,12,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`    //记录更新人
}

func (x *SearchOnecProjectApplicationReq) Reset() {
	*x = SearchOnecProjectApplicationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecProjectApplicationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecProjectApplicationReq) ProtoMessage() {}

func (x *SearchOnecProjectApplicationReq) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecProjectApplicationReq.ProtoReflect.Descriptor instead.
func (*SearchOnecProjectApplicationReq) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{102}
}

func (x *SearchOnecProjectApplicationReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchOnecProjectApplicationReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchOnecProjectApplicationReq) GetOrderStr() string {
	if x != nil {
		return x.OrderStr
	}
	return ""
}

func (x *SearchOnecProjectApplicationReq) GetIsAsc() bool {
	if x != nil {
		return x.IsAsc
	}
	return false
}

func (x *SearchOnecProjectApplicationReq) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *SearchOnecProjectApplicationReq) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

func (x *SearchOnecProjectApplicationReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchOnecProjectApplicationReq) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *SearchOnecProjectApplicationReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SearchOnecProjectApplicationReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SearchOnecProjectApplicationReq) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *SearchOnecProjectApplicationReq) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type SearchOnecProjectApplicationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*OnecProjectApplication `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`    //onecProjectApplication
	Total uint64                    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //total
}

func (x *SearchOnecProjectApplicationResp) Reset() {
	*x = SearchOnecProjectApplicationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manager_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOnecProjectApplicationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOnecProjectApplicationResp) ProtoMessage() {}

func (x *SearchOnecProjectApplicationResp) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOnecProjectApplicationResp.ProtoReflect.Descriptor instead.
func (*SearchOnecProjectApplicationResp) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{103}
}

func (x *SearchOnecProjectApplicationResp) GetData() []*OnecProjectApplication {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SearchOnecProjectApplicationResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_manager_proto protoreflect.FileDescriptor

var file_manager_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x22, 0xd7, 0x06, 0x0a, 0x0b, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x6b, 0x69, 0x70, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x76,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x70, 0x75, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x70, 0x75, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x64,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x64,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x70, 0x75, 0x55, 0x73, 0x65, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x70, 0x75, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x70, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x62, 0x49,
	0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x62, 0x49,
	0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc1, 0x02,
	0x0a, 0x11, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x49,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x6b, 0x69, 0x70, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c,
	0x62, 0x49, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c,
	0x62, 0x49, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0xb6, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70,
	0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x76, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x76, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x62, 0x49, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x62, 0x49, 0x70,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x41, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x14, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3d, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb2, 0x03, 0x0a, 0x14, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x41, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x62, 0x49,
	0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x62, 0x49,
	0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22,
	0x52, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x65, 0x63,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x42, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x65, 0x63, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x63, 0x4f,
	0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x96,
	0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x4f, 0x6e,
	0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0xc9, 0x03, 0x0a, 0x13, 0x4f,
	0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70,
	0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x43, 0x65,
	0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x83, 0x03, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x4f, 0x6e,
	0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6b,
	0x69, 0x70, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61,
	0x43, 0x65, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x43, 0x65,
	0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65,
	0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x1c, 0x0a, 0x1a,
	0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0xf8, 0x02, 0x0a, 0x1c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x1f, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65,
	0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x2f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x4d, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xc4, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x41, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x62, 0x0a, 0x1d, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x65,
	0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xfc, 0x05, 0x0a,
	0x08, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x73, 0x47, 0x70, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x73, 0x47, 0x70,
	0x75, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x69,
	0x6e, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x41,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x43, 0x69, 0x64, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x43, 0x69, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x75,
	0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6b,
	0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x42, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x22,
	0x11, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64,
	0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f,
	0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x20, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xb9, 0x04, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x55,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x43, 0x69, 0x64, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x6f, 0x64, 0x43, 0x69, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x4c, 0x0a,
	0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x47, 0x0a, 0x0f, 0x53,
	0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x65, 0x63,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x73, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4f,
	0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x16, 0x0a,
	0x14, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63,
	0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e,
	0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x78, 0x0a, 0x18,
	0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x1b, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65,
	0x63, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x5c, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4a,
	0x0a, 0x12, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x15, 0x0a, 0x13, 0x46, 0x6f,
	0x72, 0x62, 0x69, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x4e, 0x0a, 0x16, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x22, 0x19, 0x0a, 0x17, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8b, 0x01, 0x0a,
	0x13, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x16, 0x0a, 0x14, 0x41, 0x64,
	0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x4d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x69,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa8, 0x01, 0x0a, 0x1a, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0xc4, 0x01, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x57, 0x0a, 0x1b, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0xad, 0x01, 0x0a, 0x1f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f,
	0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0xc9, 0x01, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x61, 0x0a, 0x20, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0xa8, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e,
	0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x41, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xb8,
	0x01, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x57, 0x0a, 0x1b, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x47, 0x0a, 0x0f, 0x45, 0x76, 0x69, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x12, 0x0a, 0x10, 0x45,
	0x76, 0x69, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x89, 0x02, 0x0a, 0x0b, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x11,
	0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7a, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x41,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x6e,
	0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x3d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x6e,
	0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xe8, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x52, 0x0a, 0x15, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xf0,
	0x09, 0x0a, 0x10, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x70, 0x75, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x70, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x70, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x70, 0x75, 0x55, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x63, 0x70, 0x75, 0x55, 0x73, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4f,
	0x76, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x55, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x6d, 0x61, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x55, 0x73, 0x65, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61,
	0x70, 0x55, 0x73, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d,
	0x61, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x76, 0x63,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x76, 0x63,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x76, 0x63, 0x55, 0x73, 0x65, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x76, 0x63, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x76, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x76, 0x63, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x64, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x70, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f,
	0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6e,
	0x6f, 0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x30, 0x0a, 0x13, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x6f,
	0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xae, 0x04, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x70, 0x75, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x70, 0x75, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x70, 0x75, 0x4f,
	0x76, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x63, 0x70, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4f, 0x76,
	0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61,
	0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x76, 0x63, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x76, 0x63, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa3, 0x04,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x70, 0x75, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x70, 0x75, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x70, 0x75, 0x4f, 0x76,
	0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x63, 0x70, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4f, 0x76, 0x65,
	0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x76, 0x63, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x76, 0x63, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x22, 0x58, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x22, 0x43, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x4f,
	0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd0, 0x01, 0x0a, 0x10, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x64,
	0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x7f, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x2c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x47, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xef, 0x01, 0x0a, 0x19,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x5c, 0x0a,
	0x1a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x4f,
	0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x90, 0x05, 0x0a, 0x16,
	0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x6d, 0x61, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x76,
	0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x76,
	0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xfa,
	0x03, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x6d, 0x61, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x76, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x76, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x1f, 0x0a, 0x1d, 0x41,
	0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xcf, 0x03, 0x0a,
	0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x6d, 0x61, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x76, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x76, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x22,
	0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x2e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x32, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4f, 0x6e,
	0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x2e,
	0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdf, 0x02, 0x0a,
	0x1f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x73, 0x41, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41,
	0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x68,
	0x0a, 0x20, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2a, 0x46, 0x0a, 0x13, 0x4f, 0x6e, 0x65, 0x63,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x4b, 0x55, 0x42, 0x45, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03,
	0x32, 0xf3, 0x03, 0x0a, 0x12, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4f, 0x6e,
	0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x18, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65,
	0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65,
	0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x48, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x19, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0f, 0x53, 0x79,
	0x6e, 0x63, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f,
	0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36,
	0x0a, 0x0b, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x32, 0xf7, 0x03, 0x0a, 0x1a, 0x4f, 0x6e, 0x65, 0x63, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x57, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60,
	0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x32, 0xc3, 0x09, 0x0a, 0x0f, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x16, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3f, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e,
	0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x45, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e,
	0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x4f,
	0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x17, 0x2e, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x6e,
	0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x54, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64,
	0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f,
	0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0f, 0x46,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x16,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4e, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x45, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61,
	0x69, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65,
	0x63, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a,
	0x0c, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x65, 0x63,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x45, 0x76, 0x69, 0x63,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x64, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x76,
	0x69, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x76, 0x69, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65,
	0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f,
	0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f,
	0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x69, 0x0a, 0x1c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x23, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x17, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4f, 0x6e, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0xf7, 0x02, 0x0a, 0x12, 0x4f, 0x6e, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a,
	0x0e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x15, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f,
	0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x4f,
	0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x32, 0xe2, 0x02, 0x0a, 0x17, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x13,
	0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a,
	0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1a, 0x2e, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1a, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x32, 0xc7, 0x03, 0x0a, 0x17, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4e, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64,
	0x64, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x57, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1d, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e,
	0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e,
	0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x32,
	0xa7, 0x04, 0x0a, 0x1d, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x60, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60,
	0x0a, 0x19, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x6c, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69,
	0x0a, 0x1c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f,
	0x6e, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x73, 0x68, 0x69, 0x63, 0x68,
	0x65, 0x6e, 0x67, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x2d, 0x6f, 0x6e, 0x65, 0x63, 0x2f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_manager_proto_rawDescOnce sync.Once
	file_manager_proto_rawDescData = file_manager_proto_rawDesc
)

func file_manager_proto_rawDescGZIP() []byte {
	file_manager_proto_rawDescOnce.Do(func() {
		file_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_manager_proto_rawDescData)
	})
	return file_manager_proto_rawDescData
}

var file_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 104)
var file_manager_proto_goTypes = []any{
	(OnecClusterconnCode)(0),                  // 0: pb.OnecClusterconnCode
	(*OnecCluster)(nil),                       // 1: pb.OnecCluster
	(*AddOnecClusterReq)(nil),                 // 2: pb.AddOnecClusterReq
	(*AddOnecClusterResp)(nil),                // 3: pb.AddOnecClusterResp
	(*UpdateOnecClusterReq)(nil),              // 4: pb.UpdateOnecClusterReq
	(*UpdateOnecClusterResp)(nil),             // 5: pb.UpdateOnecClusterResp
	(*DelOnecClusterReq)(nil),                 // 6: pb.DelOnecClusterReq
	(*DelOnecClusterResp)(nil),                // 7: pb.DelOnecClusterResp
	(*GetOnecClusterByIdReq)(nil),             // 8: pb.GetOnecClusterByIdReq
	(*GetOnecClusterByIdResp)(nil),            // 9: pb.GetOnecClusterByIdResp
	(*SearchOnecClusterReq)(nil),              // 10: pb.SearchOnecClusterReq
	(*SearchOnecClusterResp)(nil),             // 11: pb.SearchOnecClusterResp
	(*SyncOnecClusterReq)(nil),                // 12: pb.SyncOnecClusterReq
	(*SyncOnecClusterResp)(nil),               // 13: pb.SyncOnecClusterResp
	(*AddOnecNodeReq)(nil),                    // 14: pb.AddOnecNodeReq
	(*AddOnecNodeResp)(nil),                   // 15: pb.AddOnecNodeResp
	(*OnecClusterConnInfo)(nil),               // 16: pb.OnecClusterConnInfo
	(*AddOnecClusterConnInfoReq)(nil),         // 17: pb.AddOnecClusterConnInfoReq
	(*AddOnecClusterConnInfoResp)(nil),        // 18: pb.AddOnecClusterConnInfoResp
	(*UpdateOnecClusterConnInfoReq)(nil),      // 19: pb.UpdateOnecClusterConnInfoReq
	(*UpdateOnecClusterConnInfoResp)(nil),     // 20: pb.UpdateOnecClusterConnInfoResp
	(*DelOnecClusterConnInfoReq)(nil),         // 21: pb.DelOnecClusterConnInfoReq
	(*DelOnecClusterConnInfoResp)(nil),        // 22: pb.DelOnecClusterConnInfoResp
	(*GetOnecClusterConnInfoByIdReq)(nil),     // 23: pb.GetOnecClusterConnInfoByIdReq
	(*GetOnecClusterConnInfoByIdResp)(nil),    // 24: pb.GetOnecClusterConnInfoByIdResp
	(*SearchOnecClusterConnInfoReq)(nil),      // 25: pb.SearchOnecClusterConnInfoReq
	(*SearchOnecClusterConnInfoResp)(nil),     // 26: pb.SearchOnecClusterConnInfoResp
	(*OnecNode)(nil),                          // 27: pb.OnecNode
	(*DelOnecNodeReq)(nil),                    // 28: pb.DelOnecNodeReq
	(*DelOnecNodeResp)(nil),                   // 29: pb.DelOnecNodeResp
	(*GetOnecNodeByIdReq)(nil),                // 30: pb.GetOnecNodeByIdReq
	(*GetOnecNodeByIdResp)(nil),               // 31: pb.GetOnecNodeByIdResp
	(*SearchOnecNodeReq)(nil),                 // 32: pb.SearchOnecNodeReq
	(*SearchOnecNodeResp)(nil),                // 33: pb.SearchOnecNodeResp
	(*SyncOnecNodeReq)(nil),                   // 34: pb.SyncOnecNodeReq
	(*SyncOnecNodeResp)(nil),                  // 35: pb.SyncOnecNodeResp
	(*AddOnecNodeLabelReq)(nil),               // 36: pb.AddOnecNodeLabelReq
	(*AddOnecNodeLabelResp)(nil),              // 37: pb.AddOnecNodeLabelResp
	(*DelOnecNodeLabelReq)(nil),               // 38: pb.DelOnecNodeLabelReq
	(*DelOnecNodeLabelResp)(nil),              // 39: pb.DelOnecNodeLabelResp
	(*AddOnecNodeAnnotationReq)(nil),          // 40: pb.AddOnecNodeAnnotationReq
	(*AddOnecNodeAnnotationResp)(nil),         // 41: pb.AddOnecNodeAnnotationResp
	(*DelOnecNodeAnnotationReq)(nil),          // 42: pb.DelOnecNodeAnnotationReq
	(*DelOnecNodeAnnotationResp)(nil),         // 43: pb.DelOnecNodeAnnotationResp
	(*ForbidScheduledReq)(nil),                // 44: pb.ForbidScheduledReq
	(*ForbidScheduledResp)(nil),               // 45: pb.ForbidScheduledResp
	(*EnableScheduledNodeReq)(nil),            // 46: pb.EnableScheduledNodeReq
	(*EnableScheduledNodeResp)(nil),           // 47: pb.EnableScheduledNodeResp
	(*AddOnecNodeTaintReq)(nil),               // 48: pb.AddOnecNodeTaintReq
	(*AddOnecNodeTaintResp)(nil),              // 49: pb.AddOnecNodeTaintResp
	(*DelOnecNodeTaintReq)(nil),               // 50: pb.DelOnecNodeTaintReq
	(*DelOnecNodeTaintResp)(nil),              // 51: pb.DelOnecNodeTaintResp
	(*SearchOnecNodeLabelListReq)(nil),        // 52: pb.SearchOnecNodeLabelListReq
	(*NodeLabels)(nil),                        // 53: pb.NodeLabels
	(*SearchOnecNodeLabelListResp)(nil),       // 54: pb.SearchOnecNodeLabelListResp
	(*SearchOnecNodeAnnotationListReq)(nil),   // 55: pb.SearchOnecNodeAnnotationListReq
	(*NodeAnnotations)(nil),                   // 56: pb.NodeAnnotations
	(*SearchOnecNodeAnnotationListResp)(nil),  // 57: pb.SearchOnecNodeAnnotationListResp
	(*SearchOnecNodeTaintListReq)(nil),        // 58: pb.SearchOnecNodeTaintListReq
	(*NodeTaints)(nil),                        // 59: pb.NodeTaints
	(*SearchOnecNodeTaintListResp)(nil),       // 60: pb.SearchOnecNodeTaintListResp
	(*EvictNodePodReq)(nil),                   // 61: pb.EvictNodePodReq
	(*EvictNodePodResp)(nil),                  // 62: pb.EvictNodePodResp
	(*OnecProject)(nil),                       // 63: pb.OnecProject
	(*AddOnecProjectReq)(nil),                 // 64: pb.AddOnecProjectReq
	(*AddOnecProjectResp)(nil),                // 65: pb.AddOnecProjectResp
	(*UpdateOnecProjectReq)(nil),              // 66: pb.UpdateOnecProjectReq
	(*UpdateOnecProjectResp)(nil),             // 67: pb.UpdateOnecProjectResp
	(*DelOnecProjectReq)(nil),                 // 68: pb.DelOnecProjectReq
	(*DelOnecProjectResp)(nil),                // 69: pb.DelOnecProjectResp
	(*GetOnecProjectByIdReq)(nil),             // 70: pb.GetOnecProjectByIdReq
	(*GetOnecProjectByIdResp)(nil),            // 71: pb.GetOnecProjectByIdResp
	(*SearchOnecProjectReq)(nil),              // 72: pb.SearchOnecProjectReq
	(*SearchOnecProjectResp)(nil),             // 73: pb.SearchOnecProjectResp
	(*OnecProjectQuota)(nil),                  // 74: pb.OnecProjectQuota
	(*AddOnecProjectQuotaReq)(nil),            // 75: pb.AddOnecProjectQuotaReq
	(*AddOnecProjectQuotaResp)(nil),           // 76: pb.AddOnecProjectQuotaResp
	(*UpdateOnecProjectQuotaReq)(nil),         // 77: pb.UpdateOnecProjectQuotaReq
	(*UpdateOnecProjectQuotaResp)(nil),        // 78: pb.UpdateOnecProjectQuotaResp
	(*DelOnecProjectQuotaReq)(nil),            // 79: pb.DelOnecProjectQuotaReq
	(*DelOnecProjectQuotaResp)(nil),           // 80: pb.DelOnecProjectQuotaResp
	(*GetOnecProjectQuotaReq)(nil),            // 81: pb.GetOnecProjectQuotaReq
	(*GetOnecProjectQuotaResp)(nil),           // 82: pb.GetOnecProjectQuotaResp
	(*OnecProjectAdmin)(nil),                  // 83: pb.OnecProjectAdmin
	(*AddOnecProjectAdminReq)(nil),            // 84: pb.AddOnecProjectAdminReq
	(*AddOnecProjectAdminResp)(nil),           // 85: pb.AddOnecProjectAdminResp
	(*UpdateOnecProjectAdminReq)(nil),         // 86: pb.UpdateOnecProjectAdminReq
	(*UpdateOnecProjectAdminResp)(nil),        // 87: pb.UpdateOnecProjectAdminResp
	(*DelOnecProjectAdminReq)(nil),            // 88: pb.DelOnecProjectAdminReq
	(*DelOnecProjectAdminResp)(nil),           // 89: pb.DelOnecProjectAdminResp
	(*GetOnecProjectAdminByIdReq)(nil),        // 90: pb.GetOnecProjectAdminByIdReq
	(*GetOnecProjectAdminByIdResp)(nil),       // 91: pb.GetOnecProjectAdminByIdResp
	(*SearchOnecProjectAdminReq)(nil),         // 92: pb.SearchOnecProjectAdminReq
	(*SearchOnecProjectAdminResp)(nil),        // 93: pb.SearchOnecProjectAdminResp
	(*OnecProjectApplication)(nil),            // 94: pb.OnecProjectApplication
	(*AddOnecProjectApplicationReq)(nil),      // 95: pb.AddOnecProjectApplicationReq
	(*AddOnecProjectApplicationResp)(nil),     // 96: pb.AddOnecProjectApplicationResp
	(*UpdateOnecProjectApplicationReq)(nil),   // 97: pb.UpdateOnecProjectApplicationReq
	(*UpdateOnecProjectApplicationResp)(nil),  // 98: pb.UpdateOnecProjectApplicationResp
	(*DelOnecProjectApplicationReq)(nil),      // 99: pb.DelOnecProjectApplicationReq
	(*DelOnecProjectApplicationResp)(nil),     // 100: pb.DelOnecProjectApplicationResp
	(*GetOnecProjectApplicationByIdReq)(nil),  // 101: pb.GetOnecProjectApplicationByIdReq
	(*GetOnecProjectApplicationByIdResp)(nil), // 102: pb.GetOnecProjectApplicationByIdResp
	(*SearchOnecProjectApplicationReq)(nil),   // 103: pb.SearchOnecProjectApplicationReq
	(*SearchOnecProjectApplicationResp)(nil),  // 104: pb.SearchOnecProjectApplicationResp
}
var file_manager_proto_depIdxs = []int32{
	1,   // 0: pb.GetOnecClusterByIdResp.data:type_name -> pb.OnecCluster
	1,   // 1: pb.SearchOnecClusterResp.data:type_name -> pb.OnecCluster
	16,  // 2: pb.GetOnecClusterConnInfoByIdResp.data:type_name -> pb.OnecClusterConnInfo
	16,  // 3: pb.SearchOnecClusterConnInfoResp.data:type_name -> pb.OnecClusterConnInfo
	27,  // 4: pb.GetOnecNodeByIdResp.data:type_name -> pb.OnecNode
	27,  // 5: pb.SearchOnecNodeResp.data:type_name -> pb.OnecNode
	53,  // 6: pb.SearchOnecNodeLabelListResp.data:type_name -> pb.NodeLabels
	56,  // 7: pb.SearchOnecNodeAnnotationListResp.data:type_name -> pb.NodeAnnotations
	59,  // 8: pb.SearchOnecNodeTaintListResp.data:type_name -> pb.NodeTaints
	63,  // 9: pb.GetOnecProjectByIdResp.data:type_name -> pb.OnecProject
	63,  // 10: pb.SearchOnecProjectResp.data:type_name -> pb.OnecProject
	74,  // 11: pb.GetOnecProjectQuotaResp.data:type_name -> pb.OnecProjectQuota
	83,  // 12: pb.GetOnecProjectAdminByIdResp.data:type_name -> pb.OnecProjectAdmin
	83,  // 13: pb.SearchOnecProjectAdminResp.data:type_name -> pb.OnecProjectAdmin
	94,  // 14: pb.GetOnecProjectApplicationByIdResp.data:type_name -> pb.OnecProjectApplication
	94,  // 15: pb.SearchOnecProjectApplicationResp.data:type_name -> pb.OnecProjectApplication
	2,   // 16: pb.OnecClusterService.AddOnecCluster:input_type -> pb.AddOnecClusterReq
	4,   // 17: pb.OnecClusterService.UpdateOnecCluster:input_type -> pb.UpdateOnecClusterReq
	6,   // 18: pb.OnecClusterService.DelOnecCluster:input_type -> pb.DelOnecClusterReq
	8,   // 19: pb.OnecClusterService.GetOnecClusterById:input_type -> pb.GetOnecClusterByIdReq
	10,  // 20: pb.OnecClusterService.SearchOnecCluster:input_type -> pb.SearchOnecClusterReq
	12,  // 21: pb.OnecClusterService.SyncOnecCluster:input_type -> pb.SyncOnecClusterReq
	14,  // 22: pb.OnecClusterService.AddOnecNode:input_type -> pb.AddOnecNodeReq
	17,  // 23: pb.OnecClusterConnInfoService.AddOnecClusterConnInfo:input_type -> pb.AddOnecClusterConnInfoReq
	19,  // 24: pb.OnecClusterConnInfoService.UpdateOnecClusterConnInfo:input_type -> pb.UpdateOnecClusterConnInfoReq
	21,  // 25: pb.OnecClusterConnInfoService.DelOnecClusterConnInfo:input_type -> pb.DelOnecClusterConnInfoReq
	23,  // 26: pb.OnecClusterConnInfoService.GetOnecClusterConnInfoById:input_type -> pb.GetOnecClusterConnInfoByIdReq
	25,  // 27: pb.OnecClusterConnInfoService.SearchOnecClusterConnInfo:input_type -> pb.SearchOnecClusterConnInfoReq
	28,  // 28: pb.OnecNodeService.DelOnecNode:input_type -> pb.DelOnecNodeReq
	30,  // 29: pb.OnecNodeService.GetOnecNodeById:input_type -> pb.GetOnecNodeByIdReq
	32,  // 30: pb.OnecNodeService.SearchOnecNode:input_type -> pb.SearchOnecNodeReq
	36,  // 31: pb.OnecNodeService.AddOnecNodeLabel:input_type -> pb.AddOnecNodeLabelReq
	38,  // 32: pb.OnecNodeService.DelOnecNodeLabel:input_type -> pb.DelOnecNodeLabelReq
	40,  // 33: pb.OnecNodeService.AddOnecNodeAnnotation:input_type -> pb.AddOnecNodeAnnotationReq
	42,  // 34: pb.OnecNodeService.DelOnecNodeAnnotation:input_type -> pb.DelOnecNodeAnnotationReq
	44,  // 35: pb.OnecNodeService.ForbidScheduled:input_type -> pb.ForbidScheduledReq
	46,  // 36: pb.OnecNodeService.EnableScheduledNode:input_type -> pb.EnableScheduledNodeReq
	48,  // 37: pb.OnecNodeService.AddOnecNodeTaint:input_type -> pb.AddOnecNodeTaintReq
	50,  // 38: pb.OnecNodeService.DelOnecNodeTaint:input_type -> pb.DelOnecNodeTaintReq
	34,  // 39: pb.OnecNodeService.SyncOnecNode:input_type -> pb.SyncOnecNodeReq
	61,  // 40: pb.OnecNodeService.EvictNodePod:input_type -> pb.EvictNodePodReq
	52,  // 41: pb.OnecNodeService.SearchOnecNodeLabelList:input_type -> pb.SearchOnecNodeLabelListReq
	55,  // 42: pb.OnecNodeService.SearchOnecNodeAnnotationList:input_type -> pb.SearchOnecNodeAnnotationListReq
	58,  // 43: pb.OnecNodeService.SearchOnecNodeTaintList:input_type -> pb.SearchOnecNodeTaintListReq
	64,  // 44: pb.OnecProjectService.AddOnecProject:input_type -> pb.AddOnecProjectReq
	66,  // 45: pb.OnecProjectService.UpdateOnecProject:input_type -> pb.UpdateOnecProjectReq
	68,  // 46: pb.OnecProjectService.DelOnecProject:input_type -> pb.DelOnecProjectReq
	70,  // 47: pb.OnecProjectService.GetOnecProjectById:input_type -> pb.GetOnecProjectByIdReq
	72,  // 48: pb.OnecProjectService.SearchOnecProject:input_type -> pb.SearchOnecProjectReq
	75,  // 49: pb.OnecProjectQuotaService.AddOnecProjectQuota:input_type -> pb.AddOnecProjectQuotaReq
	77,  // 50: pb.OnecProjectQuotaService.UpdateOnecProjectQuota:input_type -> pb.UpdateOnecProjectQuotaReq
	79,  // 51: pb.OnecProjectQuotaService.DelOnecProjectQuota:input_type -> pb.DelOnecProjectQuotaReq
	81,  // 52: pb.OnecProjectQuotaService.GetOnecProjectQuota:input_type -> pb.GetOnecProjectQuotaReq
	84,  // 53: pb.OnecProjectAdminService.AddOnecProjectAdmin:input_type -> pb.AddOnecProjectAdminReq
	86,  // 54: pb.OnecProjectAdminService.UpdateOnecProjectAdmin:input_type -> pb.UpdateOnecProjectAdminReq
	88,  // 55: pb.OnecProjectAdminService.DelOnecProjectAdmin:input_type -> pb.DelOnecProjectAdminReq
	90,  // 56: pb.OnecProjectAdminService.GetOnecProjectAdminById:input_type -> pb.GetOnecProjectAdminByIdReq
	92,  // 57: pb.OnecProjectAdminService.SearchOnecProjectAdmin:input_type -> pb.SearchOnecProjectAdminReq
	95,  // 58: pb.OnecProjectApplicationService.AddOnecProjectApplication:input_type -> pb.AddOnecProjectApplicationReq
	97,  // 59: pb.OnecProjectApplicationService.UpdateOnecProjectApplication:input_type -> pb.UpdateOnecProjectApplicationReq
	99,  // 60: pb.OnecProjectApplicationService.DelOnecProjectApplication:input_type -> pb.DelOnecProjectApplicationReq
	101, // 61: pb.OnecProjectApplicationService.GetOnecProjectApplicationById:input_type -> pb.GetOnecProjectApplicationByIdReq
	103, // 62: pb.OnecProjectApplicationService.SearchOnecProjectApplication:input_type -> pb.SearchOnecProjectApplicationReq
	3,   // 63: pb.OnecClusterService.AddOnecCluster:output_type -> pb.AddOnecClusterResp
	5,   // 64: pb.OnecClusterService.UpdateOnecCluster:output_type -> pb.UpdateOnecClusterResp
	7,   // 65: pb.OnecClusterService.DelOnecCluster:output_type -> pb.DelOnecClusterResp
	9,   // 66: pb.OnecClusterService.GetOnecClusterById:output_type -> pb.GetOnecClusterByIdResp
	11,  // 67: pb.OnecClusterService.SearchOnecCluster:output_type -> pb.SearchOnecClusterResp
	13,  // 68: pb.OnecClusterService.SyncOnecCluster:output_type -> pb.SyncOnecClusterResp
	15,  // 69: pb.OnecClusterService.AddOnecNode:output_type -> pb.AddOnecNodeResp
	18,  // 70: pb.OnecClusterConnInfoService.AddOnecClusterConnInfo:output_type -> pb.AddOnecClusterConnInfoResp
	20,  // 71: pb.OnecClusterConnInfoService.UpdateOnecClusterConnInfo:output_type -> pb.UpdateOnecClusterConnInfoResp
	22,  // 72: pb.OnecClusterConnInfoService.DelOnecClusterConnInfo:output_type -> pb.DelOnecClusterConnInfoResp
	24,  // 73: pb.OnecClusterConnInfoService.GetOnecClusterConnInfoById:output_type -> pb.GetOnecClusterConnInfoByIdResp
	26,  // 74: pb.OnecClusterConnInfoService.SearchOnecClusterConnInfo:output_type -> pb.SearchOnecClusterConnInfoResp
	29,  // 75: pb.OnecNodeService.DelOnecNode:output_type -> pb.DelOnecNodeResp
	31,  // 76: pb.OnecNodeService.GetOnecNodeById:output_type -> pb.GetOnecNodeByIdResp
	33,  // 77: pb.OnecNodeService.SearchOnecNode:output_type -> pb.SearchOnecNodeResp
	37,  // 78: pb.OnecNodeService.AddOnecNodeLabel:output_type -> pb.AddOnecNodeLabelResp
	39,  // 79: pb.OnecNodeService.DelOnecNodeLabel:output_type -> pb.DelOnecNodeLabelResp
	41,  // 80: pb.OnecNodeService.AddOnecNodeAnnotation:output_type -> pb.AddOnecNodeAnnotationResp
	43,  // 81: pb.OnecNodeService.DelOnecNodeAnnotation:output_type -> pb.DelOnecNodeAnnotationResp
	45,  // 82: pb.OnecNodeService.ForbidScheduled:output_type -> pb.ForbidScheduledResp
	47,  // 83: pb.OnecNodeService.EnableScheduledNode:output_type -> pb.EnableScheduledNodeResp
	49,  // 84: pb.OnecNodeService.AddOnecNodeTaint:output_type -> pb.AddOnecNodeTaintResp
	51,  // 85: pb.OnecNodeService.DelOnecNodeTaint:output_type -> pb.DelOnecNodeTaintResp
	35,  // 86: pb.OnecNodeService.SyncOnecNode:output_type -> pb.SyncOnecNodeResp
	62,  // 87: pb.OnecNodeService.EvictNodePod:output_type -> pb.EvictNodePodResp
	54,  // 88: pb.OnecNodeService.SearchOnecNodeLabelList:output_type -> pb.SearchOnecNodeLabelListResp
	57,  // 89: pb.OnecNodeService.SearchOnecNodeAnnotationList:output_type -> pb.SearchOnecNodeAnnotationListResp
	60,  // 90: pb.OnecNodeService.SearchOnecNodeTaintList:output_type -> pb.SearchOnecNodeTaintListResp
	65,  // 91: pb.OnecProjectService.AddOnecProject:output_type -> pb.AddOnecProjectResp
	67,  // 92: pb.OnecProjectService.UpdateOnecProject:output_type -> pb.UpdateOnecProjectResp
	69,  // 93: pb.OnecProjectService.DelOnecProject:output_type -> pb.DelOnecProjectResp
	71,  // 94: pb.OnecProjectService.GetOnecProjectById:output_type -> pb.GetOnecProjectByIdResp
	73,  // 95: pb.OnecProjectService.SearchOnecProject:output_type -> pb.SearchOnecProjectResp
	76,  // 96: pb.OnecProjectQuotaService.AddOnecProjectQuota:output_type -> pb.AddOnecProjectQuotaResp
	78,  // 97: pb.OnecProjectQuotaService.UpdateOnecProjectQuota:output_type -> pb.UpdateOnecProjectQuotaResp
	80,  // 98: pb.OnecProjectQuotaService.DelOnecProjectQuota:output_type -> pb.DelOnecProjectQuotaResp
	82,  // 99: pb.OnecProjectQuotaService.GetOnecProjectQuota:output_type -> pb.GetOnecProjectQuotaResp
	85,  // 100: pb.OnecProjectAdminService.AddOnecProjectAdmin:output_type -> pb.AddOnecProjectAdminResp
	87,  // 101: pb.OnecProjectAdminService.UpdateOnecProjectAdmin:output_type -> pb.UpdateOnecProjectAdminResp
	89,  // 102: pb.OnecProjectAdminService.DelOnecProjectAdmin:output_type -> pb.DelOnecProjectAdminResp
	91,  // 103: pb.OnecProjectAdminService.GetOnecProjectAdminById:output_type -> pb.GetOnecProjectAdminByIdResp
	93,  // 104: pb.OnecProjectAdminService.SearchOnecProjectAdmin:output_type -> pb.SearchOnecProjectAdminResp
	96,  // 105: pb.OnecProjectApplicationService.AddOnecProjectApplication:output_type -> pb.AddOnecProjectApplicationResp
	98,  // 106: pb.OnecProjectApplicationService.UpdateOnecProjectApplication:output_type -> pb.UpdateOnecProjectApplicationResp
	100, // 107: pb.OnecProjectApplicationService.DelOnecProjectApplication:output_type -> pb.DelOnecProjectApplicationResp
	102, // 108: pb.OnecProjectApplicationService.GetOnecProjectApplicationById:output_type -> pb.GetOnecProjectApplicationByIdResp
	104, // 109: pb.OnecProjectApplicationService.SearchOnecProjectApplication:output_type -> pb.SearchOnecProjectApplicationResp
	63,  // [63:110] is the sub-list for method output_type
	16,  // [16:63] is the sub-list for method input_type
	16,  // [16:16] is the sub-list for extension type_name
	16,  // [16:16] is the sub-list for extension extendee
	0,   // [0:16] is the sub-list for field type_name
}

func init() { file_manager_proto_init() }
func file_manager_proto_init() {
	if File_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_manager_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*OnecCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateOnecClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateOnecClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetOnecClusterByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetOnecClusterByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SyncOnecClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SyncOnecClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecNodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*OnecClusterConnInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecClusterConnInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecClusterConnInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateOnecClusterConnInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateOnecClusterConnInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecClusterConnInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecClusterConnInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*GetOnecClusterConnInfoByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*GetOnecClusterConnInfoByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecClusterConnInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecClusterConnInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*OnecNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecNodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*GetOnecNodeByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*GetOnecNodeByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecNodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*SyncOnecNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*SyncOnecNodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecNodeLabelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecNodeLabelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecNodeLabelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecNodeLabelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecNodeAnnotationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecNodeAnnotationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecNodeAnnotationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecNodeAnnotationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*ForbidScheduledReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*ForbidScheduledResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*EnableScheduledNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*EnableScheduledNodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecNodeTaintReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecNodeTaintResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecNodeTaintReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecNodeTaintResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecNodeLabelListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*NodeLabels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecNodeLabelListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecNodeAnnotationListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*NodeAnnotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecNodeAnnotationListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecNodeTaintListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*NodeTaints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecNodeTaintListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*EvictNodePodReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*EvictNodePodResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*OnecProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecProjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecProjectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateOnecProjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateOnecProjectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecProjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecProjectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*GetOnecProjectByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*GetOnecProjectByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecProjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecProjectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*OnecProjectQuota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecProjectQuotaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecProjectQuotaResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateOnecProjectQuotaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateOnecProjectQuotaResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecProjectQuotaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecProjectQuotaResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*GetOnecProjectQuotaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*GetOnecProjectQuotaResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*OnecProjectAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecProjectAdminReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecProjectAdminResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateOnecProjectAdminReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateOnecProjectAdminResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecProjectAdminReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecProjectAdminResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*GetOnecProjectAdminByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*GetOnecProjectAdminByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecProjectAdminReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecProjectAdminResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*OnecProjectApplication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[94].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecProjectApplicationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*AddOnecProjectApplicationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateOnecProjectApplicationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateOnecProjectApplicationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecProjectApplicationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*DelOnecProjectApplicationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*GetOnecProjectApplicationByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*GetOnecProjectApplicationByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[102].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecProjectApplicationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manager_proto_msgTypes[103].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOnecProjectApplicationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_manager_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   104,
			NumExtensions: 0,
			NumServices:   7,
		},
		GoTypes:           file_manager_proto_goTypes,
		DependencyIndexes: file_manager_proto_depIdxs,
		EnumInfos:         file_manager_proto_enumTypes,
		MessageInfos:      file_manager_proto_msgTypes,
	}.Build()
	File_manager_proto = out.File
	file_manager_proto_rawDesc = nil
	file_manager_proto_goTypes = nil
	file_manager_proto_depIdxs = nil
}
