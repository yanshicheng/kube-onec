// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: manager.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OnecClusterService_AddOnecCluster_FullMethodName     = "/pb.OnecClusterService/AddOnecCluster"
	OnecClusterService_UpdateOnecCluster_FullMethodName  = "/pb.OnecClusterService/UpdateOnecCluster"
	OnecClusterService_DelOnecCluster_FullMethodName     = "/pb.OnecClusterService/DelOnecCluster"
	OnecClusterService_GetOnecClusterById_FullMethodName = "/pb.OnecClusterService/GetOnecClusterById"
	OnecClusterService_SearchOnecCluster_FullMethodName  = "/pb.OnecClusterService/SearchOnecCluster"
	OnecClusterService_SyncOnecCluster_FullMethodName    = "/pb.OnecClusterService/SyncOnecCluster"
	OnecClusterService_AddOnecNode_FullMethodName        = "/pb.OnecClusterService/AddOnecNode"
)

// OnecClusterServiceClient is the client API for OnecClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnecClusterServiceClient interface {
	// -----------------------集群表，用于管理多个 Kubernetes 集群-----------------------
	AddOnecCluster(ctx context.Context, in *AddOnecClusterReq, opts ...grpc.CallOption) (*AddOnecClusterResp, error)
	UpdateOnecCluster(ctx context.Context, in *UpdateOnecClusterReq, opts ...grpc.CallOption) (*UpdateOnecClusterResp, error)
	DelOnecCluster(ctx context.Context, in *DelOnecClusterReq, opts ...grpc.CallOption) (*DelOnecClusterResp, error)
	GetOnecClusterById(ctx context.Context, in *GetOnecClusterByIdReq, opts ...grpc.CallOption) (*GetOnecClusterByIdResp, error)
	SearchOnecCluster(ctx context.Context, in *SearchOnecClusterReq, opts ...grpc.CallOption) (*SearchOnecClusterResp, error)
	// 同步集群信息
	SyncOnecCluster(ctx context.Context, in *SyncOnecClusterReq, opts ...grpc.CallOption) (*SyncOnecClusterResp, error)
	AddOnecNode(ctx context.Context, in *AddOnecNodeReq, opts ...grpc.CallOption) (*AddOnecNodeResp, error)
}

type onecClusterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnecClusterServiceClient(cc grpc.ClientConnInterface) OnecClusterServiceClient {
	return &onecClusterServiceClient{cc}
}

func (c *onecClusterServiceClient) AddOnecCluster(ctx context.Context, in *AddOnecClusterReq, opts ...grpc.CallOption) (*AddOnecClusterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOnecClusterResp)
	err := c.cc.Invoke(ctx, OnecClusterService_AddOnecCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecClusterServiceClient) UpdateOnecCluster(ctx context.Context, in *UpdateOnecClusterReq, opts ...grpc.CallOption) (*UpdateOnecClusterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOnecClusterResp)
	err := c.cc.Invoke(ctx, OnecClusterService_UpdateOnecCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecClusterServiceClient) DelOnecCluster(ctx context.Context, in *DelOnecClusterReq, opts ...grpc.CallOption) (*DelOnecClusterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelOnecClusterResp)
	err := c.cc.Invoke(ctx, OnecClusterService_DelOnecCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecClusterServiceClient) GetOnecClusterById(ctx context.Context, in *GetOnecClusterByIdReq, opts ...grpc.CallOption) (*GetOnecClusterByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOnecClusterByIdResp)
	err := c.cc.Invoke(ctx, OnecClusterService_GetOnecClusterById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecClusterServiceClient) SearchOnecCluster(ctx context.Context, in *SearchOnecClusterReq, opts ...grpc.CallOption) (*SearchOnecClusterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchOnecClusterResp)
	err := c.cc.Invoke(ctx, OnecClusterService_SearchOnecCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecClusterServiceClient) SyncOnecCluster(ctx context.Context, in *SyncOnecClusterReq, opts ...grpc.CallOption) (*SyncOnecClusterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncOnecClusterResp)
	err := c.cc.Invoke(ctx, OnecClusterService_SyncOnecCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecClusterServiceClient) AddOnecNode(ctx context.Context, in *AddOnecNodeReq, opts ...grpc.CallOption) (*AddOnecNodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOnecNodeResp)
	err := c.cc.Invoke(ctx, OnecClusterService_AddOnecNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnecClusterServiceServer is the server API for OnecClusterService service.
// All implementations must embed UnimplementedOnecClusterServiceServer
// for forward compatibility.
type OnecClusterServiceServer interface {
	// -----------------------集群表，用于管理多个 Kubernetes 集群-----------------------
	AddOnecCluster(context.Context, *AddOnecClusterReq) (*AddOnecClusterResp, error)
	UpdateOnecCluster(context.Context, *UpdateOnecClusterReq) (*UpdateOnecClusterResp, error)
	DelOnecCluster(context.Context, *DelOnecClusterReq) (*DelOnecClusterResp, error)
	GetOnecClusterById(context.Context, *GetOnecClusterByIdReq) (*GetOnecClusterByIdResp, error)
	SearchOnecCluster(context.Context, *SearchOnecClusterReq) (*SearchOnecClusterResp, error)
	// 同步集群信息
	SyncOnecCluster(context.Context, *SyncOnecClusterReq) (*SyncOnecClusterResp, error)
	AddOnecNode(context.Context, *AddOnecNodeReq) (*AddOnecNodeResp, error)
	mustEmbedUnimplementedOnecClusterServiceServer()
}

// UnimplementedOnecClusterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOnecClusterServiceServer struct{}

func (UnimplementedOnecClusterServiceServer) AddOnecCluster(context.Context, *AddOnecClusterReq) (*AddOnecClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOnecCluster not implemented")
}
func (UnimplementedOnecClusterServiceServer) UpdateOnecCluster(context.Context, *UpdateOnecClusterReq) (*UpdateOnecClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOnecCluster not implemented")
}
func (UnimplementedOnecClusterServiceServer) DelOnecCluster(context.Context, *DelOnecClusterReq) (*DelOnecClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOnecCluster not implemented")
}
func (UnimplementedOnecClusterServiceServer) GetOnecClusterById(context.Context, *GetOnecClusterByIdReq) (*GetOnecClusterByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnecClusterById not implemented")
}
func (UnimplementedOnecClusterServiceServer) SearchOnecCluster(context.Context, *SearchOnecClusterReq) (*SearchOnecClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOnecCluster not implemented")
}
func (UnimplementedOnecClusterServiceServer) SyncOnecCluster(context.Context, *SyncOnecClusterReq) (*SyncOnecClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncOnecCluster not implemented")
}
func (UnimplementedOnecClusterServiceServer) AddOnecNode(context.Context, *AddOnecNodeReq) (*AddOnecNodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOnecNode not implemented")
}
func (UnimplementedOnecClusterServiceServer) mustEmbedUnimplementedOnecClusterServiceServer() {}
func (UnimplementedOnecClusterServiceServer) testEmbeddedByValue()                            {}

// UnsafeOnecClusterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnecClusterServiceServer will
// result in compilation errors.
type UnsafeOnecClusterServiceServer interface {
	mustEmbedUnimplementedOnecClusterServiceServer()
}

func RegisterOnecClusterServiceServer(s grpc.ServiceRegistrar, srv OnecClusterServiceServer) {
	// If the following call pancis, it indicates UnimplementedOnecClusterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OnecClusterService_ServiceDesc, srv)
}

func _OnecClusterService_AddOnecCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOnecClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecClusterServiceServer).AddOnecCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecClusterService_AddOnecCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecClusterServiceServer).AddOnecCluster(ctx, req.(*AddOnecClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecClusterService_UpdateOnecCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOnecClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecClusterServiceServer).UpdateOnecCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecClusterService_UpdateOnecCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecClusterServiceServer).UpdateOnecCluster(ctx, req.(*UpdateOnecClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecClusterService_DelOnecCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOnecClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecClusterServiceServer).DelOnecCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecClusterService_DelOnecCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecClusterServiceServer).DelOnecCluster(ctx, req.(*DelOnecClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecClusterService_GetOnecClusterById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnecClusterByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecClusterServiceServer).GetOnecClusterById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecClusterService_GetOnecClusterById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecClusterServiceServer).GetOnecClusterById(ctx, req.(*GetOnecClusterByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecClusterService_SearchOnecCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOnecClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecClusterServiceServer).SearchOnecCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecClusterService_SearchOnecCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecClusterServiceServer).SearchOnecCluster(ctx, req.(*SearchOnecClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecClusterService_SyncOnecCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncOnecClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecClusterServiceServer).SyncOnecCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecClusterService_SyncOnecCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecClusterServiceServer).SyncOnecCluster(ctx, req.(*SyncOnecClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecClusterService_AddOnecNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOnecNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecClusterServiceServer).AddOnecNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecClusterService_AddOnecNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecClusterServiceServer).AddOnecNode(ctx, req.(*AddOnecNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OnecClusterService_ServiceDesc is the grpc.ServiceDesc for OnecClusterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnecClusterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OnecClusterService",
	HandlerType: (*OnecClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOnecCluster",
			Handler:    _OnecClusterService_AddOnecCluster_Handler,
		},
		{
			MethodName: "UpdateOnecCluster",
			Handler:    _OnecClusterService_UpdateOnecCluster_Handler,
		},
		{
			MethodName: "DelOnecCluster",
			Handler:    _OnecClusterService_DelOnecCluster_Handler,
		},
		{
			MethodName: "GetOnecClusterById",
			Handler:    _OnecClusterService_GetOnecClusterById_Handler,
		},
		{
			MethodName: "SearchOnecCluster",
			Handler:    _OnecClusterService_SearchOnecCluster_Handler,
		},
		{
			MethodName: "SyncOnecCluster",
			Handler:    _OnecClusterService_SyncOnecCluster_Handler,
		},
		{
			MethodName: "AddOnecNode",
			Handler:    _OnecClusterService_AddOnecNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}

const (
	OnecClusterConnInfoService_AddOnecClusterConnInfo_FullMethodName     = "/pb.OnecClusterConnInfoService/AddOnecClusterConnInfo"
	OnecClusterConnInfoService_UpdateOnecClusterConnInfo_FullMethodName  = "/pb.OnecClusterConnInfoService/UpdateOnecClusterConnInfo"
	OnecClusterConnInfoService_DelOnecClusterConnInfo_FullMethodName     = "/pb.OnecClusterConnInfoService/DelOnecClusterConnInfo"
	OnecClusterConnInfoService_GetOnecClusterConnInfoById_FullMethodName = "/pb.OnecClusterConnInfoService/GetOnecClusterConnInfoById"
	OnecClusterConnInfoService_SearchOnecClusterConnInfo_FullMethodName  = "/pb.OnecClusterConnInfoService/SearchOnecClusterConnInfo"
)

// OnecClusterConnInfoServiceClient is the client API for OnecClusterConnInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnecClusterConnInfoServiceClient interface {
	// -----------------------通用的服务连接信息表，动态支持多个服务-----------------------
	AddOnecClusterConnInfo(ctx context.Context, in *AddOnecClusterConnInfoReq, opts ...grpc.CallOption) (*AddOnecClusterConnInfoResp, error)
	UpdateOnecClusterConnInfo(ctx context.Context, in *UpdateOnecClusterConnInfoReq, opts ...grpc.CallOption) (*UpdateOnecClusterConnInfoResp, error)
	DelOnecClusterConnInfo(ctx context.Context, in *DelOnecClusterConnInfoReq, opts ...grpc.CallOption) (*DelOnecClusterConnInfoResp, error)
	GetOnecClusterConnInfoById(ctx context.Context, in *GetOnecClusterConnInfoByIdReq, opts ...grpc.CallOption) (*GetOnecClusterConnInfoByIdResp, error)
	SearchOnecClusterConnInfo(ctx context.Context, in *SearchOnecClusterConnInfoReq, opts ...grpc.CallOption) (*SearchOnecClusterConnInfoResp, error)
}

type onecClusterConnInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnecClusterConnInfoServiceClient(cc grpc.ClientConnInterface) OnecClusterConnInfoServiceClient {
	return &onecClusterConnInfoServiceClient{cc}
}

func (c *onecClusterConnInfoServiceClient) AddOnecClusterConnInfo(ctx context.Context, in *AddOnecClusterConnInfoReq, opts ...grpc.CallOption) (*AddOnecClusterConnInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOnecClusterConnInfoResp)
	err := c.cc.Invoke(ctx, OnecClusterConnInfoService_AddOnecClusterConnInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecClusterConnInfoServiceClient) UpdateOnecClusterConnInfo(ctx context.Context, in *UpdateOnecClusterConnInfoReq, opts ...grpc.CallOption) (*UpdateOnecClusterConnInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOnecClusterConnInfoResp)
	err := c.cc.Invoke(ctx, OnecClusterConnInfoService_UpdateOnecClusterConnInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecClusterConnInfoServiceClient) DelOnecClusterConnInfo(ctx context.Context, in *DelOnecClusterConnInfoReq, opts ...grpc.CallOption) (*DelOnecClusterConnInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelOnecClusterConnInfoResp)
	err := c.cc.Invoke(ctx, OnecClusterConnInfoService_DelOnecClusterConnInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecClusterConnInfoServiceClient) GetOnecClusterConnInfoById(ctx context.Context, in *GetOnecClusterConnInfoByIdReq, opts ...grpc.CallOption) (*GetOnecClusterConnInfoByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOnecClusterConnInfoByIdResp)
	err := c.cc.Invoke(ctx, OnecClusterConnInfoService_GetOnecClusterConnInfoById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecClusterConnInfoServiceClient) SearchOnecClusterConnInfo(ctx context.Context, in *SearchOnecClusterConnInfoReq, opts ...grpc.CallOption) (*SearchOnecClusterConnInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchOnecClusterConnInfoResp)
	err := c.cc.Invoke(ctx, OnecClusterConnInfoService_SearchOnecClusterConnInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnecClusterConnInfoServiceServer is the server API for OnecClusterConnInfoService service.
// All implementations must embed UnimplementedOnecClusterConnInfoServiceServer
// for forward compatibility.
type OnecClusterConnInfoServiceServer interface {
	// -----------------------通用的服务连接信息表，动态支持多个服务-----------------------
	AddOnecClusterConnInfo(context.Context, *AddOnecClusterConnInfoReq) (*AddOnecClusterConnInfoResp, error)
	UpdateOnecClusterConnInfo(context.Context, *UpdateOnecClusterConnInfoReq) (*UpdateOnecClusterConnInfoResp, error)
	DelOnecClusterConnInfo(context.Context, *DelOnecClusterConnInfoReq) (*DelOnecClusterConnInfoResp, error)
	GetOnecClusterConnInfoById(context.Context, *GetOnecClusterConnInfoByIdReq) (*GetOnecClusterConnInfoByIdResp, error)
	SearchOnecClusterConnInfo(context.Context, *SearchOnecClusterConnInfoReq) (*SearchOnecClusterConnInfoResp, error)
	mustEmbedUnimplementedOnecClusterConnInfoServiceServer()
}

// UnimplementedOnecClusterConnInfoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOnecClusterConnInfoServiceServer struct{}

func (UnimplementedOnecClusterConnInfoServiceServer) AddOnecClusterConnInfo(context.Context, *AddOnecClusterConnInfoReq) (*AddOnecClusterConnInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOnecClusterConnInfo not implemented")
}
func (UnimplementedOnecClusterConnInfoServiceServer) UpdateOnecClusterConnInfo(context.Context, *UpdateOnecClusterConnInfoReq) (*UpdateOnecClusterConnInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOnecClusterConnInfo not implemented")
}
func (UnimplementedOnecClusterConnInfoServiceServer) DelOnecClusterConnInfo(context.Context, *DelOnecClusterConnInfoReq) (*DelOnecClusterConnInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOnecClusterConnInfo not implemented")
}
func (UnimplementedOnecClusterConnInfoServiceServer) GetOnecClusterConnInfoById(context.Context, *GetOnecClusterConnInfoByIdReq) (*GetOnecClusterConnInfoByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnecClusterConnInfoById not implemented")
}
func (UnimplementedOnecClusterConnInfoServiceServer) SearchOnecClusterConnInfo(context.Context, *SearchOnecClusterConnInfoReq) (*SearchOnecClusterConnInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOnecClusterConnInfo not implemented")
}
func (UnimplementedOnecClusterConnInfoServiceServer) mustEmbedUnimplementedOnecClusterConnInfoServiceServer() {
}
func (UnimplementedOnecClusterConnInfoServiceServer) testEmbeddedByValue() {}

// UnsafeOnecClusterConnInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnecClusterConnInfoServiceServer will
// result in compilation errors.
type UnsafeOnecClusterConnInfoServiceServer interface {
	mustEmbedUnimplementedOnecClusterConnInfoServiceServer()
}

func RegisterOnecClusterConnInfoServiceServer(s grpc.ServiceRegistrar, srv OnecClusterConnInfoServiceServer) {
	// If the following call pancis, it indicates UnimplementedOnecClusterConnInfoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OnecClusterConnInfoService_ServiceDesc, srv)
}

func _OnecClusterConnInfoService_AddOnecClusterConnInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOnecClusterConnInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecClusterConnInfoServiceServer).AddOnecClusterConnInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecClusterConnInfoService_AddOnecClusterConnInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecClusterConnInfoServiceServer).AddOnecClusterConnInfo(ctx, req.(*AddOnecClusterConnInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecClusterConnInfoService_UpdateOnecClusterConnInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOnecClusterConnInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecClusterConnInfoServiceServer).UpdateOnecClusterConnInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecClusterConnInfoService_UpdateOnecClusterConnInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecClusterConnInfoServiceServer).UpdateOnecClusterConnInfo(ctx, req.(*UpdateOnecClusterConnInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecClusterConnInfoService_DelOnecClusterConnInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOnecClusterConnInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecClusterConnInfoServiceServer).DelOnecClusterConnInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecClusterConnInfoService_DelOnecClusterConnInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecClusterConnInfoServiceServer).DelOnecClusterConnInfo(ctx, req.(*DelOnecClusterConnInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecClusterConnInfoService_GetOnecClusterConnInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnecClusterConnInfoByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecClusterConnInfoServiceServer).GetOnecClusterConnInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecClusterConnInfoService_GetOnecClusterConnInfoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecClusterConnInfoServiceServer).GetOnecClusterConnInfoById(ctx, req.(*GetOnecClusterConnInfoByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecClusterConnInfoService_SearchOnecClusterConnInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOnecClusterConnInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecClusterConnInfoServiceServer).SearchOnecClusterConnInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecClusterConnInfoService_SearchOnecClusterConnInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecClusterConnInfoServiceServer).SearchOnecClusterConnInfo(ctx, req.(*SearchOnecClusterConnInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OnecClusterConnInfoService_ServiceDesc is the grpc.ServiceDesc for OnecClusterConnInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnecClusterConnInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OnecClusterConnInfoService",
	HandlerType: (*OnecClusterConnInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOnecClusterConnInfo",
			Handler:    _OnecClusterConnInfoService_AddOnecClusterConnInfo_Handler,
		},
		{
			MethodName: "UpdateOnecClusterConnInfo",
			Handler:    _OnecClusterConnInfoService_UpdateOnecClusterConnInfo_Handler,
		},
		{
			MethodName: "DelOnecClusterConnInfo",
			Handler:    _OnecClusterConnInfoService_DelOnecClusterConnInfo_Handler,
		},
		{
			MethodName: "GetOnecClusterConnInfoById",
			Handler:    _OnecClusterConnInfoService_GetOnecClusterConnInfoById_Handler,
		},
		{
			MethodName: "SearchOnecClusterConnInfo",
			Handler:    _OnecClusterConnInfoService_SearchOnecClusterConnInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}

const (
	OnecNodeService_DelOnecNode_FullMethodName                  = "/pb.OnecNodeService/DelOnecNode"
	OnecNodeService_GetOnecNodeById_FullMethodName              = "/pb.OnecNodeService/GetOnecNodeById"
	OnecNodeService_SearchOnecNode_FullMethodName               = "/pb.OnecNodeService/SearchOnecNode"
	OnecNodeService_AddOnecNodeLabel_FullMethodName             = "/pb.OnecNodeService/AddOnecNodeLabel"
	OnecNodeService_DelOnecNodeLabel_FullMethodName             = "/pb.OnecNodeService/DelOnecNodeLabel"
	OnecNodeService_AddOnecNodeAnnotation_FullMethodName        = "/pb.OnecNodeService/AddOnecNodeAnnotation"
	OnecNodeService_DelOnecNodeAnnotation_FullMethodName        = "/pb.OnecNodeService/DelOnecNodeAnnotation"
	OnecNodeService_ForbidScheduled_FullMethodName              = "/pb.OnecNodeService/ForbidScheduled"
	OnecNodeService_EnableScheduledNode_FullMethodName          = "/pb.OnecNodeService/EnableScheduledNode"
	OnecNodeService_AddOnecNodeTaint_FullMethodName             = "/pb.OnecNodeService/AddOnecNodeTaint"
	OnecNodeService_DelOnecNodeTaint_FullMethodName             = "/pb.OnecNodeService/DelOnecNodeTaint"
	OnecNodeService_SyncOnecNode_FullMethodName                 = "/pb.OnecNodeService/SyncOnecNode"
	OnecNodeService_EvictNodePod_FullMethodName                 = "/pb.OnecNodeService/EvictNodePod"
	OnecNodeService_SearchOnecNodeLabelList_FullMethodName      = "/pb.OnecNodeService/SearchOnecNodeLabelList"
	OnecNodeService_SearchOnecNodeAnnotationList_FullMethodName = "/pb.OnecNodeService/SearchOnecNodeAnnotationList"
	OnecNodeService_SearchOnecNodeTaintList_FullMethodName      = "/pb.OnecNodeService/SearchOnecNodeTaintList"
)

// OnecNodeServiceClient is the client API for OnecNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnecNodeServiceClient interface {
	// -----------------------节点表，用于管理各集群中的节点信息-----------------------
	DelOnecNode(ctx context.Context, in *DelOnecNodeReq, opts ...grpc.CallOption) (*DelOnecNodeResp, error)
	GetOnecNodeById(ctx context.Context, in *GetOnecNodeByIdReq, opts ...grpc.CallOption) (*GetOnecNodeByIdResp, error)
	SearchOnecNode(ctx context.Context, in *SearchOnecNodeReq, opts ...grpc.CallOption) (*SearchOnecNodeResp, error)
	// 节点添加标签
	AddOnecNodeLabel(ctx context.Context, in *AddOnecNodeLabelReq, opts ...grpc.CallOption) (*AddOnecNodeLabelResp, error)
	// 节点删除标签
	DelOnecNodeLabel(ctx context.Context, in *DelOnecNodeLabelReq, opts ...grpc.CallOption) (*DelOnecNodeLabelResp, error)
	// 节点添加注解
	AddOnecNodeAnnotation(ctx context.Context, in *AddOnecNodeAnnotationReq, opts ...grpc.CallOption) (*AddOnecNodeAnnotationResp, error)
	// 节点删除注解
	DelOnecNodeAnnotation(ctx context.Context, in *DelOnecNodeAnnotationReq, opts ...grpc.CallOption) (*DelOnecNodeAnnotationResp, error)
	// 禁止调度
	ForbidScheduled(ctx context.Context, in *ForbidScheduledReq, opts ...grpc.CallOption) (*ForbidScheduledResp, error)
	// 取消禁止调度
	EnableScheduledNode(ctx context.Context, in *EnableScheduledNodeReq, opts ...grpc.CallOption) (*EnableScheduledNodeResp, error)
	// 添加污点
	AddOnecNodeTaint(ctx context.Context, in *AddOnecNodeTaintReq, opts ...grpc.CallOption) (*AddOnecNodeTaintResp, error)
	// 删除污点
	DelOnecNodeTaint(ctx context.Context, in *DelOnecNodeTaintReq, opts ...grpc.CallOption) (*DelOnecNodeTaintResp, error)
	// 同步节点信息
	SyncOnecNode(ctx context.Context, in *SyncOnecNodeReq, opts ...grpc.CallOption) (*SyncOnecNodeResp, error)
	// 驱逐节点pod
	EvictNodePod(ctx context.Context, in *EvictNodePodReq, opts ...grpc.CallOption) (*EvictNodePodResp, error)
	SearchOnecNodeLabelList(ctx context.Context, in *SearchOnecNodeLabelListReq, opts ...grpc.CallOption) (*SearchOnecNodeLabelListResp, error)
	SearchOnecNodeAnnotationList(ctx context.Context, in *SearchOnecNodeAnnotationListReq, opts ...grpc.CallOption) (*SearchOnecNodeAnnotationListResp, error)
	SearchOnecNodeTaintList(ctx context.Context, in *SearchOnecNodeTaintListReq, opts ...grpc.CallOption) (*SearchOnecNodeTaintListResp, error)
}

type onecNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnecNodeServiceClient(cc grpc.ClientConnInterface) OnecNodeServiceClient {
	return &onecNodeServiceClient{cc}
}

func (c *onecNodeServiceClient) DelOnecNode(ctx context.Context, in *DelOnecNodeReq, opts ...grpc.CallOption) (*DelOnecNodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelOnecNodeResp)
	err := c.cc.Invoke(ctx, OnecNodeService_DelOnecNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) GetOnecNodeById(ctx context.Context, in *GetOnecNodeByIdReq, opts ...grpc.CallOption) (*GetOnecNodeByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOnecNodeByIdResp)
	err := c.cc.Invoke(ctx, OnecNodeService_GetOnecNodeById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) SearchOnecNode(ctx context.Context, in *SearchOnecNodeReq, opts ...grpc.CallOption) (*SearchOnecNodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchOnecNodeResp)
	err := c.cc.Invoke(ctx, OnecNodeService_SearchOnecNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) AddOnecNodeLabel(ctx context.Context, in *AddOnecNodeLabelReq, opts ...grpc.CallOption) (*AddOnecNodeLabelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOnecNodeLabelResp)
	err := c.cc.Invoke(ctx, OnecNodeService_AddOnecNodeLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) DelOnecNodeLabel(ctx context.Context, in *DelOnecNodeLabelReq, opts ...grpc.CallOption) (*DelOnecNodeLabelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelOnecNodeLabelResp)
	err := c.cc.Invoke(ctx, OnecNodeService_DelOnecNodeLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) AddOnecNodeAnnotation(ctx context.Context, in *AddOnecNodeAnnotationReq, opts ...grpc.CallOption) (*AddOnecNodeAnnotationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOnecNodeAnnotationResp)
	err := c.cc.Invoke(ctx, OnecNodeService_AddOnecNodeAnnotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) DelOnecNodeAnnotation(ctx context.Context, in *DelOnecNodeAnnotationReq, opts ...grpc.CallOption) (*DelOnecNodeAnnotationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelOnecNodeAnnotationResp)
	err := c.cc.Invoke(ctx, OnecNodeService_DelOnecNodeAnnotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) ForbidScheduled(ctx context.Context, in *ForbidScheduledReq, opts ...grpc.CallOption) (*ForbidScheduledResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForbidScheduledResp)
	err := c.cc.Invoke(ctx, OnecNodeService_ForbidScheduled_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) EnableScheduledNode(ctx context.Context, in *EnableScheduledNodeReq, opts ...grpc.CallOption) (*EnableScheduledNodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableScheduledNodeResp)
	err := c.cc.Invoke(ctx, OnecNodeService_EnableScheduledNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) AddOnecNodeTaint(ctx context.Context, in *AddOnecNodeTaintReq, opts ...grpc.CallOption) (*AddOnecNodeTaintResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOnecNodeTaintResp)
	err := c.cc.Invoke(ctx, OnecNodeService_AddOnecNodeTaint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) DelOnecNodeTaint(ctx context.Context, in *DelOnecNodeTaintReq, opts ...grpc.CallOption) (*DelOnecNodeTaintResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelOnecNodeTaintResp)
	err := c.cc.Invoke(ctx, OnecNodeService_DelOnecNodeTaint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) SyncOnecNode(ctx context.Context, in *SyncOnecNodeReq, opts ...grpc.CallOption) (*SyncOnecNodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncOnecNodeResp)
	err := c.cc.Invoke(ctx, OnecNodeService_SyncOnecNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) EvictNodePod(ctx context.Context, in *EvictNodePodReq, opts ...grpc.CallOption) (*EvictNodePodResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvictNodePodResp)
	err := c.cc.Invoke(ctx, OnecNodeService_EvictNodePod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) SearchOnecNodeLabelList(ctx context.Context, in *SearchOnecNodeLabelListReq, opts ...grpc.CallOption) (*SearchOnecNodeLabelListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchOnecNodeLabelListResp)
	err := c.cc.Invoke(ctx, OnecNodeService_SearchOnecNodeLabelList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) SearchOnecNodeAnnotationList(ctx context.Context, in *SearchOnecNodeAnnotationListReq, opts ...grpc.CallOption) (*SearchOnecNodeAnnotationListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchOnecNodeAnnotationListResp)
	err := c.cc.Invoke(ctx, OnecNodeService_SearchOnecNodeAnnotationList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) SearchOnecNodeTaintList(ctx context.Context, in *SearchOnecNodeTaintListReq, opts ...grpc.CallOption) (*SearchOnecNodeTaintListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchOnecNodeTaintListResp)
	err := c.cc.Invoke(ctx, OnecNodeService_SearchOnecNodeTaintList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnecNodeServiceServer is the server API for OnecNodeService service.
// All implementations must embed UnimplementedOnecNodeServiceServer
// for forward compatibility.
type OnecNodeServiceServer interface {
	// -----------------------节点表，用于管理各集群中的节点信息-----------------------
	DelOnecNode(context.Context, *DelOnecNodeReq) (*DelOnecNodeResp, error)
	GetOnecNodeById(context.Context, *GetOnecNodeByIdReq) (*GetOnecNodeByIdResp, error)
	SearchOnecNode(context.Context, *SearchOnecNodeReq) (*SearchOnecNodeResp, error)
	// 节点添加标签
	AddOnecNodeLabel(context.Context, *AddOnecNodeLabelReq) (*AddOnecNodeLabelResp, error)
	// 节点删除标签
	DelOnecNodeLabel(context.Context, *DelOnecNodeLabelReq) (*DelOnecNodeLabelResp, error)
	// 节点添加注解
	AddOnecNodeAnnotation(context.Context, *AddOnecNodeAnnotationReq) (*AddOnecNodeAnnotationResp, error)
	// 节点删除注解
	DelOnecNodeAnnotation(context.Context, *DelOnecNodeAnnotationReq) (*DelOnecNodeAnnotationResp, error)
	// 禁止调度
	ForbidScheduled(context.Context, *ForbidScheduledReq) (*ForbidScheduledResp, error)
	// 取消禁止调度
	EnableScheduledNode(context.Context, *EnableScheduledNodeReq) (*EnableScheduledNodeResp, error)
	// 添加污点
	AddOnecNodeTaint(context.Context, *AddOnecNodeTaintReq) (*AddOnecNodeTaintResp, error)
	// 删除污点
	DelOnecNodeTaint(context.Context, *DelOnecNodeTaintReq) (*DelOnecNodeTaintResp, error)
	// 同步节点信息
	SyncOnecNode(context.Context, *SyncOnecNodeReq) (*SyncOnecNodeResp, error)
	// 驱逐节点pod
	EvictNodePod(context.Context, *EvictNodePodReq) (*EvictNodePodResp, error)
	SearchOnecNodeLabelList(context.Context, *SearchOnecNodeLabelListReq) (*SearchOnecNodeLabelListResp, error)
	SearchOnecNodeAnnotationList(context.Context, *SearchOnecNodeAnnotationListReq) (*SearchOnecNodeAnnotationListResp, error)
	SearchOnecNodeTaintList(context.Context, *SearchOnecNodeTaintListReq) (*SearchOnecNodeTaintListResp, error)
	mustEmbedUnimplementedOnecNodeServiceServer()
}

// UnimplementedOnecNodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOnecNodeServiceServer struct{}

func (UnimplementedOnecNodeServiceServer) DelOnecNode(context.Context, *DelOnecNodeReq) (*DelOnecNodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOnecNode not implemented")
}
func (UnimplementedOnecNodeServiceServer) GetOnecNodeById(context.Context, *GetOnecNodeByIdReq) (*GetOnecNodeByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnecNodeById not implemented")
}
func (UnimplementedOnecNodeServiceServer) SearchOnecNode(context.Context, *SearchOnecNodeReq) (*SearchOnecNodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOnecNode not implemented")
}
func (UnimplementedOnecNodeServiceServer) AddOnecNodeLabel(context.Context, *AddOnecNodeLabelReq) (*AddOnecNodeLabelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOnecNodeLabel not implemented")
}
func (UnimplementedOnecNodeServiceServer) DelOnecNodeLabel(context.Context, *DelOnecNodeLabelReq) (*DelOnecNodeLabelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOnecNodeLabel not implemented")
}
func (UnimplementedOnecNodeServiceServer) AddOnecNodeAnnotation(context.Context, *AddOnecNodeAnnotationReq) (*AddOnecNodeAnnotationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOnecNodeAnnotation not implemented")
}
func (UnimplementedOnecNodeServiceServer) DelOnecNodeAnnotation(context.Context, *DelOnecNodeAnnotationReq) (*DelOnecNodeAnnotationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOnecNodeAnnotation not implemented")
}
func (UnimplementedOnecNodeServiceServer) ForbidScheduled(context.Context, *ForbidScheduledReq) (*ForbidScheduledResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForbidScheduled not implemented")
}
func (UnimplementedOnecNodeServiceServer) EnableScheduledNode(context.Context, *EnableScheduledNodeReq) (*EnableScheduledNodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableScheduledNode not implemented")
}
func (UnimplementedOnecNodeServiceServer) AddOnecNodeTaint(context.Context, *AddOnecNodeTaintReq) (*AddOnecNodeTaintResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOnecNodeTaint not implemented")
}
func (UnimplementedOnecNodeServiceServer) DelOnecNodeTaint(context.Context, *DelOnecNodeTaintReq) (*DelOnecNodeTaintResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOnecNodeTaint not implemented")
}
func (UnimplementedOnecNodeServiceServer) SyncOnecNode(context.Context, *SyncOnecNodeReq) (*SyncOnecNodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncOnecNode not implemented")
}
func (UnimplementedOnecNodeServiceServer) EvictNodePod(context.Context, *EvictNodePodReq) (*EvictNodePodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvictNodePod not implemented")
}
func (UnimplementedOnecNodeServiceServer) SearchOnecNodeLabelList(context.Context, *SearchOnecNodeLabelListReq) (*SearchOnecNodeLabelListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOnecNodeLabelList not implemented")
}
func (UnimplementedOnecNodeServiceServer) SearchOnecNodeAnnotationList(context.Context, *SearchOnecNodeAnnotationListReq) (*SearchOnecNodeAnnotationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOnecNodeAnnotationList not implemented")
}
func (UnimplementedOnecNodeServiceServer) SearchOnecNodeTaintList(context.Context, *SearchOnecNodeTaintListReq) (*SearchOnecNodeTaintListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOnecNodeTaintList not implemented")
}
func (UnimplementedOnecNodeServiceServer) mustEmbedUnimplementedOnecNodeServiceServer() {}
func (UnimplementedOnecNodeServiceServer) testEmbeddedByValue()                         {}

// UnsafeOnecNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnecNodeServiceServer will
// result in compilation errors.
type UnsafeOnecNodeServiceServer interface {
	mustEmbedUnimplementedOnecNodeServiceServer()
}

func RegisterOnecNodeServiceServer(s grpc.ServiceRegistrar, srv OnecNodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedOnecNodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OnecNodeService_ServiceDesc, srv)
}

func _OnecNodeService_DelOnecNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOnecNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).DelOnecNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_DelOnecNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).DelOnecNode(ctx, req.(*DelOnecNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_GetOnecNodeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnecNodeByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).GetOnecNodeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_GetOnecNodeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).GetOnecNodeById(ctx, req.(*GetOnecNodeByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_SearchOnecNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOnecNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).SearchOnecNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_SearchOnecNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).SearchOnecNode(ctx, req.(*SearchOnecNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_AddOnecNodeLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOnecNodeLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).AddOnecNodeLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_AddOnecNodeLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).AddOnecNodeLabel(ctx, req.(*AddOnecNodeLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_DelOnecNodeLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOnecNodeLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).DelOnecNodeLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_DelOnecNodeLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).DelOnecNodeLabel(ctx, req.(*DelOnecNodeLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_AddOnecNodeAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOnecNodeAnnotationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).AddOnecNodeAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_AddOnecNodeAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).AddOnecNodeAnnotation(ctx, req.(*AddOnecNodeAnnotationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_DelOnecNodeAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOnecNodeAnnotationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).DelOnecNodeAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_DelOnecNodeAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).DelOnecNodeAnnotation(ctx, req.(*DelOnecNodeAnnotationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_ForbidScheduled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForbidScheduledReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).ForbidScheduled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_ForbidScheduled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).ForbidScheduled(ctx, req.(*ForbidScheduledReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_EnableScheduledNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableScheduledNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).EnableScheduledNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_EnableScheduledNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).EnableScheduledNode(ctx, req.(*EnableScheduledNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_AddOnecNodeTaint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOnecNodeTaintReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).AddOnecNodeTaint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_AddOnecNodeTaint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).AddOnecNodeTaint(ctx, req.(*AddOnecNodeTaintReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_DelOnecNodeTaint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOnecNodeTaintReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).DelOnecNodeTaint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_DelOnecNodeTaint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).DelOnecNodeTaint(ctx, req.(*DelOnecNodeTaintReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_SyncOnecNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncOnecNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).SyncOnecNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_SyncOnecNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).SyncOnecNode(ctx, req.(*SyncOnecNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_EvictNodePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvictNodePodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).EvictNodePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_EvictNodePod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).EvictNodePod(ctx, req.(*EvictNodePodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_SearchOnecNodeLabelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOnecNodeLabelListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).SearchOnecNodeLabelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_SearchOnecNodeLabelList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).SearchOnecNodeLabelList(ctx, req.(*SearchOnecNodeLabelListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_SearchOnecNodeAnnotationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOnecNodeAnnotationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).SearchOnecNodeAnnotationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_SearchOnecNodeAnnotationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).SearchOnecNodeAnnotationList(ctx, req.(*SearchOnecNodeAnnotationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_SearchOnecNodeTaintList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOnecNodeTaintListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).SearchOnecNodeTaintList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_SearchOnecNodeTaintList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).SearchOnecNodeTaintList(ctx, req.(*SearchOnecNodeTaintListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OnecNodeService_ServiceDesc is the grpc.ServiceDesc for OnecNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnecNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OnecNodeService",
	HandlerType: (*OnecNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DelOnecNode",
			Handler:    _OnecNodeService_DelOnecNode_Handler,
		},
		{
			MethodName: "GetOnecNodeById",
			Handler:    _OnecNodeService_GetOnecNodeById_Handler,
		},
		{
			MethodName: "SearchOnecNode",
			Handler:    _OnecNodeService_SearchOnecNode_Handler,
		},
		{
			MethodName: "AddOnecNodeLabel",
			Handler:    _OnecNodeService_AddOnecNodeLabel_Handler,
		},
		{
			MethodName: "DelOnecNodeLabel",
			Handler:    _OnecNodeService_DelOnecNodeLabel_Handler,
		},
		{
			MethodName: "AddOnecNodeAnnotation",
			Handler:    _OnecNodeService_AddOnecNodeAnnotation_Handler,
		},
		{
			MethodName: "DelOnecNodeAnnotation",
			Handler:    _OnecNodeService_DelOnecNodeAnnotation_Handler,
		},
		{
			MethodName: "ForbidScheduled",
			Handler:    _OnecNodeService_ForbidScheduled_Handler,
		},
		{
			MethodName: "EnableScheduledNode",
			Handler:    _OnecNodeService_EnableScheduledNode_Handler,
		},
		{
			MethodName: "AddOnecNodeTaint",
			Handler:    _OnecNodeService_AddOnecNodeTaint_Handler,
		},
		{
			MethodName: "DelOnecNodeTaint",
			Handler:    _OnecNodeService_DelOnecNodeTaint_Handler,
		},
		{
			MethodName: "SyncOnecNode",
			Handler:    _OnecNodeService_SyncOnecNode_Handler,
		},
		{
			MethodName: "EvictNodePod",
			Handler:    _OnecNodeService_EvictNodePod_Handler,
		},
		{
			MethodName: "SearchOnecNodeLabelList",
			Handler:    _OnecNodeService_SearchOnecNodeLabelList_Handler,
		},
		{
			MethodName: "SearchOnecNodeAnnotationList",
			Handler:    _OnecNodeService_SearchOnecNodeAnnotationList_Handler,
		},
		{
			MethodName: "SearchOnecNodeTaintList",
			Handler:    _OnecNodeService_SearchOnecNodeTaintList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}

const (
	OnecProjectService_AddOnecProject_FullMethodName     = "/pb.OnecProjectService/AddOnecProject"
	OnecProjectService_UpdateOnecProject_FullMethodName  = "/pb.OnecProjectService/UpdateOnecProject"
	OnecProjectService_DelOnecProject_FullMethodName     = "/pb.OnecProjectService/DelOnecProject"
	OnecProjectService_GetOnecProjectById_FullMethodName = "/pb.OnecProjectService/GetOnecProjectById"
	OnecProjectService_SearchOnecProject_FullMethodName  = "/pb.OnecProjectService/SearchOnecProject"
)

// OnecProjectServiceClient is the client API for OnecProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnecProjectServiceClient interface {
	// -----------------------项目表，记录项目信息-----------------------
	AddOnecProject(ctx context.Context, in *AddOnecProjectReq, opts ...grpc.CallOption) (*AddOnecProjectResp, error)
	UpdateOnecProject(ctx context.Context, in *UpdateOnecProjectReq, opts ...grpc.CallOption) (*UpdateOnecProjectResp, error)
	DelOnecProject(ctx context.Context, in *DelOnecProjectReq, opts ...grpc.CallOption) (*DelOnecProjectResp, error)
	GetOnecProjectById(ctx context.Context, in *GetOnecProjectByIdReq, opts ...grpc.CallOption) (*GetOnecProjectByIdResp, error)
	SearchOnecProject(ctx context.Context, in *SearchOnecProjectReq, opts ...grpc.CallOption) (*SearchOnecProjectResp, error)
}

type onecProjectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnecProjectServiceClient(cc grpc.ClientConnInterface) OnecProjectServiceClient {
	return &onecProjectServiceClient{cc}
}

func (c *onecProjectServiceClient) AddOnecProject(ctx context.Context, in *AddOnecProjectReq, opts ...grpc.CallOption) (*AddOnecProjectResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOnecProjectResp)
	err := c.cc.Invoke(ctx, OnecProjectService_AddOnecProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecProjectServiceClient) UpdateOnecProject(ctx context.Context, in *UpdateOnecProjectReq, opts ...grpc.CallOption) (*UpdateOnecProjectResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOnecProjectResp)
	err := c.cc.Invoke(ctx, OnecProjectService_UpdateOnecProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecProjectServiceClient) DelOnecProject(ctx context.Context, in *DelOnecProjectReq, opts ...grpc.CallOption) (*DelOnecProjectResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelOnecProjectResp)
	err := c.cc.Invoke(ctx, OnecProjectService_DelOnecProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecProjectServiceClient) GetOnecProjectById(ctx context.Context, in *GetOnecProjectByIdReq, opts ...grpc.CallOption) (*GetOnecProjectByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOnecProjectByIdResp)
	err := c.cc.Invoke(ctx, OnecProjectService_GetOnecProjectById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecProjectServiceClient) SearchOnecProject(ctx context.Context, in *SearchOnecProjectReq, opts ...grpc.CallOption) (*SearchOnecProjectResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchOnecProjectResp)
	err := c.cc.Invoke(ctx, OnecProjectService_SearchOnecProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnecProjectServiceServer is the server API for OnecProjectService service.
// All implementations must embed UnimplementedOnecProjectServiceServer
// for forward compatibility.
type OnecProjectServiceServer interface {
	// -----------------------项目表，记录项目信息-----------------------
	AddOnecProject(context.Context, *AddOnecProjectReq) (*AddOnecProjectResp, error)
	UpdateOnecProject(context.Context, *UpdateOnecProjectReq) (*UpdateOnecProjectResp, error)
	DelOnecProject(context.Context, *DelOnecProjectReq) (*DelOnecProjectResp, error)
	GetOnecProjectById(context.Context, *GetOnecProjectByIdReq) (*GetOnecProjectByIdResp, error)
	SearchOnecProject(context.Context, *SearchOnecProjectReq) (*SearchOnecProjectResp, error)
	mustEmbedUnimplementedOnecProjectServiceServer()
}

// UnimplementedOnecProjectServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOnecProjectServiceServer struct{}

func (UnimplementedOnecProjectServiceServer) AddOnecProject(context.Context, *AddOnecProjectReq) (*AddOnecProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOnecProject not implemented")
}
func (UnimplementedOnecProjectServiceServer) UpdateOnecProject(context.Context, *UpdateOnecProjectReq) (*UpdateOnecProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOnecProject not implemented")
}
func (UnimplementedOnecProjectServiceServer) DelOnecProject(context.Context, *DelOnecProjectReq) (*DelOnecProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOnecProject not implemented")
}
func (UnimplementedOnecProjectServiceServer) GetOnecProjectById(context.Context, *GetOnecProjectByIdReq) (*GetOnecProjectByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnecProjectById not implemented")
}
func (UnimplementedOnecProjectServiceServer) SearchOnecProject(context.Context, *SearchOnecProjectReq) (*SearchOnecProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOnecProject not implemented")
}
func (UnimplementedOnecProjectServiceServer) mustEmbedUnimplementedOnecProjectServiceServer() {}
func (UnimplementedOnecProjectServiceServer) testEmbeddedByValue()                            {}

// UnsafeOnecProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnecProjectServiceServer will
// result in compilation errors.
type UnsafeOnecProjectServiceServer interface {
	mustEmbedUnimplementedOnecProjectServiceServer()
}

func RegisterOnecProjectServiceServer(s grpc.ServiceRegistrar, srv OnecProjectServiceServer) {
	// If the following call pancis, it indicates UnimplementedOnecProjectServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OnecProjectService_ServiceDesc, srv)
}

func _OnecProjectService_AddOnecProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOnecProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecProjectServiceServer).AddOnecProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecProjectService_AddOnecProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecProjectServiceServer).AddOnecProject(ctx, req.(*AddOnecProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecProjectService_UpdateOnecProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOnecProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecProjectServiceServer).UpdateOnecProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecProjectService_UpdateOnecProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecProjectServiceServer).UpdateOnecProject(ctx, req.(*UpdateOnecProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecProjectService_DelOnecProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOnecProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecProjectServiceServer).DelOnecProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecProjectService_DelOnecProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecProjectServiceServer).DelOnecProject(ctx, req.(*DelOnecProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecProjectService_GetOnecProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnecProjectByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecProjectServiceServer).GetOnecProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecProjectService_GetOnecProjectById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecProjectServiceServer).GetOnecProjectById(ctx, req.(*GetOnecProjectByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecProjectService_SearchOnecProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOnecProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecProjectServiceServer).SearchOnecProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecProjectService_SearchOnecProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecProjectServiceServer).SearchOnecProject(ctx, req.(*SearchOnecProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OnecProjectService_ServiceDesc is the grpc.ServiceDesc for OnecProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnecProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OnecProjectService",
	HandlerType: (*OnecProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOnecProject",
			Handler:    _OnecProjectService_AddOnecProject_Handler,
		},
		{
			MethodName: "UpdateOnecProject",
			Handler:    _OnecProjectService_UpdateOnecProject_Handler,
		},
		{
			MethodName: "DelOnecProject",
			Handler:    _OnecProjectService_DelOnecProject_Handler,
		},
		{
			MethodName: "GetOnecProjectById",
			Handler:    _OnecProjectService_GetOnecProjectById_Handler,
		},
		{
			MethodName: "SearchOnecProject",
			Handler:    _OnecProjectService_SearchOnecProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}

const (
	OnecProjectQuotaService_AddOnecProjectQuota_FullMethodName     = "/pb.OnecProjectQuotaService/AddOnecProjectQuota"
	OnecProjectQuotaService_UpdateOnecProjectQuota_FullMethodName  = "/pb.OnecProjectQuotaService/UpdateOnecProjectQuota"
	OnecProjectQuotaService_DelOnecProjectQuota_FullMethodName     = "/pb.OnecProjectQuotaService/DelOnecProjectQuota"
	OnecProjectQuotaService_GetOnecProjectQuotaById_FullMethodName = "/pb.OnecProjectQuotaService/GetOnecProjectQuotaById"
	OnecProjectQuotaService_SearchOnecProjectQuota_FullMethodName  = "/pb.OnecProjectQuotaService/SearchOnecProjectQuota"
)

// OnecProjectQuotaServiceClient is the client API for OnecProjectQuotaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnecProjectQuotaServiceClient interface {
	// -----------------------项目与集群的对应关系表，记录资源配额和使用情况-----------------------
	AddOnecProjectQuota(ctx context.Context, in *AddOnecProjectQuotaReq, opts ...grpc.CallOption) (*AddOnecProjectQuotaResp, error)
	UpdateOnecProjectQuota(ctx context.Context, in *UpdateOnecProjectQuotaReq, opts ...grpc.CallOption) (*UpdateOnecProjectQuotaResp, error)
	DelOnecProjectQuota(ctx context.Context, in *DelOnecProjectQuotaReq, opts ...grpc.CallOption) (*DelOnecProjectQuotaResp, error)
	GetOnecProjectQuotaById(ctx context.Context, in *GetOnecProjectQuotaByIdReq, opts ...grpc.CallOption) (*GetOnecProjectQuotaByIdResp, error)
	SearchOnecProjectQuota(ctx context.Context, in *SearchOnecProjectQuotaReq, opts ...grpc.CallOption) (*SearchOnecProjectQuotaResp, error)
}

type onecProjectQuotaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnecProjectQuotaServiceClient(cc grpc.ClientConnInterface) OnecProjectQuotaServiceClient {
	return &onecProjectQuotaServiceClient{cc}
}

func (c *onecProjectQuotaServiceClient) AddOnecProjectQuota(ctx context.Context, in *AddOnecProjectQuotaReq, opts ...grpc.CallOption) (*AddOnecProjectQuotaResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOnecProjectQuotaResp)
	err := c.cc.Invoke(ctx, OnecProjectQuotaService_AddOnecProjectQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecProjectQuotaServiceClient) UpdateOnecProjectQuota(ctx context.Context, in *UpdateOnecProjectQuotaReq, opts ...grpc.CallOption) (*UpdateOnecProjectQuotaResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOnecProjectQuotaResp)
	err := c.cc.Invoke(ctx, OnecProjectQuotaService_UpdateOnecProjectQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecProjectQuotaServiceClient) DelOnecProjectQuota(ctx context.Context, in *DelOnecProjectQuotaReq, opts ...grpc.CallOption) (*DelOnecProjectQuotaResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelOnecProjectQuotaResp)
	err := c.cc.Invoke(ctx, OnecProjectQuotaService_DelOnecProjectQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecProjectQuotaServiceClient) GetOnecProjectQuotaById(ctx context.Context, in *GetOnecProjectQuotaByIdReq, opts ...grpc.CallOption) (*GetOnecProjectQuotaByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOnecProjectQuotaByIdResp)
	err := c.cc.Invoke(ctx, OnecProjectQuotaService_GetOnecProjectQuotaById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecProjectQuotaServiceClient) SearchOnecProjectQuota(ctx context.Context, in *SearchOnecProjectQuotaReq, opts ...grpc.CallOption) (*SearchOnecProjectQuotaResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchOnecProjectQuotaResp)
	err := c.cc.Invoke(ctx, OnecProjectQuotaService_SearchOnecProjectQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnecProjectQuotaServiceServer is the server API for OnecProjectQuotaService service.
// All implementations must embed UnimplementedOnecProjectQuotaServiceServer
// for forward compatibility.
type OnecProjectQuotaServiceServer interface {
	// -----------------------项目与集群的对应关系表，记录资源配额和使用情况-----------------------
	AddOnecProjectQuota(context.Context, *AddOnecProjectQuotaReq) (*AddOnecProjectQuotaResp, error)
	UpdateOnecProjectQuota(context.Context, *UpdateOnecProjectQuotaReq) (*UpdateOnecProjectQuotaResp, error)
	DelOnecProjectQuota(context.Context, *DelOnecProjectQuotaReq) (*DelOnecProjectQuotaResp, error)
	GetOnecProjectQuotaById(context.Context, *GetOnecProjectQuotaByIdReq) (*GetOnecProjectQuotaByIdResp, error)
	SearchOnecProjectQuota(context.Context, *SearchOnecProjectQuotaReq) (*SearchOnecProjectQuotaResp, error)
	mustEmbedUnimplementedOnecProjectQuotaServiceServer()
}

// UnimplementedOnecProjectQuotaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOnecProjectQuotaServiceServer struct{}

func (UnimplementedOnecProjectQuotaServiceServer) AddOnecProjectQuota(context.Context, *AddOnecProjectQuotaReq) (*AddOnecProjectQuotaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOnecProjectQuota not implemented")
}
func (UnimplementedOnecProjectQuotaServiceServer) UpdateOnecProjectQuota(context.Context, *UpdateOnecProjectQuotaReq) (*UpdateOnecProjectQuotaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOnecProjectQuota not implemented")
}
func (UnimplementedOnecProjectQuotaServiceServer) DelOnecProjectQuota(context.Context, *DelOnecProjectQuotaReq) (*DelOnecProjectQuotaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOnecProjectQuota not implemented")
}
func (UnimplementedOnecProjectQuotaServiceServer) GetOnecProjectQuotaById(context.Context, *GetOnecProjectQuotaByIdReq) (*GetOnecProjectQuotaByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnecProjectQuotaById not implemented")
}
func (UnimplementedOnecProjectQuotaServiceServer) SearchOnecProjectQuota(context.Context, *SearchOnecProjectQuotaReq) (*SearchOnecProjectQuotaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOnecProjectQuota not implemented")
}
func (UnimplementedOnecProjectQuotaServiceServer) mustEmbedUnimplementedOnecProjectQuotaServiceServer() {
}
func (UnimplementedOnecProjectQuotaServiceServer) testEmbeddedByValue() {}

// UnsafeOnecProjectQuotaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnecProjectQuotaServiceServer will
// result in compilation errors.
type UnsafeOnecProjectQuotaServiceServer interface {
	mustEmbedUnimplementedOnecProjectQuotaServiceServer()
}

func RegisterOnecProjectQuotaServiceServer(s grpc.ServiceRegistrar, srv OnecProjectQuotaServiceServer) {
	// If the following call pancis, it indicates UnimplementedOnecProjectQuotaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OnecProjectQuotaService_ServiceDesc, srv)
}

func _OnecProjectQuotaService_AddOnecProjectQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOnecProjectQuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecProjectQuotaServiceServer).AddOnecProjectQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecProjectQuotaService_AddOnecProjectQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecProjectQuotaServiceServer).AddOnecProjectQuota(ctx, req.(*AddOnecProjectQuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecProjectQuotaService_UpdateOnecProjectQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOnecProjectQuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecProjectQuotaServiceServer).UpdateOnecProjectQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecProjectQuotaService_UpdateOnecProjectQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecProjectQuotaServiceServer).UpdateOnecProjectQuota(ctx, req.(*UpdateOnecProjectQuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecProjectQuotaService_DelOnecProjectQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOnecProjectQuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecProjectQuotaServiceServer).DelOnecProjectQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecProjectQuotaService_DelOnecProjectQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecProjectQuotaServiceServer).DelOnecProjectQuota(ctx, req.(*DelOnecProjectQuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecProjectQuotaService_GetOnecProjectQuotaById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnecProjectQuotaByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecProjectQuotaServiceServer).GetOnecProjectQuotaById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecProjectQuotaService_GetOnecProjectQuotaById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecProjectQuotaServiceServer).GetOnecProjectQuotaById(ctx, req.(*GetOnecProjectQuotaByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecProjectQuotaService_SearchOnecProjectQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOnecProjectQuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecProjectQuotaServiceServer).SearchOnecProjectQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecProjectQuotaService_SearchOnecProjectQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecProjectQuotaServiceServer).SearchOnecProjectQuota(ctx, req.(*SearchOnecProjectQuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OnecProjectQuotaService_ServiceDesc is the grpc.ServiceDesc for OnecProjectQuotaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnecProjectQuotaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OnecProjectQuotaService",
	HandlerType: (*OnecProjectQuotaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOnecProjectQuota",
			Handler:    _OnecProjectQuotaService_AddOnecProjectQuota_Handler,
		},
		{
			MethodName: "UpdateOnecProjectQuota",
			Handler:    _OnecProjectQuotaService_UpdateOnecProjectQuota_Handler,
		},
		{
			MethodName: "DelOnecProjectQuota",
			Handler:    _OnecProjectQuotaService_DelOnecProjectQuota_Handler,
		},
		{
			MethodName: "GetOnecProjectQuotaById",
			Handler:    _OnecProjectQuotaService_GetOnecProjectQuotaById_Handler,
		},
		{
			MethodName: "SearchOnecProjectQuota",
			Handler:    _OnecProjectQuotaService_SearchOnecProjectQuota_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}

const (
	OnecProjectAdminService_AddOnecProjectAdmin_FullMethodName     = "/pb.OnecProjectAdminService/AddOnecProjectAdmin"
	OnecProjectAdminService_UpdateOnecProjectAdmin_FullMethodName  = "/pb.OnecProjectAdminService/UpdateOnecProjectAdmin"
	OnecProjectAdminService_DelOnecProjectAdmin_FullMethodName     = "/pb.OnecProjectAdminService/DelOnecProjectAdmin"
	OnecProjectAdminService_GetOnecProjectAdminById_FullMethodName = "/pb.OnecProjectAdminService/GetOnecProjectAdminById"
	OnecProjectAdminService_SearchOnecProjectAdmin_FullMethodName  = "/pb.OnecProjectAdminService/SearchOnecProjectAdmin"
)

// OnecProjectAdminServiceClient is the client API for OnecProjectAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnecProjectAdminServiceClient interface {
	// -----------------------项目管理员表，关联项目与用户的多对多关系-----------------------
	AddOnecProjectAdmin(ctx context.Context, in *AddOnecProjectAdminReq, opts ...grpc.CallOption) (*AddOnecProjectAdminResp, error)
	UpdateOnecProjectAdmin(ctx context.Context, in *UpdateOnecProjectAdminReq, opts ...grpc.CallOption) (*UpdateOnecProjectAdminResp, error)
	DelOnecProjectAdmin(ctx context.Context, in *DelOnecProjectAdminReq, opts ...grpc.CallOption) (*DelOnecProjectAdminResp, error)
	GetOnecProjectAdminById(ctx context.Context, in *GetOnecProjectAdminByIdReq, opts ...grpc.CallOption) (*GetOnecProjectAdminByIdResp, error)
	SearchOnecProjectAdmin(ctx context.Context, in *SearchOnecProjectAdminReq, opts ...grpc.CallOption) (*SearchOnecProjectAdminResp, error)
}

type onecProjectAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnecProjectAdminServiceClient(cc grpc.ClientConnInterface) OnecProjectAdminServiceClient {
	return &onecProjectAdminServiceClient{cc}
}

func (c *onecProjectAdminServiceClient) AddOnecProjectAdmin(ctx context.Context, in *AddOnecProjectAdminReq, opts ...grpc.CallOption) (*AddOnecProjectAdminResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOnecProjectAdminResp)
	err := c.cc.Invoke(ctx, OnecProjectAdminService_AddOnecProjectAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecProjectAdminServiceClient) UpdateOnecProjectAdmin(ctx context.Context, in *UpdateOnecProjectAdminReq, opts ...grpc.CallOption) (*UpdateOnecProjectAdminResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOnecProjectAdminResp)
	err := c.cc.Invoke(ctx, OnecProjectAdminService_UpdateOnecProjectAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecProjectAdminServiceClient) DelOnecProjectAdmin(ctx context.Context, in *DelOnecProjectAdminReq, opts ...grpc.CallOption) (*DelOnecProjectAdminResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelOnecProjectAdminResp)
	err := c.cc.Invoke(ctx, OnecProjectAdminService_DelOnecProjectAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecProjectAdminServiceClient) GetOnecProjectAdminById(ctx context.Context, in *GetOnecProjectAdminByIdReq, opts ...grpc.CallOption) (*GetOnecProjectAdminByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOnecProjectAdminByIdResp)
	err := c.cc.Invoke(ctx, OnecProjectAdminService_GetOnecProjectAdminById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecProjectAdminServiceClient) SearchOnecProjectAdmin(ctx context.Context, in *SearchOnecProjectAdminReq, opts ...grpc.CallOption) (*SearchOnecProjectAdminResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchOnecProjectAdminResp)
	err := c.cc.Invoke(ctx, OnecProjectAdminService_SearchOnecProjectAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnecProjectAdminServiceServer is the server API for OnecProjectAdminService service.
// All implementations must embed UnimplementedOnecProjectAdminServiceServer
// for forward compatibility.
type OnecProjectAdminServiceServer interface {
	// -----------------------项目管理员表，关联项目与用户的多对多关系-----------------------
	AddOnecProjectAdmin(context.Context, *AddOnecProjectAdminReq) (*AddOnecProjectAdminResp, error)
	UpdateOnecProjectAdmin(context.Context, *UpdateOnecProjectAdminReq) (*UpdateOnecProjectAdminResp, error)
	DelOnecProjectAdmin(context.Context, *DelOnecProjectAdminReq) (*DelOnecProjectAdminResp, error)
	GetOnecProjectAdminById(context.Context, *GetOnecProjectAdminByIdReq) (*GetOnecProjectAdminByIdResp, error)
	SearchOnecProjectAdmin(context.Context, *SearchOnecProjectAdminReq) (*SearchOnecProjectAdminResp, error)
	mustEmbedUnimplementedOnecProjectAdminServiceServer()
}

// UnimplementedOnecProjectAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOnecProjectAdminServiceServer struct{}

func (UnimplementedOnecProjectAdminServiceServer) AddOnecProjectAdmin(context.Context, *AddOnecProjectAdminReq) (*AddOnecProjectAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOnecProjectAdmin not implemented")
}
func (UnimplementedOnecProjectAdminServiceServer) UpdateOnecProjectAdmin(context.Context, *UpdateOnecProjectAdminReq) (*UpdateOnecProjectAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOnecProjectAdmin not implemented")
}
func (UnimplementedOnecProjectAdminServiceServer) DelOnecProjectAdmin(context.Context, *DelOnecProjectAdminReq) (*DelOnecProjectAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOnecProjectAdmin not implemented")
}
func (UnimplementedOnecProjectAdminServiceServer) GetOnecProjectAdminById(context.Context, *GetOnecProjectAdminByIdReq) (*GetOnecProjectAdminByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnecProjectAdminById not implemented")
}
func (UnimplementedOnecProjectAdminServiceServer) SearchOnecProjectAdmin(context.Context, *SearchOnecProjectAdminReq) (*SearchOnecProjectAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOnecProjectAdmin not implemented")
}
func (UnimplementedOnecProjectAdminServiceServer) mustEmbedUnimplementedOnecProjectAdminServiceServer() {
}
func (UnimplementedOnecProjectAdminServiceServer) testEmbeddedByValue() {}

// UnsafeOnecProjectAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnecProjectAdminServiceServer will
// result in compilation errors.
type UnsafeOnecProjectAdminServiceServer interface {
	mustEmbedUnimplementedOnecProjectAdminServiceServer()
}

func RegisterOnecProjectAdminServiceServer(s grpc.ServiceRegistrar, srv OnecProjectAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedOnecProjectAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OnecProjectAdminService_ServiceDesc, srv)
}

func _OnecProjectAdminService_AddOnecProjectAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOnecProjectAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecProjectAdminServiceServer).AddOnecProjectAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecProjectAdminService_AddOnecProjectAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecProjectAdminServiceServer).AddOnecProjectAdmin(ctx, req.(*AddOnecProjectAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecProjectAdminService_UpdateOnecProjectAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOnecProjectAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecProjectAdminServiceServer).UpdateOnecProjectAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecProjectAdminService_UpdateOnecProjectAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecProjectAdminServiceServer).UpdateOnecProjectAdmin(ctx, req.(*UpdateOnecProjectAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecProjectAdminService_DelOnecProjectAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOnecProjectAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecProjectAdminServiceServer).DelOnecProjectAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecProjectAdminService_DelOnecProjectAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecProjectAdminServiceServer).DelOnecProjectAdmin(ctx, req.(*DelOnecProjectAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecProjectAdminService_GetOnecProjectAdminById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnecProjectAdminByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecProjectAdminServiceServer).GetOnecProjectAdminById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecProjectAdminService_GetOnecProjectAdminById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecProjectAdminServiceServer).GetOnecProjectAdminById(ctx, req.(*GetOnecProjectAdminByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecProjectAdminService_SearchOnecProjectAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOnecProjectAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecProjectAdminServiceServer).SearchOnecProjectAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecProjectAdminService_SearchOnecProjectAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecProjectAdminServiceServer).SearchOnecProjectAdmin(ctx, req.(*SearchOnecProjectAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OnecProjectAdminService_ServiceDesc is the grpc.ServiceDesc for OnecProjectAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnecProjectAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OnecProjectAdminService",
	HandlerType: (*OnecProjectAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOnecProjectAdmin",
			Handler:    _OnecProjectAdminService_AddOnecProjectAdmin_Handler,
		},
		{
			MethodName: "UpdateOnecProjectAdmin",
			Handler:    _OnecProjectAdminService_UpdateOnecProjectAdmin_Handler,
		},
		{
			MethodName: "DelOnecProjectAdmin",
			Handler:    _OnecProjectAdminService_DelOnecProjectAdmin_Handler,
		},
		{
			MethodName: "GetOnecProjectAdminById",
			Handler:    _OnecProjectAdminService_GetOnecProjectAdminById_Handler,
		},
		{
			MethodName: "SearchOnecProjectAdmin",
			Handler:    _OnecProjectAdminService_SearchOnecProjectAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}

const (
	OnecProjectApplicationService_AddOnecProjectApplication_FullMethodName     = "/pb.OnecProjectApplicationService/AddOnecProjectApplication"
	OnecProjectApplicationService_UpdateOnecProjectApplication_FullMethodName  = "/pb.OnecProjectApplicationService/UpdateOnecProjectApplication"
	OnecProjectApplicationService_DelOnecProjectApplication_FullMethodName     = "/pb.OnecProjectApplicationService/DelOnecProjectApplication"
	OnecProjectApplicationService_GetOnecProjectApplicationById_FullMethodName = "/pb.OnecProjectApplicationService/GetOnecProjectApplicationById"
	OnecProjectApplicationService_SearchOnecProjectApplication_FullMethodName  = "/pb.OnecProjectApplicationService/SearchOnecProjectApplication"
)

// OnecProjectApplicationServiceClient is the client API for OnecProjectApplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnecProjectApplicationServiceClient interface {
	// -----------------------应用表，-----------------------
	AddOnecProjectApplication(ctx context.Context, in *AddOnecProjectApplicationReq, opts ...grpc.CallOption) (*AddOnecProjectApplicationResp, error)
	UpdateOnecProjectApplication(ctx context.Context, in *UpdateOnecProjectApplicationReq, opts ...grpc.CallOption) (*UpdateOnecProjectApplicationResp, error)
	DelOnecProjectApplication(ctx context.Context, in *DelOnecProjectApplicationReq, opts ...grpc.CallOption) (*DelOnecProjectApplicationResp, error)
	GetOnecProjectApplicationById(ctx context.Context, in *GetOnecProjectApplicationByIdReq, opts ...grpc.CallOption) (*GetOnecProjectApplicationByIdResp, error)
	SearchOnecProjectApplication(ctx context.Context, in *SearchOnecProjectApplicationReq, opts ...grpc.CallOption) (*SearchOnecProjectApplicationResp, error)
}

type onecProjectApplicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnecProjectApplicationServiceClient(cc grpc.ClientConnInterface) OnecProjectApplicationServiceClient {
	return &onecProjectApplicationServiceClient{cc}
}

func (c *onecProjectApplicationServiceClient) AddOnecProjectApplication(ctx context.Context, in *AddOnecProjectApplicationReq, opts ...grpc.CallOption) (*AddOnecProjectApplicationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOnecProjectApplicationResp)
	err := c.cc.Invoke(ctx, OnecProjectApplicationService_AddOnecProjectApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecProjectApplicationServiceClient) UpdateOnecProjectApplication(ctx context.Context, in *UpdateOnecProjectApplicationReq, opts ...grpc.CallOption) (*UpdateOnecProjectApplicationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOnecProjectApplicationResp)
	err := c.cc.Invoke(ctx, OnecProjectApplicationService_UpdateOnecProjectApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecProjectApplicationServiceClient) DelOnecProjectApplication(ctx context.Context, in *DelOnecProjectApplicationReq, opts ...grpc.CallOption) (*DelOnecProjectApplicationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelOnecProjectApplicationResp)
	err := c.cc.Invoke(ctx, OnecProjectApplicationService_DelOnecProjectApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecProjectApplicationServiceClient) GetOnecProjectApplicationById(ctx context.Context, in *GetOnecProjectApplicationByIdReq, opts ...grpc.CallOption) (*GetOnecProjectApplicationByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOnecProjectApplicationByIdResp)
	err := c.cc.Invoke(ctx, OnecProjectApplicationService_GetOnecProjectApplicationById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecProjectApplicationServiceClient) SearchOnecProjectApplication(ctx context.Context, in *SearchOnecProjectApplicationReq, opts ...grpc.CallOption) (*SearchOnecProjectApplicationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchOnecProjectApplicationResp)
	err := c.cc.Invoke(ctx, OnecProjectApplicationService_SearchOnecProjectApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnecProjectApplicationServiceServer is the server API for OnecProjectApplicationService service.
// All implementations must embed UnimplementedOnecProjectApplicationServiceServer
// for forward compatibility.
type OnecProjectApplicationServiceServer interface {
	// -----------------------应用表，-----------------------
	AddOnecProjectApplication(context.Context, *AddOnecProjectApplicationReq) (*AddOnecProjectApplicationResp, error)
	UpdateOnecProjectApplication(context.Context, *UpdateOnecProjectApplicationReq) (*UpdateOnecProjectApplicationResp, error)
	DelOnecProjectApplication(context.Context, *DelOnecProjectApplicationReq) (*DelOnecProjectApplicationResp, error)
	GetOnecProjectApplicationById(context.Context, *GetOnecProjectApplicationByIdReq) (*GetOnecProjectApplicationByIdResp, error)
	SearchOnecProjectApplication(context.Context, *SearchOnecProjectApplicationReq) (*SearchOnecProjectApplicationResp, error)
	mustEmbedUnimplementedOnecProjectApplicationServiceServer()
}

// UnimplementedOnecProjectApplicationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOnecProjectApplicationServiceServer struct{}

func (UnimplementedOnecProjectApplicationServiceServer) AddOnecProjectApplication(context.Context, *AddOnecProjectApplicationReq) (*AddOnecProjectApplicationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOnecProjectApplication not implemented")
}
func (UnimplementedOnecProjectApplicationServiceServer) UpdateOnecProjectApplication(context.Context, *UpdateOnecProjectApplicationReq) (*UpdateOnecProjectApplicationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOnecProjectApplication not implemented")
}
func (UnimplementedOnecProjectApplicationServiceServer) DelOnecProjectApplication(context.Context, *DelOnecProjectApplicationReq) (*DelOnecProjectApplicationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOnecProjectApplication not implemented")
}
func (UnimplementedOnecProjectApplicationServiceServer) GetOnecProjectApplicationById(context.Context, *GetOnecProjectApplicationByIdReq) (*GetOnecProjectApplicationByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnecProjectApplicationById not implemented")
}
func (UnimplementedOnecProjectApplicationServiceServer) SearchOnecProjectApplication(context.Context, *SearchOnecProjectApplicationReq) (*SearchOnecProjectApplicationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOnecProjectApplication not implemented")
}
func (UnimplementedOnecProjectApplicationServiceServer) mustEmbedUnimplementedOnecProjectApplicationServiceServer() {
}
func (UnimplementedOnecProjectApplicationServiceServer) testEmbeddedByValue() {}

// UnsafeOnecProjectApplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnecProjectApplicationServiceServer will
// result in compilation errors.
type UnsafeOnecProjectApplicationServiceServer interface {
	mustEmbedUnimplementedOnecProjectApplicationServiceServer()
}

func RegisterOnecProjectApplicationServiceServer(s grpc.ServiceRegistrar, srv OnecProjectApplicationServiceServer) {
	// If the following call pancis, it indicates UnimplementedOnecProjectApplicationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OnecProjectApplicationService_ServiceDesc, srv)
}

func _OnecProjectApplicationService_AddOnecProjectApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOnecProjectApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecProjectApplicationServiceServer).AddOnecProjectApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecProjectApplicationService_AddOnecProjectApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecProjectApplicationServiceServer).AddOnecProjectApplication(ctx, req.(*AddOnecProjectApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecProjectApplicationService_UpdateOnecProjectApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOnecProjectApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecProjectApplicationServiceServer).UpdateOnecProjectApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecProjectApplicationService_UpdateOnecProjectApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecProjectApplicationServiceServer).UpdateOnecProjectApplication(ctx, req.(*UpdateOnecProjectApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecProjectApplicationService_DelOnecProjectApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOnecProjectApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecProjectApplicationServiceServer).DelOnecProjectApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecProjectApplicationService_DelOnecProjectApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecProjectApplicationServiceServer).DelOnecProjectApplication(ctx, req.(*DelOnecProjectApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecProjectApplicationService_GetOnecProjectApplicationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnecProjectApplicationByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecProjectApplicationServiceServer).GetOnecProjectApplicationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecProjectApplicationService_GetOnecProjectApplicationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecProjectApplicationServiceServer).GetOnecProjectApplicationById(ctx, req.(*GetOnecProjectApplicationByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecProjectApplicationService_SearchOnecProjectApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOnecProjectApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecProjectApplicationServiceServer).SearchOnecProjectApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecProjectApplicationService_SearchOnecProjectApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecProjectApplicationServiceServer).SearchOnecProjectApplication(ctx, req.(*SearchOnecProjectApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OnecProjectApplicationService_ServiceDesc is the grpc.ServiceDesc for OnecProjectApplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnecProjectApplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OnecProjectApplicationService",
	HandlerType: (*OnecProjectApplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOnecProjectApplication",
			Handler:    _OnecProjectApplicationService_AddOnecProjectApplication_Handler,
		},
		{
			MethodName: "UpdateOnecProjectApplication",
			Handler:    _OnecProjectApplicationService_UpdateOnecProjectApplication_Handler,
		},
		{
			MethodName: "DelOnecProjectApplication",
			Handler:    _OnecProjectApplicationService_DelOnecProjectApplication_Handler,
		},
		{
			MethodName: "GetOnecProjectApplicationById",
			Handler:    _OnecProjectApplicationService_GetOnecProjectApplicationById_Handler,
		},
		{
			MethodName: "SearchOnecProjectApplication",
			Handler:    _OnecProjectApplicationService_SearchOnecProjectApplication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}
