// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: manager.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OnecClusterService_AddOnecCluster_FullMethodName     = "/pb.OnecClusterService/AddOnecCluster"
	OnecClusterService_UpdateOnecCluster_FullMethodName  = "/pb.OnecClusterService/UpdateOnecCluster"
	OnecClusterService_DelOnecCluster_FullMethodName     = "/pb.OnecClusterService/DelOnecCluster"
	OnecClusterService_GetOnecClusterById_FullMethodName = "/pb.OnecClusterService/GetOnecClusterById"
	OnecClusterService_SearchOnecCluster_FullMethodName  = "/pb.OnecClusterService/SearchOnecCluster"
	OnecClusterService_SyncOnecCluster_FullMethodName    = "/pb.OnecClusterService/SyncOnecCluster"
	OnecClusterService_AddOnecNode_FullMethodName        = "/pb.OnecClusterService/AddOnecNode"
)

// OnecClusterServiceClient is the client API for OnecClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnecClusterServiceClient interface {
	// -----------------------集群表，用于管理多个 Kubernetes 集群-----------------------
	AddOnecCluster(ctx context.Context, in *AddOnecClusterReq, opts ...grpc.CallOption) (*AddOnecClusterResp, error)
	UpdateOnecCluster(ctx context.Context, in *UpdateOnecClusterReq, opts ...grpc.CallOption) (*UpdateOnecClusterResp, error)
	DelOnecCluster(ctx context.Context, in *DelOnecClusterReq, opts ...grpc.CallOption) (*DelOnecClusterResp, error)
	GetOnecClusterById(ctx context.Context, in *GetOnecClusterByIdReq, opts ...grpc.CallOption) (*GetOnecClusterByIdResp, error)
	SearchOnecCluster(ctx context.Context, in *SearchOnecClusterReq, opts ...grpc.CallOption) (*SearchOnecClusterResp, error)
	// 同步集群信息
	SyncOnecCluster(ctx context.Context, in *SyncOnecClusterReq, opts ...grpc.CallOption) (*SyncOnecClusterResp, error)
	AddOnecNode(ctx context.Context, in *AddOnecNodeReq, opts ...grpc.CallOption) (*AddOnecNodeResp, error)
}

type onecClusterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnecClusterServiceClient(cc grpc.ClientConnInterface) OnecClusterServiceClient {
	return &onecClusterServiceClient{cc}
}

func (c *onecClusterServiceClient) AddOnecCluster(ctx context.Context, in *AddOnecClusterReq, opts ...grpc.CallOption) (*AddOnecClusterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOnecClusterResp)
	err := c.cc.Invoke(ctx, OnecClusterService_AddOnecCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecClusterServiceClient) UpdateOnecCluster(ctx context.Context, in *UpdateOnecClusterReq, opts ...grpc.CallOption) (*UpdateOnecClusterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOnecClusterResp)
	err := c.cc.Invoke(ctx, OnecClusterService_UpdateOnecCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecClusterServiceClient) DelOnecCluster(ctx context.Context, in *DelOnecClusterReq, opts ...grpc.CallOption) (*DelOnecClusterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelOnecClusterResp)
	err := c.cc.Invoke(ctx, OnecClusterService_DelOnecCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecClusterServiceClient) GetOnecClusterById(ctx context.Context, in *GetOnecClusterByIdReq, opts ...grpc.CallOption) (*GetOnecClusterByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOnecClusterByIdResp)
	err := c.cc.Invoke(ctx, OnecClusterService_GetOnecClusterById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecClusterServiceClient) SearchOnecCluster(ctx context.Context, in *SearchOnecClusterReq, opts ...grpc.CallOption) (*SearchOnecClusterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchOnecClusterResp)
	err := c.cc.Invoke(ctx, OnecClusterService_SearchOnecCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecClusterServiceClient) SyncOnecCluster(ctx context.Context, in *SyncOnecClusterReq, opts ...grpc.CallOption) (*SyncOnecClusterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncOnecClusterResp)
	err := c.cc.Invoke(ctx, OnecClusterService_SyncOnecCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecClusterServiceClient) AddOnecNode(ctx context.Context, in *AddOnecNodeReq, opts ...grpc.CallOption) (*AddOnecNodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOnecNodeResp)
	err := c.cc.Invoke(ctx, OnecClusterService_AddOnecNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnecClusterServiceServer is the server API for OnecClusterService service.
// All implementations must embed UnimplementedOnecClusterServiceServer
// for forward compatibility.
type OnecClusterServiceServer interface {
	// -----------------------集群表，用于管理多个 Kubernetes 集群-----------------------
	AddOnecCluster(context.Context, *AddOnecClusterReq) (*AddOnecClusterResp, error)
	UpdateOnecCluster(context.Context, *UpdateOnecClusterReq) (*UpdateOnecClusterResp, error)
	DelOnecCluster(context.Context, *DelOnecClusterReq) (*DelOnecClusterResp, error)
	GetOnecClusterById(context.Context, *GetOnecClusterByIdReq) (*GetOnecClusterByIdResp, error)
	SearchOnecCluster(context.Context, *SearchOnecClusterReq) (*SearchOnecClusterResp, error)
	// 同步集群信息
	SyncOnecCluster(context.Context, *SyncOnecClusterReq) (*SyncOnecClusterResp, error)
	AddOnecNode(context.Context, *AddOnecNodeReq) (*AddOnecNodeResp, error)
	mustEmbedUnimplementedOnecClusterServiceServer()
}

// UnimplementedOnecClusterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOnecClusterServiceServer struct{}

func (UnimplementedOnecClusterServiceServer) AddOnecCluster(context.Context, *AddOnecClusterReq) (*AddOnecClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOnecCluster not implemented")
}
func (UnimplementedOnecClusterServiceServer) UpdateOnecCluster(context.Context, *UpdateOnecClusterReq) (*UpdateOnecClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOnecCluster not implemented")
}
func (UnimplementedOnecClusterServiceServer) DelOnecCluster(context.Context, *DelOnecClusterReq) (*DelOnecClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOnecCluster not implemented")
}
func (UnimplementedOnecClusterServiceServer) GetOnecClusterById(context.Context, *GetOnecClusterByIdReq) (*GetOnecClusterByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnecClusterById not implemented")
}
func (UnimplementedOnecClusterServiceServer) SearchOnecCluster(context.Context, *SearchOnecClusterReq) (*SearchOnecClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOnecCluster not implemented")
}
func (UnimplementedOnecClusterServiceServer) SyncOnecCluster(context.Context, *SyncOnecClusterReq) (*SyncOnecClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncOnecCluster not implemented")
}
func (UnimplementedOnecClusterServiceServer) AddOnecNode(context.Context, *AddOnecNodeReq) (*AddOnecNodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOnecNode not implemented")
}
func (UnimplementedOnecClusterServiceServer) mustEmbedUnimplementedOnecClusterServiceServer() {}
func (UnimplementedOnecClusterServiceServer) testEmbeddedByValue()                            {}

// UnsafeOnecClusterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnecClusterServiceServer will
// result in compilation errors.
type UnsafeOnecClusterServiceServer interface {
	mustEmbedUnimplementedOnecClusterServiceServer()
}

func RegisterOnecClusterServiceServer(s grpc.ServiceRegistrar, srv OnecClusterServiceServer) {
	// If the following call pancis, it indicates UnimplementedOnecClusterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OnecClusterService_ServiceDesc, srv)
}

func _OnecClusterService_AddOnecCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOnecClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecClusterServiceServer).AddOnecCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecClusterService_AddOnecCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecClusterServiceServer).AddOnecCluster(ctx, req.(*AddOnecClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecClusterService_UpdateOnecCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOnecClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecClusterServiceServer).UpdateOnecCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecClusterService_UpdateOnecCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecClusterServiceServer).UpdateOnecCluster(ctx, req.(*UpdateOnecClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecClusterService_DelOnecCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOnecClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecClusterServiceServer).DelOnecCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecClusterService_DelOnecCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecClusterServiceServer).DelOnecCluster(ctx, req.(*DelOnecClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecClusterService_GetOnecClusterById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnecClusterByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecClusterServiceServer).GetOnecClusterById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecClusterService_GetOnecClusterById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecClusterServiceServer).GetOnecClusterById(ctx, req.(*GetOnecClusterByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecClusterService_SearchOnecCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOnecClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecClusterServiceServer).SearchOnecCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecClusterService_SearchOnecCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecClusterServiceServer).SearchOnecCluster(ctx, req.(*SearchOnecClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecClusterService_SyncOnecCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncOnecClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecClusterServiceServer).SyncOnecCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecClusterService_SyncOnecCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecClusterServiceServer).SyncOnecCluster(ctx, req.(*SyncOnecClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecClusterService_AddOnecNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOnecNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecClusterServiceServer).AddOnecNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecClusterService_AddOnecNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecClusterServiceServer).AddOnecNode(ctx, req.(*AddOnecNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OnecClusterService_ServiceDesc is the grpc.ServiceDesc for OnecClusterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnecClusterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OnecClusterService",
	HandlerType: (*OnecClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOnecCluster",
			Handler:    _OnecClusterService_AddOnecCluster_Handler,
		},
		{
			MethodName: "UpdateOnecCluster",
			Handler:    _OnecClusterService_UpdateOnecCluster_Handler,
		},
		{
			MethodName: "DelOnecCluster",
			Handler:    _OnecClusterService_DelOnecCluster_Handler,
		},
		{
			MethodName: "GetOnecClusterById",
			Handler:    _OnecClusterService_GetOnecClusterById_Handler,
		},
		{
			MethodName: "SearchOnecCluster",
			Handler:    _OnecClusterService_SearchOnecCluster_Handler,
		},
		{
			MethodName: "SyncOnecCluster",
			Handler:    _OnecClusterService_SyncOnecCluster_Handler,
		},
		{
			MethodName: "AddOnecNode",
			Handler:    _OnecClusterService_AddOnecNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}

const (
	OnecNodeService_DelOnecNode_FullMethodName           = "/pb.OnecNodeService/DelOnecNode"
	OnecNodeService_GetOnecNodeById_FullMethodName       = "/pb.OnecNodeService/GetOnecNodeById"
	OnecNodeService_SearchOnecNode_FullMethodName        = "/pb.OnecNodeService/SearchOnecNode"
	OnecNodeService_AddOnecNodeLabel_FullMethodName      = "/pb.OnecNodeService/AddOnecNodeLabel"
	OnecNodeService_DelOnecNodeLabel_FullMethodName      = "/pb.OnecNodeService/DelOnecNodeLabel"
	OnecNodeService_AddOnecNodeAnnotation_FullMethodName = "/pb.OnecNodeService/AddOnecNodeAnnotation"
	OnecNodeService_DelOnecNodeAnnotation_FullMethodName = "/pb.OnecNodeService/DelOnecNodeAnnotation"
	OnecNodeService_ForbidOnecNode_FullMethodName        = "/pb.OnecNodeService/ForbidOnecNode"
	OnecNodeService_CancelForbidOnecNode_FullMethodName  = "/pb.OnecNodeService/CancelForbidOnecNode"
	OnecNodeService_AddOnecNodeTaint_FullMethodName      = "/pb.OnecNodeService/AddOnecNodeTaint"
	OnecNodeService_DelOnecNodeTaint_FullMethodName      = "/pb.OnecNodeService/DelOnecNodeTaint"
	OnecNodeService_SyncOnecNode_FullMethodName          = "/pb.OnecNodeService/SyncOnecNode"
)

// OnecNodeServiceClient is the client API for OnecNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnecNodeServiceClient interface {
	// -----------------------节点表，用于管理各集群中的节点信息-----------------------
	DelOnecNode(ctx context.Context, in *DelOnecNodeReq, opts ...grpc.CallOption) (*DelOnecNodeResp, error)
	GetOnecNodeById(ctx context.Context, in *GetOnecNodeByIdReq, opts ...grpc.CallOption) (*GetOnecNodeByIdResp, error)
	SearchOnecNode(ctx context.Context, in *SearchOnecNodeReq, opts ...grpc.CallOption) (*SearchOnecNodeResp, error)
	// 节点添加标签
	AddOnecNodeLabel(ctx context.Context, in *AddOnecNodeLabelReq, opts ...grpc.CallOption) (*AddOnecNodeLabelResp, error)
	// 节点删除标签
	DelOnecNodeLabel(ctx context.Context, in *DelOnecNodeLabelReq, opts ...grpc.CallOption) (*DelOnecNodeLabelResp, error)
	// 节点添加注解
	AddOnecNodeAnnotation(ctx context.Context, in *AddOnecNodeAnnotationReq, opts ...grpc.CallOption) (*AddOnecNodeAnnotationResp, error)
	// 节点删除注解
	DelOnecNodeAnnotation(ctx context.Context, in *DelOnecNodeAnnotationReq, opts ...grpc.CallOption) (*DelOnecNodeAnnotationResp, error)
	// 禁止调度
	ForbidOnecNode(ctx context.Context, in *ForbidOnecNodeReq, opts ...grpc.CallOption) (*ForbidOnecNodeResp, error)
	// 取消禁止调度
	CancelForbidOnecNode(ctx context.Context, in *CancelForbidOnecNodeReq, opts ...grpc.CallOption) (*CancelForbidOnecNodeResp, error)
	// 添加污点
	AddOnecNodeTaint(ctx context.Context, in *AddOnecNodeTaintReq, opts ...grpc.CallOption) (*AddOnecNodeTaintResp, error)
	// 删除污点
	DelOnecNodeTaint(ctx context.Context, in *DelOnecNodeTaintReq, opts ...grpc.CallOption) (*DelOnecNodeTaintResp, error)
	// 同步节点信息
	SyncOnecNode(ctx context.Context, in *SyncOnecNodeReq, opts ...grpc.CallOption) (*SyncOnecNodeResp, error)
}

type onecNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnecNodeServiceClient(cc grpc.ClientConnInterface) OnecNodeServiceClient {
	return &onecNodeServiceClient{cc}
}

func (c *onecNodeServiceClient) DelOnecNode(ctx context.Context, in *DelOnecNodeReq, opts ...grpc.CallOption) (*DelOnecNodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelOnecNodeResp)
	err := c.cc.Invoke(ctx, OnecNodeService_DelOnecNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) GetOnecNodeById(ctx context.Context, in *GetOnecNodeByIdReq, opts ...grpc.CallOption) (*GetOnecNodeByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOnecNodeByIdResp)
	err := c.cc.Invoke(ctx, OnecNodeService_GetOnecNodeById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) SearchOnecNode(ctx context.Context, in *SearchOnecNodeReq, opts ...grpc.CallOption) (*SearchOnecNodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchOnecNodeResp)
	err := c.cc.Invoke(ctx, OnecNodeService_SearchOnecNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) AddOnecNodeLabel(ctx context.Context, in *AddOnecNodeLabelReq, opts ...grpc.CallOption) (*AddOnecNodeLabelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOnecNodeLabelResp)
	err := c.cc.Invoke(ctx, OnecNodeService_AddOnecNodeLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) DelOnecNodeLabel(ctx context.Context, in *DelOnecNodeLabelReq, opts ...grpc.CallOption) (*DelOnecNodeLabelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelOnecNodeLabelResp)
	err := c.cc.Invoke(ctx, OnecNodeService_DelOnecNodeLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) AddOnecNodeAnnotation(ctx context.Context, in *AddOnecNodeAnnotationReq, opts ...grpc.CallOption) (*AddOnecNodeAnnotationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOnecNodeAnnotationResp)
	err := c.cc.Invoke(ctx, OnecNodeService_AddOnecNodeAnnotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) DelOnecNodeAnnotation(ctx context.Context, in *DelOnecNodeAnnotationReq, opts ...grpc.CallOption) (*DelOnecNodeAnnotationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelOnecNodeAnnotationResp)
	err := c.cc.Invoke(ctx, OnecNodeService_DelOnecNodeAnnotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) ForbidOnecNode(ctx context.Context, in *ForbidOnecNodeReq, opts ...grpc.CallOption) (*ForbidOnecNodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForbidOnecNodeResp)
	err := c.cc.Invoke(ctx, OnecNodeService_ForbidOnecNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) CancelForbidOnecNode(ctx context.Context, in *CancelForbidOnecNodeReq, opts ...grpc.CallOption) (*CancelForbidOnecNodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelForbidOnecNodeResp)
	err := c.cc.Invoke(ctx, OnecNodeService_CancelForbidOnecNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) AddOnecNodeTaint(ctx context.Context, in *AddOnecNodeTaintReq, opts ...grpc.CallOption) (*AddOnecNodeTaintResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOnecNodeTaintResp)
	err := c.cc.Invoke(ctx, OnecNodeService_AddOnecNodeTaint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) DelOnecNodeTaint(ctx context.Context, in *DelOnecNodeTaintReq, opts ...grpc.CallOption) (*DelOnecNodeTaintResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelOnecNodeTaintResp)
	err := c.cc.Invoke(ctx, OnecNodeService_DelOnecNodeTaint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onecNodeServiceClient) SyncOnecNode(ctx context.Context, in *SyncOnecNodeReq, opts ...grpc.CallOption) (*SyncOnecNodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncOnecNodeResp)
	err := c.cc.Invoke(ctx, OnecNodeService_SyncOnecNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnecNodeServiceServer is the server API for OnecNodeService service.
// All implementations must embed UnimplementedOnecNodeServiceServer
// for forward compatibility.
type OnecNodeServiceServer interface {
	// -----------------------节点表，用于管理各集群中的节点信息-----------------------
	DelOnecNode(context.Context, *DelOnecNodeReq) (*DelOnecNodeResp, error)
	GetOnecNodeById(context.Context, *GetOnecNodeByIdReq) (*GetOnecNodeByIdResp, error)
	SearchOnecNode(context.Context, *SearchOnecNodeReq) (*SearchOnecNodeResp, error)
	// 节点添加标签
	AddOnecNodeLabel(context.Context, *AddOnecNodeLabelReq) (*AddOnecNodeLabelResp, error)
	// 节点删除标签
	DelOnecNodeLabel(context.Context, *DelOnecNodeLabelReq) (*DelOnecNodeLabelResp, error)
	// 节点添加注解
	AddOnecNodeAnnotation(context.Context, *AddOnecNodeAnnotationReq) (*AddOnecNodeAnnotationResp, error)
	// 节点删除注解
	DelOnecNodeAnnotation(context.Context, *DelOnecNodeAnnotationReq) (*DelOnecNodeAnnotationResp, error)
	// 禁止调度
	ForbidOnecNode(context.Context, *ForbidOnecNodeReq) (*ForbidOnecNodeResp, error)
	// 取消禁止调度
	CancelForbidOnecNode(context.Context, *CancelForbidOnecNodeReq) (*CancelForbidOnecNodeResp, error)
	// 添加污点
	AddOnecNodeTaint(context.Context, *AddOnecNodeTaintReq) (*AddOnecNodeTaintResp, error)
	// 删除污点
	DelOnecNodeTaint(context.Context, *DelOnecNodeTaintReq) (*DelOnecNodeTaintResp, error)
	// 同步节点信息
	SyncOnecNode(context.Context, *SyncOnecNodeReq) (*SyncOnecNodeResp, error)
	mustEmbedUnimplementedOnecNodeServiceServer()
}

// UnimplementedOnecNodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOnecNodeServiceServer struct{}

func (UnimplementedOnecNodeServiceServer) DelOnecNode(context.Context, *DelOnecNodeReq) (*DelOnecNodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOnecNode not implemented")
}
func (UnimplementedOnecNodeServiceServer) GetOnecNodeById(context.Context, *GetOnecNodeByIdReq) (*GetOnecNodeByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnecNodeById not implemented")
}
func (UnimplementedOnecNodeServiceServer) SearchOnecNode(context.Context, *SearchOnecNodeReq) (*SearchOnecNodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOnecNode not implemented")
}
func (UnimplementedOnecNodeServiceServer) AddOnecNodeLabel(context.Context, *AddOnecNodeLabelReq) (*AddOnecNodeLabelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOnecNodeLabel not implemented")
}
func (UnimplementedOnecNodeServiceServer) DelOnecNodeLabel(context.Context, *DelOnecNodeLabelReq) (*DelOnecNodeLabelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOnecNodeLabel not implemented")
}
func (UnimplementedOnecNodeServiceServer) AddOnecNodeAnnotation(context.Context, *AddOnecNodeAnnotationReq) (*AddOnecNodeAnnotationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOnecNodeAnnotation not implemented")
}
func (UnimplementedOnecNodeServiceServer) DelOnecNodeAnnotation(context.Context, *DelOnecNodeAnnotationReq) (*DelOnecNodeAnnotationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOnecNodeAnnotation not implemented")
}
func (UnimplementedOnecNodeServiceServer) ForbidOnecNode(context.Context, *ForbidOnecNodeReq) (*ForbidOnecNodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForbidOnecNode not implemented")
}
func (UnimplementedOnecNodeServiceServer) CancelForbidOnecNode(context.Context, *CancelForbidOnecNodeReq) (*CancelForbidOnecNodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelForbidOnecNode not implemented")
}
func (UnimplementedOnecNodeServiceServer) AddOnecNodeTaint(context.Context, *AddOnecNodeTaintReq) (*AddOnecNodeTaintResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOnecNodeTaint not implemented")
}
func (UnimplementedOnecNodeServiceServer) DelOnecNodeTaint(context.Context, *DelOnecNodeTaintReq) (*DelOnecNodeTaintResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOnecNodeTaint not implemented")
}
func (UnimplementedOnecNodeServiceServer) SyncOnecNode(context.Context, *SyncOnecNodeReq) (*SyncOnecNodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncOnecNode not implemented")
}
func (UnimplementedOnecNodeServiceServer) mustEmbedUnimplementedOnecNodeServiceServer() {}
func (UnimplementedOnecNodeServiceServer) testEmbeddedByValue()                         {}

// UnsafeOnecNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnecNodeServiceServer will
// result in compilation errors.
type UnsafeOnecNodeServiceServer interface {
	mustEmbedUnimplementedOnecNodeServiceServer()
}

func RegisterOnecNodeServiceServer(s grpc.ServiceRegistrar, srv OnecNodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedOnecNodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OnecNodeService_ServiceDesc, srv)
}

func _OnecNodeService_DelOnecNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOnecNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).DelOnecNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_DelOnecNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).DelOnecNode(ctx, req.(*DelOnecNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_GetOnecNodeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnecNodeByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).GetOnecNodeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_GetOnecNodeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).GetOnecNodeById(ctx, req.(*GetOnecNodeByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_SearchOnecNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOnecNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).SearchOnecNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_SearchOnecNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).SearchOnecNode(ctx, req.(*SearchOnecNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_AddOnecNodeLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOnecNodeLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).AddOnecNodeLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_AddOnecNodeLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).AddOnecNodeLabel(ctx, req.(*AddOnecNodeLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_DelOnecNodeLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOnecNodeLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).DelOnecNodeLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_DelOnecNodeLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).DelOnecNodeLabel(ctx, req.(*DelOnecNodeLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_AddOnecNodeAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOnecNodeAnnotationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).AddOnecNodeAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_AddOnecNodeAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).AddOnecNodeAnnotation(ctx, req.(*AddOnecNodeAnnotationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_DelOnecNodeAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOnecNodeAnnotationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).DelOnecNodeAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_DelOnecNodeAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).DelOnecNodeAnnotation(ctx, req.(*DelOnecNodeAnnotationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_ForbidOnecNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForbidOnecNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).ForbidOnecNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_ForbidOnecNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).ForbidOnecNode(ctx, req.(*ForbidOnecNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_CancelForbidOnecNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelForbidOnecNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).CancelForbidOnecNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_CancelForbidOnecNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).CancelForbidOnecNode(ctx, req.(*CancelForbidOnecNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_AddOnecNodeTaint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOnecNodeTaintReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).AddOnecNodeTaint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_AddOnecNodeTaint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).AddOnecNodeTaint(ctx, req.(*AddOnecNodeTaintReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_DelOnecNodeTaint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOnecNodeTaintReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).DelOnecNodeTaint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_DelOnecNodeTaint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).DelOnecNodeTaint(ctx, req.(*DelOnecNodeTaintReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnecNodeService_SyncOnecNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncOnecNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnecNodeServiceServer).SyncOnecNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnecNodeService_SyncOnecNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnecNodeServiceServer).SyncOnecNode(ctx, req.(*SyncOnecNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OnecNodeService_ServiceDesc is the grpc.ServiceDesc for OnecNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnecNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OnecNodeService",
	HandlerType: (*OnecNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DelOnecNode",
			Handler:    _OnecNodeService_DelOnecNode_Handler,
		},
		{
			MethodName: "GetOnecNodeById",
			Handler:    _OnecNodeService_GetOnecNodeById_Handler,
		},
		{
			MethodName: "SearchOnecNode",
			Handler:    _OnecNodeService_SearchOnecNode_Handler,
		},
		{
			MethodName: "AddOnecNodeLabel",
			Handler:    _OnecNodeService_AddOnecNodeLabel_Handler,
		},
		{
			MethodName: "DelOnecNodeLabel",
			Handler:    _OnecNodeService_DelOnecNodeLabel_Handler,
		},
		{
			MethodName: "AddOnecNodeAnnotation",
			Handler:    _OnecNodeService_AddOnecNodeAnnotation_Handler,
		},
		{
			MethodName: "DelOnecNodeAnnotation",
			Handler:    _OnecNodeService_DelOnecNodeAnnotation_Handler,
		},
		{
			MethodName: "ForbidOnecNode",
			Handler:    _OnecNodeService_ForbidOnecNode_Handler,
		},
		{
			MethodName: "CancelForbidOnecNode",
			Handler:    _OnecNodeService_CancelForbidOnecNode_Handler,
		},
		{
			MethodName: "AddOnecNodeTaint",
			Handler:    _OnecNodeService_AddOnecNodeTaint_Handler,
		},
		{
			MethodName: "DelOnecNodeTaint",
			Handler:    _OnecNodeService_DelOnecNodeTaint_Handler,
		},
		{
			MethodName: "SyncOnecNode",
			Handler:    _OnecNodeService_SyncOnecNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}
